from . import PostConfigurator
from ...NXOpen import *
from ..SIM import *

import typing
import enum

class TimeAnalysis(TaggedObject):
    def __init__(self) -> None: ...
    def Start(self) -> None:
        ...
    def Stop(self) -> None:
        ...
    def Reset(self) -> None:
        ...


class Snapshot(NXObject):
    def __init__(self) -> None: ...


class SinumerikCaSimplifyBodiesBuilder(Builder):
    def __init__(self) -> None: ...
    def DoReplace(self) -> None:
        ...
    AddOffset: Expression
    Associative: bool
    CloseGaps: SIM.SinumerikCaSimplifyBodiesBuilder.CloseGapTypes
    CoordSystem: CoordinateSystem
    DistanceTolerance: float
    ObjectToReplace: SelectDisplayableObjectList
    PlanesList: PlaneList
    ReplaceWith: SIM.SinumerikCaSimplifyBodiesBuilder.ObjectToReplaceWithTypes
    SplitOffset: Expression


    class ObjectToReplaceWithTypes(enum.Enum):
        Nothing = 0
        ConvexHull = 1
        BoundingSphere = 2
        BoundingBlock = 3
        BoundingCylinder = 4
        InscribedCylinder = 5
    

    class CloseGapTypes(enum.Enum):
        Sharp = 0
        Beveled = 1
        NoOffset = 2
    

class SinumerikCaPlaceholderBuilder(Builder):
    def __init__(self) -> None: ...
    def SelectComponent(self, compName: str) -> None:
        ...
    def UnselectComponent(self, compName: str) -> None:
        ...


class SinumerikCaFacetBuilder(Builder):
    def __init__(self) -> None: ...
    FacetTolerance: float


class SinumerikCaExportBuilder(Builder):
    def __init__(self) -> None: ...
    def ExportSpf(self, targetNode: str) -> None:
        ...
    ChainElementIndex: int
    CollisionPairIndex: int
    DeleteChainsAtStart: bool
    FileName: str
    ListOutput: bool
    ProtectionAreaElementIndex: int
    ProtectionAreaIndex: int


class SimDebugBuilder(Builder):
    def __init__(self) -> None: ...
    def GetUiSetting(self, type: SIM.SimDebugBuilder.UiType) -> bool:
        ...
    def SetUiSetting(self, type: SIM.SimDebugBuilder.UiType, state: bool) -> None:
        ...
    def GetTrace(self, type: SIM.SimDebugBuilder.TraceType) -> bool:
        ...
    def SetTrace(self, type: SIM.SimDebugBuilder.TraceType, state: bool) -> None:
        ...
    def ShowKinematicModelState(self) -> None:
        ...
    Driver: SIM.SimDebugBuilder.DriverType
    Dump: SIM.SimDebugBuilder.DumpType
    DumpOutput: SIM.SimDebugBuilder.OutputType
    DumpToFileName: str
    KinematicModel: SIM.SimDebugBuilder.KinematicModelType
    PrintoutTags: SIM.SimDebugBuilder.PrintoutTagsOrPointersType


    class UiType(enum.Enum):
        DisplayMomEvent = 0
        ShowPartAndTipJunctions = 1
        GenerateSpinningTools = 2
        UseHybridGougeChecker = 3
        UseMtbOldDialogs = 4
        UseFastTicker = 5
        PrintOutTraceSerialNumbers = 6
        PerformanceDisplayDetail = 7
        PerformanceDisplayTime = 8
        PerformanceIndentTime = 9
        PerformanceDisplayData = 10
        DctkWriteCollisionPairs = 11
    

    class TraceType(enum.Enum):
        ButtonDown = 0
        Vcr = 1
        Ipw = 2
        Performance = 3
        Collision = 4
        Gouge = 5
        Highlighting = 6
        Details = 7
        PositionalIsv = 8
        SpinningNonSpinning = 9
        KinematicModel = 10
        Event = 11
        LineServer = 12
        Sync = 13
        DctkSettings = 14
        DctkMovements = 15
        DctkDisplay = 16
        DctkCollision = 17
        ToolPathPicking = 18
    

    class PrintoutTagsOrPointersType(enum.Enum):
        Boolean = 0
        Value = 1
        Name = 2
    

    class OutputType(enum.Enum):
        Syslog = 0
        ListingWindow = 1
        Autotest = 2
        ToFile = 3
    

    class KinematicModelType(enum.Enum):
        Main = 0
        Simulation = 1
        Driver = 2
    

    class DumpType(enum.Enum):
        None = 0
        KinematicModel = 1
        Highlighting = 2
        Ipw = 3
        Collision = 4
        OutputBuffer = 5
        Time = 6
        Details = 7
        SynchronizeUi = 8
        SynchronizeManagerXtp = 9
        EngineParams = 10
        MomVariables = 11
        DebugUi = 12
        SimulationSettings = 13
        SimManager = 14
        PathEvents = 15
        MachiningTimeAnalysis = 16
    

    class DriverType(enum.Enum):
        Cse = 0
        Mtd = 1
    

class SaveSnapshotBuilder(Builder):
    def __init__(self) -> None: ...
    def SetSnapshotName(self, name: str) -> None:
        ...
    def SetSetupName(self, name: str) -> None:
        ...


class NcProgramSource(TaggedObject):
    def __init__(self) -> None: ...
    def AddMainProgram(self, channel: str, file: str) -> SIM.NcProgram:
        ...
    def AddSubprogram(self, file: str) -> SIM.NcProgram:
        ...


class NcProgramManagerBuilder(Builder):
    def __init__(self) -> None: ...
    def AddMatchingBreakpoint(self, condition: str) -> None:
        ...
    def AddBreakpoint(self, program: SIM.NcProgram, lineNumber: int) -> None:
        ...
    def ActivateBreakpoint(self, program: SIM.NcProgram, lineNumber: int) -> None:
        ...
    def DeactivateBreakpoint(self, program: SIM.NcProgram, lineNumber: int) -> None:
        ...
    def DeleteBreakpoint(self, program: SIM.NcProgram, lineNumber: int) -> None:
        ...
    def GetBreakpoints(self) -> typing.List[SIM.Breakpoint]:
        ...
    def DeactivateAllBreakpoints(self) -> None:
        ...
    def ActivateAllBreakpoints(self) -> None:
        ...
    def DeleteAllBreakpoints(self) -> None:
        ...
    def GetExternalFileSource(self) -> SIM.NcProgramSource:
        ...
    def GetSetupSource(self) -> SIM.NcProgramSource:
        ...


class NcProgram(NXObject):
    def __init__(self) -> None: ...
    def AddBreakpoint(self, line: int) -> None:
        """[Obsolete("Deprecated in NX12.0.0.  Use SIM.NcProgram.InsertBreakpoint instead which returns the added Breakpoint.")"""
        ...
    def InsertBreakpoint(self, line: int) -> SIM.Breakpoint:
        ...


class NcChannelSelectionData(NXObject):
    def __init__(self) -> None: ...
    def AssignFile(self, channel: int, file: str) -> None:
        ...
    def AssignFile(self, channel: str, file: str) -> None:
        ...
    def AssignProgram(self, channel: str, program: SIM.NcProgram) -> None:
        ...


class MachineToolConfiguration(Builder):
    def __init__(self) -> None: ...
    def GetMachineTechnology(self, channelName: str) -> SIM.MachineToolConfiguration.TechnologyTypes:
        ...
    def SetMachineTechnology(self, channelName: str, technology: SIM.MachineToolConfiguration.TechnologyTypes) -> None:
        ...
    def GetChannelTcpmSupport(self, channelName: str) -> bool:
        ...
    def SetChannelTcpmSupport(self, channelName: str, value: bool) -> None:
        ...
    def GetChannelSwiveling(self, channelName: str) -> SIM.MachineToolConfiguration.SwivelingTypes:
        ...
    def SetChannelSwiveling(self, channelName: str, value: SIM.MachineToolConfiguration.SwivelingTypes) -> None:
        ...
    def GetChannelToolAsSubprogram(self, channelName: str) -> bool:
        ...
    def SetChannelToolAsSubprogram(self, channelName: str, value: bool) -> None:
        ...
    def GetChannelToolCommand(self, channelName: str) -> str:
        ...
    def SetChannelToolCommand(self, channelName: str, newToolCommand: str) -> None:
        ...
    def GetChannelToolPreselect(self, channelName: str) -> str:
        ...
    def SetChannelToolPreselect(self, channelName: str, newToolPreselect: str) -> None:
        ...
    def GetLookahead(self, channelName: str) -> int:
        ...
    def SetLookahead(self, channelName: str, lookAhead: int) -> None:
        ...
    def GetChannelPlaneMill(self, channelName: str) -> SIM.MachineToolConfiguration.PlaneTypes:
        ...
    def SetChannelPlaneMill(self, channelName: str, newPlaneMill: SIM.MachineToolConfiguration.PlaneTypes) -> None:
        ...
    def GetChannelPlaneTurn(self, channelName: str) -> SIM.MachineToolConfiguration.PlaneTypes:
        ...
    def SetChannelPlaneTurn(self, channelName: str, newPlaneTurn: SIM.MachineToolConfiguration.PlaneTypes) -> None:
        ...
    def GetToolCarrierSwivelMode(self, channelName: str, carrierName: str) -> int:
        ...
    def SetToolCarrierSwivelMode(self, channelName: str, carrierName: str, newSwivelingMode: int) -> None:
        ...
    def GetToolCarrierDirectionSelection(self, channelName: str, carrierName: str) -> int:
        ...
    def SetToolCarrierDirectionSelection(self, channelName: str, carrierName: str, newDirectionSelection: int) -> None:
        ...
    def GetToolCarrierRetraction(self, channelName: str, carrierName: str) -> int:
        ...
    def SetToolCarrierRetraction(self, channelName: str, carrierName: str, newRetraction: int) -> None:
        ...
    def GetToolCarrierXRetractionPosition(self, channelName: str, carrierName: str) -> float:
        ...
    def SetToolCarrierXRetractionPosition(self, channelName: str, carrierName: str, newXPosition: float) -> None:
        ...
    def GetToolCarrierYRetractionPosition(self, channelName: str, carrierName: str) -> float:
        ...
    def SetToolCarrierYRetractionPosition(self, channelName: str, carrierName: str, newYPosition: float) -> None:
        ...
    def GetToolCarrierZRetractionPosition(self, channelName: str, carrierName: str) -> float:
        ...
    def SetToolCarrierZRetractionPosition(self, channelName: str, carrierName: str, newZPosition: float) -> None:
        ...
    def GetMdynamics(self) -> SIM.MachineToolConfiguration.MdynamicsTypes:
        ...
    def SetMdynamics(self, newMDynamicsValue: SIM.MachineToolConfiguration.MdynamicsTypes) -> None:
        ...
    def GetToolRadiusCompensation(self) -> bool:
        ...
    def SetToolRadiusCompensation(self, newCompensationValue: bool) -> None:
        ...
    def GetResolutionMm(self) -> float:
        ...
    def SetResolutionMm(self, newResolutionValue: float) -> None:
        ...
    def GetResolutionDeg(self) -> float:
        ...
    def SetResolutionDeg(self, newResolutionValue: float) -> None:
        ...
    def GetControllerLanguage(self) -> str:
        ...
    def SetControllerLanguage(self, newLanguage: str) -> None:
        ...
    def GetControllerVersion(self) -> str:
        ...
    def SetControllerVersion(self, newVersion: str) -> None:
        ...
    def GetArchiveControllerType(self) -> int:
        ...
    def SetArchiveControllerType(self, newArchiveControllerType: int) -> None:
        ...
    def GetArchiveControllerVersion(self) -> str:
        ...
    def SetArchiveControllerVersion(self, newArchiveControllerVersion: str) -> None:
        ...
    def GetUsedUnit(self) -> int:
        ...
    def SetUsedUnit(self, newUsedUnit: int) -> None:
        ...
    def GetCircularPrecision(self, channelName: str) -> float:
        ...
    def SetCircularPrecision(self, channelName: str, newCircularPrecision: float) -> None:
        ...
    def GetCircularPrecisionFactor(self, channelName: str) -> float:
        ...
    def SetCircularPrecisionFactor(self, channelName: str, newCircularPrecisionFactor: float) -> None:
        ...
    def GetDiameterGeoAxisName(self, channelName: str) -> str:
        ...
    def SetDiameterGeoAxisName(self, channelName: str, newDiameterMode: str) -> None:
        ...
    ControllerLine: SIM.MachineToolConfiguration.ControllerLines
    ControllerType: str
    CycleTime: float
    MachineName: str
    MachineVendor: str
    ToolCarrierName: str


    class UnitTypes(enum.Enum):
        Mm = 0
        In = 1
    

    class TechnologyTypes(enum.Enum):
        Mill = 0
        Turn = 1
        Millturn = 2
        None = 3
    

    class SwivelingTypes(enum.Enum):
        Cycle800 = 0
        Transarot = 1
    

    class PlaneTypes(enum.Enum):
        Operator = 0
        G17 = 1
        G18 = 2
        G19 = 3
    

    class MdynamicsTypes(enum.Enum):
        Fiveaxmill = 0
    

    class ControllerLines(enum.Enum):
        Solutionline = 0
        Powerline = 1
    

class MachineLibraryBuilder(Builder):
    def __init__(self) -> None: ...
    def EditMachineLibrary(self, machineName: str, attName: str, value: str) -> None:
        ...
    def InsertEntryToMachineLibrary(self, selectedMachineName: str) -> str:
        ...
    def RemoveEntryFromMachineLibrary(self, machineName: str) -> None:
        ...
    def GetAllMachineNames(self) -> str:
        ...
    def GetAllAttributeNames(self) -> str:
        ...
    def GetValue(self, machineName: str, attName: str) -> str:
        ...


class MachineKitBuilder(Builder):
    def __init__(self) -> None: ...
    Name: str
    OutputDirectory: str


class LoadSnapshotBuilder(Builder):
    def __init__(self) -> None: ...
    def GetSnapshot(self, snapshotName: str, setupName: str) -> SIM.Snapshot:
        ...
    RunToSimTime: bool


class KinematicSinumerikCaBuilder(Builder):
    def __init__(self) -> None: ...
    DetailLevel: int
    MagazineIndex: int
    MagazineLocationIndex: int
    PlcBit: int
    PlcInitState: SIM.KinematicSinumerikCaBuilder.PlcInitStateTypes
    PlcUsage: SIM.KinematicSinumerikCaBuilder.PlcUsageTypes
    TOIndex: int


    class PlcUsageTypes(enum.Enum):
        CollisionCheck = 0
        Visualize = 1
        All = 2
    

    class PlcInitStateTypes(enum.Enum):
        Active = 0
        Inactive = 1
        Preselect = 2
    

class KinematicModel(NXObject):
    def __init__(self) -> None: ...
    def FindMachineAxis(self, name: str) -> SIM.KinematicAxis:
        ...
    def SetMachineAxisValue(self, axis: SIM.KinematicAxis, value: float) -> None:
        ...
    def UpdateMachineDisplay(self) -> None:
        ...


class KinematicJunctionBuilderList(TaggedObject):
    def __init__(self) -> None: ...
    def Append(self, objects: typing.List[SIM.KinematicJunctionBuilder]) -> None:
        ...
    def Append(self, object: SIM.KinematicJunctionBuilder) -> None:
        ...
    def ClearIndex(self, deleteIdx: int) -> None:
        ...
    def FindIndex(self, obj: SIM.KinematicJunctionBuilder) -> int:
        ...
    def FindItem(self, index: int) -> SIM.KinematicJunctionBuilder:
        ...
    def Erase(self, index: int) -> None:
        ...
    def Erase(self, index: int, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Erase(self, obj: SIM.KinematicJunctionBuilder) -> None:
        ...
    def Erase(self, obj: SIM.KinematicJunctionBuilder, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Clear(self) -> None:
        ...
    def Clear(self, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def GetContents(self) -> typing.List[SIM.KinematicJunctionBuilder]:
        ...
    def SetContents(self, objects: typing.List[SIM.KinematicJunctionBuilder]) -> None:
        ...
    def Swap(self, index1: int, index2: int) -> None:
        ...
    def Swap(self, object1: SIM.KinematicJunctionBuilder, object2: SIM.KinematicJunctionBuilder) -> None:
        ...
    def Insert(self, location: int, object: SIM.KinematicJunctionBuilder) -> None:
        ...
    def MoveToTop(self, index: int) -> None:
        ...
    def MoveToBottom(self, index: int) -> None:
        ...
    Length: int


class KinematicJunctionBuilder(Builder):
    def __init__(self) -> None: ...
    def CreateDefaultCsys(self) -> CartesianCoordinateSystem:
        ...
    def CreateTooltipCsys(self) -> CartesianCoordinateSystem:
        ...
    def IsMachineZero(self) -> bool:
        ...
    def IsToolMount(self) -> bool:
        ...
    def IsToolTip(self) -> bool:
        ...
    Classification: SIM.KinematicJunctionBuilder.SystemClass
    Csys: CartesianCoordinateSystem
    Name: str


    class SystemClass(enum.Enum):
        None = 0
        Mount = 1
        MachineZero = 2
        ToolZero = 3
        ToolTip = 4
        LatheWpZx = 5
        LatheWpXy = 6
    

class KinematicJunction(NXObject):
    def __init__(self) -> None: ...
    Matrix: Matrix3x3
    Origin: Vector3d


class KinematicImportMcfBuilder(Builder):
    def __init__(self) -> None: ...
    IgnoreLimits: bool
    McfPath: str
    ReplaceChannel: bool


class KinematicConfigurator(NXObject):
    def __init__(self) -> None: ...
    def CreateJunctionBuilder(self, parent: SIM.KinematicComponent, jct: SIM.KinematicJunction) -> SIM.KinematicJunctionBuilder:
        ...
    def CreateAxisBuilder(self, parent: SIM.KinematicComponent, jct: SIM.KinematicJunction, axis: SIM.KinematicAxis) -> SIM.KinematicAxisBuilder:
        ...
    def SetName(self, name: str) -> None:
        ...
    def GetName(self) -> str:
        ...
    def AddUserClassification(self, userClass: str) -> None:
        ...
    def DeleteUserClassification(self, userClass: str) -> None:
        ...
    def RenameUserClassification(self, oldName: str, newName: str) -> None:
        ...
    def GetUserClassifications(self, uClasses: str) -> None:
        ...
    def AddHoldingSystem(self, holdSys: str) -> None:
        ...
    def DeleteHoldingSystem(self, holdSys: str) -> None:
        ...
    def DeleteAllHoldingSystems(self) -> None:
        ...
    def RenameHoldingSystem(self, oldName: str, newName: str) -> None:
        ...
    def GetHoldingSystems(self, holdSys: str) -> None:
        ...
    def AddChannel(self, channel: str) -> None:
        ...
    def DeleteChannel(self, channel: str) -> None:
        ...
    def DeleteAllChannels(self) -> None:
        ...
    def RenameChannel(self, oldName: str, newName: str) -> None:
        ...
    def GetChannels(self, channels: str) -> None:
        ...
    def CreateSpinningClone(self, source: SIM.KinematicComponent, combine: bool) -> SIM.KinematicComponent:
        ...
    def FindComponentsBySystemClass(self, sysclass: int, comps: typing.List[SIM.KinematicComponent]) -> None:
        """[Obsolete("Deprecated in NX8.0.3.  Use FindComponentsBySystemClass with NXOpen.SIM.KinematicComponentBuilder.SystemClass instead.")"""
        ...
    def FindComponentsBySystemClass(self, sysclass: SIM.KinematicComponentBuilder.SystemClass, comps: typing.List[SIM.KinematicComponent]) -> None:
        ...
    def FindJunction(self, name: str) -> SIM.KinematicJunction:
        ...
    def FindJunction(self, csys: NXObject) -> SIM.KinematicJunction:
        ...
    def FindAxis(self, name: str, pComp: SIM.KinematicComponent, pJct: SIM.KinematicJunction) -> SIM.KinematicAxis:
        ...
    def FindParentComponent(self, comp: SIM.KinematicComponent) -> SIM.KinematicComponent:
        ...
    def FindOwnerOfJunction(self, jct: SIM.KinematicJunction) -> SIM.KinematicComponent:
        ...
    def DeleteModel(self) -> None:
        ...
    def DeleteComponent(self, comp: SIM.KinematicComponent) -> None:
        ...
    def DeleteJunction(self, jct: SIM.KinematicJunction) -> None:
        ...
    def DeleteAxis(self, axis: SIM.KinematicAxis) -> None:
        ...
    def InsertRootComponent(self, newRoot: SIM.KinematicComponent) -> None:
        ...
    def DeleteRootComponent(self, oldRoot: SIM.KinematicComponent) -> None:
        ...
    def GetJunctions(self, junctions: typing.List[SIM.KinematicJunction]) -> None:
        ...
    def GetJunctionNames(self, junctions: str) -> None:
        ...
    def GetAxes(self, axes: typing.List[SIM.KinematicAxis]) -> None:
        ...
    def GetAxisNames(self, axes: str) -> None:
        ...
    def CreateSimDebugBuilder(self) -> SIM.SimDebugBuilder:
        ...
    def CreateNcChannelSelectionData(self) -> SIM.NcChannelSelectionData:
        ...
    def CreateIsvControlPanelBuilder(self, driverType: SIM.IsvControlPanelBuilder.VisualizationType, objects: typing.List[CAM.CAMObject]) -> SIM.IsvControlPanelBuilder:
        ...
    def CreateIsvControlPanelBuilder(self, driverType: SIM.IsvControlPanelBuilder.VisualizationType, filename: str) -> SIM.IsvControlPanelBuilder:
        """[Obsolete("Deprecated in NX9.0.0.  Use NXOpen.SIM.KinematicConfigurator.CreateIsvControlPanelBuilder with NXOpen.SIM.KinematicConfigurator.CreateNcChannelSelectionData instead.")"""
        ...
    def CreateIsvControlPanelBuilder(self, driverType: SIM.IsvControlPanelBuilder.VisualizationType, channelData: SIM.NcChannelSelectionData) -> SIM.IsvControlPanelBuilder:
        ...
    def CreateSimulationOptionsBuilder(self, dialogType: CAM.SimulationOptionsBuilder.DialogType) -> CAM.SimulationOptionsBuilder:
        ...
    def CreateCollisionPairBuilder(self) -> CAM.CollisionPairBuilder:
        ...
    def CreateKinematicSinumerikCaBuilder(self, comp: SIM.KinematicComponent) -> SIM.KinematicSinumerikCaBuilder:
        ...
    def CreateSinumerikCaSimplifyBodiesBuilder(self) -> SIM.SinumerikCaSimplifyBodiesBuilder:
        ...
    def CreateSinumerikCaExportBuilder(self) -> SIM.SinumerikCaExportBuilder:
        ...
    def CreateSinumerikCaFacetBuilder(self) -> SIM.SinumerikCaFacetBuilder:
        ...
    def CreateSinumerikCaPlaceholderBuilder(self) -> SIM.SinumerikCaPlaceholderBuilder:
        ...
    def CreateConvertFromMcdBuilder(self) -> CAM.ConvertFromMCDBuilder:
        ...
    def DefineKinematicChains(self) -> SIM.KinematicChainConfiguration:
        ...
    def CreateKinematicChain(self) -> SIM.KinematicChain:
        ...
    def CreateChannelConfigurationBuilder(self) -> SIM.KinematicChannelConfigurationBuilder:
        ...
    def CreateKinematicChannelBuilder(self) -> SIM.KinematicChannelBuilder:
        ...
    def CreateImportMcfBuilder(self) -> SIM.KinematicImportMcfBuilder:
        ...
    def CreateArchiveImportBuilder(self) -> SIM.ArchiveImportBuilder:
        ...
    def CreateMachineToolConfigurationBuilder(self) -> SIM.MachineToolConfiguration:
        ...
    def ImportNcArchive(self, ncFileName: str, printReport: bool) -> None:
        ...
    def CopyKinematicModel(self) -> SIM.KinematicModel:
        ...
    def DeleteKinematicModel(self, kimModel: SIM.KinematicModel) -> None:
        ...
    def CreateMachineLibraryBuilder(self) -> SIM.MachineLibraryBuilder:
        ...
    def CreateMachineKitBuilder(self) -> SIM.MachineKitBuilder:
        ...
    def CreateNcProgramManagerBuilder(self) -> SIM.NcProgramManagerBuilder:
        ...
    def ExportMachineKitBuilder(self, machineName: str) -> SIM.ExportMachineKitBuilder:
        ...
    def ImportMachineKitBuilder(self, kitPath: str) -> SIM.ImportMachineKitBuilder:
        ...
    def CreateSimulationSavesnapshotBuilder(self) -> SIM.SaveSnapshotBuilder:
        ...
    def CreateSimulationLoadsnapshotBuilder(self) -> SIM.LoadSnapshotBuilder:
        ...
    ComponentCollection: SIM.KinematicComponentCollection
    IsvControlPanelBuilder: SIM.IsvControlPanelBuilder


    class UniteTypes(enum.Enum):
        Create = 0
        Unite = 1
    

class KinematicComponentCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[SIM.KinematicComponent]:
        ...
    def __init__(self, owner: SIM.KinematicConfigurator) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, sid: str) -> SIM.KinematicComponent:
        ...
    def CreateComponentBuilder(self, parent: SIM.KinematicComponent, comp: SIM.KinematicComponent) -> SIM.KinematicComponentBuilder:
        ...
    def CreateMachineBaseComponentBuilder(self, machine: SIM.KinematicComponent) -> SIM.KinematicComponentBuilder:
        ...
    def CreateToolBaseComponentBuilder(self, tool: SIM.KinematicComponent) -> SIM.KinematicComponentBuilder:
        ...
    def CreateHeadBaseComponentBuilder(self, head: SIM.KinematicComponent) -> SIM.KinematicComponentBuilder:
        ...
    def CreateFacingHeadBaseComponentBuilder(self, head: SIM.KinematicComponent) -> SIM.KinematicComponentBuilder:
        ...
    def Tag(self) -> Tag: ...



class KinematicComponentBuilder(Builder):
    def __init__(self) -> None: ...
    def SetGeometries(self, geos: typing.List[NXObject]) -> None:
        ...
    def GetGeometries(self, geos: typing.List[NXObject]) -> None:
        ...
    def DeleteAllGeometries(self) -> None:
        ...
    def AddGeometry(self, geo: NXObject) -> None:
        ...
    def DeleteGeometry(self, geo: NXObject) -> None:
        ...
    def GetSaveIpw(self) -> bool:
        ...
    def SetSaveIpw(self, saveIpw: bool) -> None:
        ...
    def AddSystemClass(self, sysClass: SIM.KinematicComponentBuilder.SystemClass) -> None:
        ...
    def DeleteSystemClass(self, sysClasses: SIM.KinematicComponentBuilder.SystemClass) -> None:
        ...
    def GetSystemClasses(self, sysClasses: typing.List[SIM.KinematicComponentBuilder.SystemClass]) -> None:
        ...
    def DeleteAllSystemClasses(self) -> None:
        ...
    def IsOfSystemClass(self, sysClass: SIM.KinematicComponentBuilder.SystemClass) -> bool:
        ...
    def AddUserClassName(self, uclass: str) -> None:
        ...
    def DeleteUserClassName(self, uclass: str) -> None:
        ...
    def GetUserClassNames(self) -> str:
        ...
    def AddChannelName(self, channel: str) -> None:
        ...
    def DeleteChannelName(self, channel: str) -> None:
        ...
    def GetChannelNames(self) -> str:
        ...
    def AddHoldingSystem(self, holdSys: str) -> None:
        ...
    def DeleteHoldingSystem(self, holdSys: str) -> None:
        ...
    def GetHoldingSystems(self) -> str:
        ...
    def RenameUserClass(self, oldName: str, newName: str) -> None:
        ...
    def RenameHoldingSystem(self, oldName: str, newName: str) -> None:
        ...
    def RenameChannelName(self, oldName: str, newName: str) -> None:
        ...
    AdjustRegister: int
    AdjustRegisterType: SIM.KinematicComponentBuilder.RegisterTypes
    CutcomRegister: int
    CutcomRegisterType: SIM.KinematicComponentBuilder.RegisterTypes
    CutterId: str
    DeviceId: str
    HolderId: int
    HolderIdString: str
    JunctionList: SIM.KinematicJunctionBuilderList
    Name: str
    NumberOfTools: int
    WorkPositionAngle: float
    WorkPositionAngleType: SIM.KinematicComponentBuilder.WorkPositionAngleTypes


    class WorkPositionAngleTypes(enum.Enum):
        None = 0
        SpecifyAngle = 1
    

    class SystemClass(enum.Enum):
        Machine = 0
        Tool = 1
        Turret = 2
        Pocket = 3
        Temporary = 4
        Part = 5
        Workpiece = 6
        SetupElement = 7
        Basic = 8
        LatheSpindle = 9
        PocketOnHead = 10
        ToolCutting = 11
        Spinning = 12
        TempSpinning = 13
        Head = 14
        RobotMountableComponent = 15
        RobotPickAndPlaceComponent = 16
        ToolNonCutting = 17
        FacingHead = 18
        AdditiveMaterial = 19
    

    class RegisterTypes(enum.Enum):
        SameAsPocketId = 0
        Specify = 1
    

class KinematicComponent(NXObject):
    def __init__(self) -> None: ...
    def InsertComponent(self, newChild: SIM.KinematicComponent) -> None:
        ...
    def DeleteComponent(self, oldChild: SIM.KinematicComponent) -> None:
        ...
    def InsertJunction(self, junction: SIM.KinematicJunction) -> None:
        ...
    def DeleteCaConfigProperties(self) -> None:
        ...
    def GetJunctions(self, junctions: typing.List[SIM.KinematicJunction]) -> None:
        ...
    def GetAxis(self) -> SIM.KinematicAxis:
        ...


class KinematicChannelConfigurationBuilder(Builder):
    def __init__(self) -> None: ...
    KinematicChannels: SIM.KinematicChannelBuilderList


class KinematicChannelBuilderList(TaggedObject):
    def __init__(self) -> None: ...
    def Append(self, objects: typing.List[SIM.KinematicChannelBuilder]) -> None:
        ...
    def Append(self, object: SIM.KinematicChannelBuilder) -> None:
        ...
    def ClearIndex(self, deleteIdx: int) -> None:
        ...
    def FindIndex(self, obj: SIM.KinematicChannelBuilder) -> int:
        ...
    def FindItem(self, index: int) -> SIM.KinematicChannelBuilder:
        ...
    def Erase(self, index: int) -> None:
        ...
    def Erase(self, index: int, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Erase(self, obj: SIM.KinematicChannelBuilder) -> None:
        ...
    def Erase(self, obj: SIM.KinematicChannelBuilder, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Clear(self) -> None:
        ...
    def Clear(self, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def GetContents(self) -> typing.List[SIM.KinematicChannelBuilder]:
        ...
    def SetContents(self, objects: typing.List[SIM.KinematicChannelBuilder]) -> None:
        ...
    def Swap(self, index1: int, index2: int) -> None:
        ...
    def Swap(self, object1: SIM.KinematicChannelBuilder, object2: SIM.KinematicChannelBuilder) -> None:
        ...
    def Insert(self, location: int, object: SIM.KinematicChannelBuilder) -> None:
        ...
    def MoveToTop(self, index: int) -> None:
        ...
    def MoveToBottom(self, index: int) -> None:
        ...
    Length: int


class KinematicChannelBuilder(TaggedObject):
    def __init__(self) -> None: ...
    def GetAssignedAxes(self, assignedAxes: str) -> None:
        ...
    def SetAssignedAxes(self, assignedAxes: str) -> None:
        ...
    def SetAssignedAxis(self, axisName: str) -> None:
        ...
    def SetUnassignedAxis(self, axisName: str) -> None:
        ...
    def GetReferencedSpindles(self, refSpindles: str) -> None:
        ...
    def SetReferencedSpindles(self, refSpindles: str) -> None:
        ...
    def SetReferencedSpindle(self, spindleName: str) -> None:
        ...
    def SetUnreferencedSpindle(self, spindleName: str) -> None:
        ...
    def Validate(self) -> bool:
        ...
    GeometryAxisX: str
    GeometryAxisY: str
    GeometryAxisZ: str
    MainSpindle: str
    Name: str


class KinematicChainList(TaggedObject):
    def __init__(self) -> None: ...
    def Append(self, objects: typing.List[SIM.KinematicChain]) -> None:
        ...
    def Append(self, object: SIM.KinematicChain) -> None:
        ...
    def ClearIndex(self, deleteIdx: int) -> None:
        ...
    def FindIndex(self, obj: SIM.KinematicChain) -> int:
        ...
    def FindItem(self, index: int) -> SIM.KinematicChain:
        ...
    def Erase(self, index: int) -> None:
        ...
    def Erase(self, index: int, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Erase(self, obj: SIM.KinematicChain) -> None:
        ...
    def Erase(self, obj: SIM.KinematicChain, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Clear(self) -> None:
        ...
    def Clear(self, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def GetContents(self) -> typing.List[SIM.KinematicChain]:
        ...
    def SetContents(self, objects: typing.List[SIM.KinematicChain]) -> None:
        ...
    def Swap(self, index1: int, index2: int) -> None:
        ...
    def Swap(self, object1: SIM.KinematicChain, object2: SIM.KinematicChain) -> None:
        ...
    def Insert(self, location: int, object: SIM.KinematicChain) -> None:
        ...
    def MoveToTop(self, index: int) -> None:
        ...
    def MoveToBottom(self, index: int) -> None:
        ...
    Length: int


class KinematicChainConfiguration(Builder):
    def __init__(self) -> None: ...
    List: SIM.KinematicChainList


class KinematicChain(Builder):
    def __init__(self) -> None: ...
    Axial: str
    CoordinateAxes: str
    CoordinatePlane: SIM.KinematicChain.CoordinatePlaneTypes
    Device: str
    Name: str
    Radial: str
    ReferencePointJunction: str
    Rotary1: str
    Rotary2: str
    Rotary3: str
    Rotary4: str
    Rotary5: str
    Rotary6: str
    Setup: str
    Type: SIM.KinematicChain.Types
    X: str
    Y: str
    Z: str


    class Types(enum.Enum):
        Unknown = -1
        Milling = 0
        Turning = 1
        Polar = 2
        Robot = 3
    

    class CoordinatePlaneTypes(enum.Enum):
        Zx = 0
        Xy = 1
    

class KinematicAxisBuilder(Builder):
    def __init__(self) -> None: ...
    CoarsePrecision: float
    Direction: SIM.KinematicAxisBuilder.AxisDirectionType
    FinePrecision: float
    InitialValue: float
    JerkLimit: float
    JumpVelocity: float
    Junction: SIM.KinematicJunction
    Kv: float
    Limit: bool
    LowerLimit: float
    LowerSoftLimit: float
    MaxAcceleration: float
    MaxDeceleration: float
    MaximumVelocity: float
    Name: str
    Number: int
    Type: SIM.KinematicAxisBuilder.AxisMotionType
    UpperLimit: float
    UpperSoftLimit: float


    class AxisMotionType(enum.Enum):
        LinearNcAxis = 0
        RotaryNcAxis = 1
        Linear = 2
        Rotary = 3
        RotaryUnlimitedNcAxis = 4
        SpindleNcAxis = 5
        RotaryUnlimited = 6
        Spindle = 7
    

    class AxisDirectionType(enum.Enum):
        PositiveX = 0
        NegativeX = 1
        PositiveY = 2
        NegativeY = 3
        PositiveZ = 4
        NegativeZ = 5
    

class KinematicAxis(NXObject):
    def __init__(self) -> None: ...


class IsvControlPanelBuilder(Builder):
    def __init__(self) -> None: ...
    def GetVisualization(self) -> SIM.IsvControlPanelBuilder.VisualizationType:
        ...
    def SetVisualization(self, type: SIM.IsvControlPanelBuilder.VisualizationType) -> None:
        ...
    def GetShow3dMaterialRemoval(self) -> bool:
        """[Obsolete("Deprecated in NX12.0.1.  Use CAM.SimulationOptionsBuilder.EnableMaterialRemoval and CAM.SimulationOptionsBuilder.DisplayIpw instead.")"""
        ...
    def SetShow3dMaterialRemoval(self, state: bool) -> int:
        """[Obsolete("Deprecated in NX12.0.1.  Use CAM.SimulationOptionsBuilder.EnableMaterialRemoval and CAM.SimulationOptionsBuilder.DisplayIpw instead.")"""
        ...
    def GetShowToolPath(self) -> bool:
        ...
    def SetShowToolPath(self, state: bool) -> None:
        ...
    def GetSingleStep(self) -> SIM.IsvControlPanelBuilder.SingleStepType:
        ...
    def SetSingleStep(self, type: SIM.IsvControlPanelBuilder.SingleStepType) -> None:
        ...
    def GetSingleStepMode(self) -> SIM.IsvControlPanelBuilder.SingleStepModeType:
        ...
    def SetSingleStepMode(self, type: SIM.IsvControlPanelBuilder.SingleStepModeType) -> None:
        ...
    def PlayToMachineTime(self, machineTime: str) -> None:
        ...
    def PlayForward(self) -> None:
        ...
    def PlayBackward(self) -> None:
        ...
    def SingleStepForward(self) -> None:
        ...
    def AddIsInHistoryBuffer(self, handler: SIM.IsvControlPanelBuilder.IsInHistoryBufferCb) -> int:
        ...
    def RemoveIsInHistoryBuffer(self, handlerId: int) -> bool:
        ...
    def AddVncStatus(self, handler: SIM.IsvControlPanelBuilder.VncStatusCb) -> int:
        ...
    def RemoveVncStatus(self, handlerId: int) -> bool:
        ...
    def AddSimStop(self, handler: SIM.IsvControlPanelBuilder.SimStopCb) -> int:
        ...
    def RemoveSimStop(self, handlerId: int) -> bool:
        ...
    def AddSimEnd(self, handler: SIM.IsvControlPanelBuilder.SimEndCb) -> int:
        ...
    def RemoveSimEnd(self, handlerId: int) -> bool:
        ...
    def SingleStepBackward(self) -> None:
        ...
    def StepToNextOperation(self) -> None:
        ...
    def StepToPreviousOperation(self) -> None:
        ...
    def SetSpeed(self, simSpeed: int) -> None:
        ...
    def JumpToMachineTime(self, machineTime: str) -> None:
        ...
    def JumpToDetailsLine(self, line: int) -> None:
        ...
    def JumpToNcProgramLine(self, line: int) -> None:
        ...
    def JumpToNcProgramLine(self, channelName: str, line: int) -> None:
        ...
    def SetCurrentProgramLine(self, channelName: str, line: int) -> None:
        ...
    def GetMachiningTimeAnalysisClock(self, channelName: str) -> SIM.TimeAnalysis:
        ...
    def ApplySimulationOptions(self) -> None:
        ...
    def ResetMachine(self) -> None:
        ...
    def GetDetailCount(self, type: SIM.IsvControlPanelBuilder.DetailType) -> int:
        ...
    def GetDetail(self, type: SIM.IsvControlPanelBuilder.DetailType, position: int, time: float, description: str, ncLine: int, programName: str, channelName: str) -> bool:
        ...
    def MachineControlResetNc(self) -> None:
        ...
    def MachineControlResetNc(self, channels: str) -> None:
        ...
    def MachineControlResetPart(self) -> None:
        ...
    def MachineControlResetMachine(self) -> None:
        ...
    def MachineControlClearAlarm(self) -> None:
        ...
    def MachineControlClearAlarm(self, channels: str) -> None:
        ...
    def MachineControlShowHmi(self) -> None:
        ...
    def MachineControlSingleBlockMode(self, enable: bool) -> None:
        ...
    def MachineControlDryRun(self, enable: bool) -> None:
        ...
    def MachineControlFeedRateOverride(self, value: int) -> None:
        ...
    def MachineControlSaveMachineData(self) -> None:
        ...
    def MachineControlResetMachineData(self) -> None:
        ...
    def Stop(self) -> None:
        ...
    def MachineControlGetFeedRateOverrideMaximumValue(self) -> int:
        ...
    def MachineControlGetCycleTime(self) -> int:
        ...
    def MachineControlWriteVariable(self, channelName: str, variableName: str, variableValue: str, variableType: str) -> bool:
        ...
    def MachineControlReadVariable(self, channelName: str, variableName: str, variableValue: str, variableType: str) -> bool:
        ...
    def MachineControlGetChannels(self) -> str:
        ...
    def MachineControlStopNc(self) -> None:
        ...
    def MachineControlStopNc(self, channels: str) -> None:
        ...
    def MachineControlStartNc(self) -> None:
        ...
    def MachineControlStartNc(self, channels: str) -> None:
        ...
    def MachineControlBootVnck(self) -> bool:
        ...
    def MachineControlShutdownVnck(self) -> None:
        ...
    def SaveSettingsToFile(self, filename: str) -> None:
        ...
    def ReadSettingsFromFile(self, filename: str) -> None:
        ...
    def GetPostprocessorFilename(self, definitionFilename: str) -> str:
        ...
    def ShowSnapshot(self, bRunToSimTime: bool, snapshot: SIM.Snapshot) -> None:
        ...
    def GetCurrentProgram(self, channelName: str, stackLevel: int) -> SIM.NcProgram:
        ...
    IsInHistoryBuffer: bool
    MachineConfiguratorFilename: str
    SimDebugBuilder: SIM.SimDebugBuilder
    SimulationLoadSnapshotBuilder: SIM.LoadSnapshotBuilder
    SimulationOptionsBuilder: CAM.SimulationOptionsBuilder
    SimulationSaveSnapshotBuilder: SIM.SaveSnapshotBuilder
    VncStatus: SIM.IsvControlPanelBuilder.VncMode


    

    class VncMode(enum.Enum):
        Error = -1
        Notconnected = 0
        Connected = 1
        Booted = 2
        Configured = 3
        Initialized = 4
        ProgramsLoaded = 5
        Reset = 6
        Stop = 7
        Start = 8
        Run = 9
    

    class VisualizationType(enum.Enum):
        MachineCodeSimulateCse = 0
        MachineCodeSimulateMtd = 1
        ToolPathSimulation = 2
    

    class SingleStepType(enum.Enum):
        Block = 0
        Move = 1
        Event = 2
    

    class SingleStepModeType(enum.Enum):
        StepIn = 0
        StepOver = 1
        StepOut = 2
        DisplayUpdate = 3
    

    

    

    

    class DetailType(enum.Enum):
        Info = 0
        Controller = 1
        Limit = 2
        Collision = 3
        Gouge = 4
        Singularity = 5
    

class ImportMachineKitBuilder(Builder):
    def __init__(self) -> None: ...
    OutputDirectory: str
    PrintReport: bool


class ExportMachineKitBuilder(Builder):
    def __init__(self) -> None: ...
    def GetAllKitPaths(self) -> str:
        ...
    def AddKitFile(self, directory: str, file: str) -> None:
        ...
    def AddKitFolder(self, directory: str, folder: str) -> None:
        ...
    def AddKitDirectory(self, directory: str, subDirectory: str) -> None:
        ...
    def RenameKitDirectory(self, directory: str, newDirectoryName: str) -> None:
        ...
    def RemovePathInKit(self, directory: str) -> None:
        ...
    KitName: str
    OutputDirectory: str
    PrintReport: bool


class Breakpoint(NXObject):
    def __init__(self) -> None: ...
    def Activate(self) -> None:
        ...
    def Deactivate(self) -> None:
        ...
    def Delete(self) -> None:
        ...
    Condition: str


class ArchiveImportBuilder(Builder):
    def __init__(self) -> None: ...
    FileName: str
    ImportCollisionAvoidance: bool


