from ...NXOpen import *
from ..VectorArithmetic import *

import typing
import enum

class Vector3(System.Object):



    def __init__(self) -> None: ...
    def __init__(self, x: float, y: float, z: float) -> None: ...
    def Addition(self, vec1: VectorArithmetic.Vector3, vec2: VectorArithmetic.Vector3) -> VectorArithmetic.Vector3:
        ...
    def Subtraction(self, vec1: VectorArithmetic.Vector3, vec2: VectorArithmetic.Vector3) -> VectorArithmetic.Vector3:
        ...
    def Multiply(self, fMult: float, vec: VectorArithmetic.Vector3) -> VectorArithmetic.Vector3:
        ...
    def Multiply(self, vec: VectorArithmetic.Vector3, fMult: float) -> VectorArithmetic.Vector3:
        ...
    def Division(self, vec: VectorArithmetic.Vector3, fDiv: float) -> VectorArithmetic.Vector3:
        ...
    def UnaryNegation(self, vec: VectorArithmetic.Vector3) -> VectorArithmetic.Vector3:
        ...
    def LengthSqr(self) -> float:
        ...
    def Normalize(self) -> None:
        ...
    def Dot(self, vector: VectorArithmetic.Vector3) -> float:
        ...
    def Cross(self, vector: VectorArithmetic.Vector3) -> VectorArithmetic.Vector3:
        ...


class Quaternion(System.Object):




    def __init__(self) -> None: ...
    def CalcAxisRot(self, x: float, y: float, z: float, angle: float) -> VectorArithmetic.Quaternion:
        ...
    def GetMatrix(self) -> VectorArithmetic.Matrix3:
        ...


class Matrix3(System.Object):

    def __init__(self) -> None: ...
    def __init__(self, m11: float, m12: float, m13: float, m21: float, m22: float, m23: float, m31: float, m32: float, m33: float) -> None: ...
    def Compose(self, vecX: VectorArithmetic.Vector3, vecY: VectorArithmetic.Vector3, vecZ: VectorArithmetic.Vector3) -> VectorArithmetic.Matrix3:
        ...
    def Rotate(self, x: float, y: float, z: float, angle: float) -> None:
        ...
    def MultFront(self, matrix: VectorArithmetic.Matrix3) -> None:
        ...
    def MultRear(self, matrix: VectorArithmetic.Matrix3) -> None:
        ...
    def Multiply(self, op1: VectorArithmetic.Matrix3, op2: VectorArithmetic.Matrix3) -> VectorArithmetic.Matrix3:
        ...
    def Apply(self, vector: VectorArithmetic.Vector3) -> VectorArithmetic.Vector3:
        ...
    def GetColumn(self, nCol: int) -> VectorArithmetic.Vector3:
        ...
    Transpose: VectorArithmetic.Matrix3


