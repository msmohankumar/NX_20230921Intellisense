from .....NXOpen import *
from ....CAE import *
from ...AeroStructures import *
from ..Author import *

import typing
import enum

class OutputText(CAE.AeroStructures.Author.OutputParameter):
    def __init__(self) -> None: ...
    def SetValue(self, textVal: str) -> None:
        ...
    def SetValue(self, fmName: str, textVal: str) -> None:
        ...
    def SetValue(self, fmName: str, lcIndex: int, textVal: str) -> None:
        ...


class OutputScalar(CAE.AeroStructures.Author.OutputParameter):
    def __init__(self) -> None: ...
    def SetValue(self, doubleVal: float) -> None:
        ...
    def SetValue(self, doubleVal: float, unitType: Unit) -> None:
        ...
    def SetValue(self, fmName: str, doubleVal: float) -> None:
        ...
    def SetValue(self, fmName: str, lcIndex: int, doubleVal: float) -> None:
        ...
    def SetValue(self, fmName: str, doubleVal: float, unitType: Unit) -> None:
        ...
    def SetValue(self, fmName: str, lcIndex: int, doubleVal: float, unitType: Unit) -> None:
        ...
    Unit: Unit


class OutputParameter(NXObject):
    def __init__(self) -> None: ...
    Name: str
    Type: CAE.AeroStructures.ParameterDescriptor.ParameterType


class OutputInteger(CAE.AeroStructures.Author.OutputParameter):
    def __init__(self) -> None: ...
    def SetValue(self, intVal: int) -> None:
        ...
    def SetValue(self, fmName: str, intVal: int) -> None:
        ...
    def SetValue(self, fmName: str, lcIndex: int, intVal: int) -> None:
        ...


class OutputBoolean(CAE.AeroStructures.Author.OutputParameter):
    def __init__(self) -> None: ...
    def SetValue(self, boolVal: bool) -> None:
        ...
    def SetValue(self, fmName: str, boolVal: bool) -> None:
        ...
    def SetValue(self, fmName: str, lcIndex: int, boolVal: bool) -> None:
        ...


class MethodLibrary(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def GetMethodLibrary(self, owner: Session) -> CAE.AeroStructures.Author.MethodLibrary:
        ...
    def RegisterEvaluate(self, methodID: str, version: int, cb: CAE.AeroStructures.Author.MethodLibrary.Callback) -> None:
        ...
    def RegisterValidate(self, methodID: str, version: int, cb: CAE.AeroStructures.Author.MethodLibrary.Callback) -> None:
        ...
    def Tag(self) -> Tag: ...



    

class InputText(CAE.AeroStructures.Author.InputParameter):
    def __init__(self) -> None: ...
    Value: str


class InputScalar(CAE.AeroStructures.Author.InputParameter):
    def __init__(self) -> None: ...
    def GetValueIn(self, unitType: Unit) -> float:
        ...
    Unit: Unit
    Value: float


class InputParameter(NXObject):
    def __init__(self) -> None: ...
    Name: str
    Type: CAE.AeroStructures.ParameterDescriptor.ParameterType


class InputLoad(CAE.AeroStructures.Author.InputParameter):
    def __init__(self) -> None: ...
    def GetNodes(self, nodeArray: typing.List[CAE.FENode]) -> None:
        ...
    def GetElements(self, elementArray: typing.List[CAE.FEElement]) -> None:
        ...
    def GetValues(self, unitType: Unit) -> GeneralScalarTable:
        ...
    Quantity: CAE.Result.Quantity
    SupportType: CAE.AeroStructures.Author.InputLoad.LoadSupportType
    Unit: Unit
    Values: GeneralScalarTable


    class LoadSupportType(enum.Enum):
        None = 0
        Node = 1
        Element = 2
    

class InputInteger(CAE.AeroStructures.Author.InputParameter):
    def __init__(self) -> None: ...
    Value: int


class InputBoolean(CAE.AeroStructures.Author.InputParameter):
    def __init__(self) -> None: ...
    Value: bool


class CalculationContext(NXObject):
    def __init__(self) -> None: ...
    def GetLoadCaseArray(self, lcarray: typing.List[CAE.AeroStructures.LoadCase]) -> None:
        ...
    def GetInput(self, inputName: str) -> CAE.AeroStructures.Author.InputParameter:
        ...
    def GetOutputMs(self) -> CAE.AeroStructures.Author.OutputScalar:
        ...
    def GetOutput(self, outputName: str) -> CAE.AeroStructures.Author.OutputParameter:
        ...
    def GetUnit(self, unitName: str) -> Unit:
        ...
    def Log(self, message: str) -> None:
        ...
    def Log(self, failureMode: str, lcIndex: int, message: str) -> None:
        ...
    def Log(self, failureMode: str, loadCase: str, message: str) -> None:
        ...
    def Warn(self, message: str) -> None:
        ...
    def Warn(self, failureMode: str, lcIndex: int, message: str) -> None:
        ...
    def Warn(self, failureMode: str, loadCase: str, message: str) -> None:
        ...
    def Error(self, message: str) -> None:
        ...
    def Error(self, failureMode: str, lcIndex: int, message: str) -> None:
        ...
    def Error(self, failureMode: str, loadCase: str, message: str) -> None:
        ...
    def GetAbbContext(self) -> CAE.AeroStructures.Author.AbbContext:
        ...
    Name: str


class AbbContext(NXObject):
    def __init__(self) -> None: ...
    def Log(self, message: str) -> None:
        ...
    def Log(self, failureMode: str, lcIndex: int, message: str) -> None:
        ...
    def Log(self, failureMode: str, loadCase: str, message: str) -> None:
        ...
    def Warn(self, message: str) -> None:
        ...
    def Warn(self, failureMode: str, lcIndex: int, message: str) -> None:
        ...
    def Warn(self, failureMode: str, loadCase: str, message: str) -> None:
        ...
    def Error(self, message: str) -> None:
        ...
    def Error(self, failureMode: str, lcIndex: int, message: str) -> None:
        ...
    def Error(self, failureMode: str, loadCase: str, message: str) -> None:
        ...


class ABB(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def GetABB(self, owner: Session) -> CAE.AeroStructures.Author.ABB:
        ...
    def GetUltimateLimitFactor(self) -> float:
        ...
    def GetIntegerNa(self) -> float:
        ...
    def GetPi(self) -> float:
        ...
    def GetRealMax(self) -> float:
        ...
    def GetRealEpsilon(self) -> float:
        ...
    def GetRealNa(self) -> float:
        ...
    def IsRealNa(self, value: float) -> bool:
        ...
    def GetRealPositiveInfinity(self) -> float:
        ...
    def IsRealPositiveInfinity(self, value: float) -> bool:
        ...
    def GetRealNegativeInfinity(self) -> float:
        ...
    def IsRealNegativeInfinity(self, value: float) -> bool:
        ...
    def GetMsThreshold(self) -> float:
        ...
    def CurvedMetallicPanelCompressiveBucklingCoefficient(self, abbContext: CAE.AeroStructures.Author.AbbContext, b: float, t: float, r: float, nu: float, kc: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def CurvedMetallicPanelShearBucklingCoefficient(self, abbContext: CAE.AeroStructures.Author.AbbContext, a: float, b: float, t: float, r: float, nu: float, bc: CAE.AeroStructures.Author.ABB.EdgeSupportType, ks: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def EquivalentSectionProperties(self, abbContext: CAE.AeroStructures.Author.AbbContext, n: float, iAi: float, iEi: float, iIxxi: float, a: float, e: float, oYcog: float, oIxx: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def ExtrudedMetallicSubSectionCripplingAllowable(self, abbContext: CAE.AeroStructures.Author.AbbContext, iFcy: float, e: float, fe: int, b: float, t: float, iFcc: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def FlatMetallicPanelBendingBucklingCoefficient(self, abbContext: CAE.AeroStructures.Author.AbbContext, aOverB: float, beta: float, kb: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def FlatMetallicPanelCompressiveBucklingCoefficient(self, abbContext: CAE.AeroStructures.Author.AbbContext, a: float, b: float, bcUnloaded: CAE.AeroStructures.Author.ABB.UnloadedEdgeSupportType, bcLoaded: CAE.AeroStructures.Author.ABB.EdgeSupportType, kc: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def FlatMetallicPanelShearBucklingCoefficient(self, abbContext: CAE.AeroStructures.Author.AbbContext, a: float, b: float, bc: CAE.AeroStructures.Author.ABB.EdgeSupportType, ks: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def LoadDistributionBoltsConcentricLoads(self, abbContext: CAE.AeroStructures.Author.AbbContext, p: float, iPsn: float, nblcXnbbolt: int, oPn: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MaterialFsyEstimation(self, abbContext: CAE.AeroStructures.Author.AbbContext, iFtyL: float, iFtyLT: float, iFcyL: float, iFcyLT: float, iFsu: float, iFtuL: float, iFtuLT: float, oFsy: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MetallicPanelCompressivePlasticityCurveBc1(self, abbContext: CAE.AeroStructures.Author.AbbContext, x: float, n: float, z: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MetallicPanelCompressivePlasticityCurveBc2(self, abbContext: CAE.AeroStructures.Author.AbbContext, x: float, n: float, z: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MetallicPanelCompressivePlasticityCurveBc3(self, abbContext: CAE.AeroStructures.Author.AbbContext, x: float, n: float, z: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def SecantModulus(self, abbContext: CAE.AeroStructures.Author.AbbContext, e: float, n: float, fy: float, sigma: float, iEs: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def StressFromStrainInPlasticDomain(self, abbContext: CAE.AeroStructures.Author.AbbContext, strain: float, e: float, iF02ys: float, n: float, sigma: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def StressF07(self, abbContext: CAE.AeroStructures.Author.AbbContext, iFy: float, e: float, n: float, f07: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def TangentModulus(self, abbContext: CAE.AeroStructures.Author.AbbContext, e: float, n: float, iFy: float, sigma: float, oEt: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsAllowable(self, abbContext: CAE.AeroStructures.Author.AbbContext, allowable: float, value: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsBearing(self, abbContext: CAE.AeroStructures.Author.AbbContext, d: float, t: float, iFbr: float, f: float, p: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsBoltBending(self, abbContext: CAE.AeroStructures.Author.AbbContext, b: float, iMba: float, f: float, p: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsBoltCombinedShearTension(self, abbContext: CAE.AeroStructures.Author.AbbContext, iPtx: float, iPss: float, iPx: float, f: float, p: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsBoltCombinedShearTensionBending(self, abbContext: CAE.AeroStructures.Author.AbbContext, b: float, iMba: float, iPtx: float, iPss: float, fb: float, iPb: float, iPx: float, fs: float, iPs: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsBoltShear(self, abbContext: CAE.AeroStructures.Author.AbbContext, iPss: float, f: float, p: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsNetSection(self, abbContext: CAE.AeroStructures.Author.AbbContext, d: float, b: float, t: float, iFx: float, f: float, p: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsShearTearOut(self, abbContext: CAE.AeroStructures.Author.AbbContext, d: float, b: float, t: float, iFs: float, f: float, p: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsTrescaPlaneStress(self, abbContext: CAE.AeroStructures.Author.AbbContext, iSTresca: float, iFx: float, iFy: float, iFxy: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsPlateBuckling(self, abbContext: CAE.AeroStructures.Author.AbbContext, b: float, t: float, e: float, nu: float, eta: float, k: float, sigma: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsPlateBucklingCurvedCompressive(self, abbContext: CAE.AeroStructures.Author.AbbContext, b: float, a: float, t: float, r: float, behaviour: CAE.AeroStructures.Author.ABB.MaterialBehaviour, e: float, nu: float, n: float, iFy: float, sigma: float, ms: float, sigmaAllowable: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsPlateBucklingCurvedShear(self, abbContext: CAE.AeroStructures.Author.AbbContext, b: float, a: float, bc: CAE.AeroStructures.Author.ABB.EdgeSupportType, t: float, r: float, behaviour: CAE.AeroStructures.Author.ABB.MaterialBehaviour, e: float, nu: float, n: float, iFy: float, sigma: float, ms: float, sigmaAllowable: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsPlateBucklingCurvedLongitudinalShearCombined(self, abbContext: CAE.AeroStructures.Author.AbbContext, b: float, a: float, bc: CAE.AeroStructures.Author.ABB.EdgeSupportType, t: float, r: float, behaviour: CAE.AeroStructures.Author.ABB.MaterialBehaviour, e: float, nu: float, n: float, iFy: float, sigma: float, tau: float, ms: float, sigmacr: float, taucr: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsPlateBucklingFlatBending(self, abbContext: CAE.AeroStructures.Author.AbbContext, b: float, a: float, t: float, behaviour: CAE.AeroStructures.Author.ABB.MaterialBehaviour, e: float, nu: float, n: float, iFy: float, beta: float, sigma1: float, sigma2: float, ms: float, sigmaAllowable: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsPlateBucklingFlatCompressive(self, abbContext: CAE.AeroStructures.Author.AbbContext, b: float, bcLoaded: CAE.AeroStructures.Author.ABB.EdgeSupportType, a: float, bcUnloaded: CAE.AeroStructures.Author.ABB.UnloadedEdgeSupportType, t: float, behaviour: CAE.AeroStructures.Author.ABB.MaterialBehaviour, e: float, nu: float, n: float, iFy: float, sigma: float, ms: float, sigmaAllowable: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsPlateBucklingFlatShear(self, abbContext: CAE.AeroStructures.Author.AbbContext, b: float, a: float, bc: CAE.AeroStructures.Author.ABB.EdgeSupportType, t: float, behaviour: CAE.AeroStructures.Author.ABB.MaterialBehaviour, e: float, nu: float, n: float, iFy: float, sigma: float, ms: float, sigmaAllowable: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsPlateBucklingFlatLongitudinalBendingCombined(self, abbContext: CAE.AeroStructures.Author.AbbContext, b: float, bcLoaded: CAE.AeroStructures.Author.ABB.EdgeSupportType, a: float, bcUnloaded: CAE.AeroStructures.Author.ABB.UnloadedEdgeSupportType, t: float, behaviour: CAE.AeroStructures.Author.ABB.MaterialBehaviour, e: float, nu: float, n: float, iFy: float, sigma1: float, sigma2: float, ms: float, sigmacr: float, sigmabcr: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsPlateBucklingFlatLongitudinalShearCombined(self, abbContext: CAE.AeroStructures.Author.AbbContext, b: float, bcLoaded: CAE.AeroStructures.Author.ABB.EdgeSupportType, a: float, bcUnloaded: CAE.AeroStructures.Author.ABB.UnloadedEdgeSupportType, t: float, behaviour: CAE.AeroStructures.Author.ABB.MaterialBehaviour, e: float, nu: float, n: float, iFy: float, sigma: float, tau: float, ms: float, sigmacr: float, taucr: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsPlateBucklingFlatShearBendingCombined(self, abbContext: CAE.AeroStructures.Author.AbbContext, b: float, bcLoaded: CAE.AeroStructures.Author.ABB.EdgeSupportType, a: float, bcUnloaded: CAE.AeroStructures.Author.ABB.UnloadedEdgeSupportType, t: float, behaviour: CAE.AeroStructures.Author.ABB.MaterialBehaviour, e: float, nu: float, n: float, iFy: float, sigma1: float, sigma2: float, tau: float, ms: float, sigmabcr: float, taucr: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsColumnEccentricLoadSecantFormula(self, abbContext: CAE.AeroStructures.Author.AbbContext, a: float, l: float, e: float, i: float, sigmacr: float, c: float, ecc: float, extrmfbrdist: float, sigma: float, iPcr: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsColumnEngesser(self, abbContext: CAE.AeroStructures.Author.AbbContext, a: float, l: float, e: float, i: float, n: float, iFy: float, c: float, sigma: float, sigmacr: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsColumnEuler(self, abbContext: CAE.AeroStructures.Author.AbbContext, a: float, l: float, e: float, i: float, c: float, sigma: float, sigmacr: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsColumnJohnsonEuler(self, abbContext: CAE.AeroStructures.Author.AbbContext, a: float, l: float, i: float, e: float, c: float, sigma0: float, sigma: float, sigmacr: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsColumnTorsionalbuckling(self, abbContext: CAE.AeroStructures.Author.AbbContext, l: float, e: float, g: float, j: float, gamma: float, r0: float, c: float, load: float, iPcr: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsInterrivetbucklingColumn(self, abbContext: CAE.AeroStructures.Author.AbbContext, t: float, p: float, behaviour: CAE.AeroStructures.Author.ABB.MaterialBehaviour, e: float, iFy: float, n: float, c: float, sigma: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def MsInterrivetbucklingWidecolumn(self, abbContext: CAE.AeroStructures.Author.AbbContext, t: float, p: float, behaviour: CAE.AeroStructures.Author.ABB.MaterialBehaviour, e: float, nu: float, n: float, iFy: float, c: float, sigma: float, ms: float) -> CAE.AeroStructures.Author.ABB.Status:
        ...
    def Tag(self) -> Tag: ...



    class UnloadedEdgeSupportType(enum.Enum):
        ClampedClamped = 0
        SimplySupportedClamped = 1
        SimplySupportedSimplySupported = 2
        FreeClamped = 3
        FreeSimplySupported = 4
    

    class Status(enum.Enum):
        Success = 0
        Failed = 1
    

    class MaterialBehaviour(enum.Enum):
        Elastic = 0
        ElasticPlastic = 1
    

    class EdgeSupportType(enum.Enum):
        SimplySupported = 0
        Clamped = 1
    

