from . import Author
from ....NXOpen import *
from ...CAE import *
from ..AeroStructures import *

import typing
import enum

class UserLoadExtraction(CAE.AeroStructures.LoadExtractionStrategy):
    def __init__(self) -> None: ...
    def GetTargetEntity(self) -> CAE.AeroStructures.UserLoadExtraction.TargetEntity:
        ...
    def SetTargetEntity(self, target: CAE.AeroStructures.UserLoadExtraction.TargetEntity) -> None:
        ...
    def GetPickMethod(self) -> CAE.AeroStructures.UserLoadExtraction.PickMethod:
        ...
    def SetPickMethod(self, pickMethod: CAE.AeroStructures.UserLoadExtraction.PickMethod) -> None:
        ...
    def GetExternalGroup(self) -> CAE.CaeGroup:
        ...
    def SetExternalGroup(self, group: CAE.CaeGroup) -> None:
        ...
    def GetSelectedEntities(self) -> typing.List[TaggedObject]:
        ...
    def SetSelectedEntities(self, entities: typing.List[TaggedObject]) -> None:
        ...
    def GetResultParameters(self) -> CAE.ResultParameters:
        ...
    def SetResultParameters(self, parameters: CAE.ResultParameters) -> None:
        ...
    def GetMatrixManip(self) -> CAE.AeroStructures.MatrixManip:
        ...
    def SetMatrixManip(self, manip: CAE.AeroStructures.MatrixManip) -> None:
        ...
    def GetCoordinateSystem(self) -> CoordinateSystem:
        ...
    def SetCoordinateSystem(self, csys: CoordinateSystem) -> None:
        ...


    class TargetEntity(enum.Enum):
        EntireModel = 0
        Nodes = 1
        Elements = 2
        Points = 3
        Edges = 4
        Faces = 5
        Bodies = 6
        None = 7
    

    class PickMethod(enum.Enum):
        Model = 0
        Group = 1
    

class PropTable(CAE.PropertyTable):
    def __init__(self) -> None: ...
    def GetMarginPropertyType(self, propertyName: str) -> CAE.AeroStructures.PropTable.MarginPropertyType:
        ...
    def SetLoadExtractionPropertyValue(self, propertyName: str, propertyValue: CAE.AeroStructures.LoadExtractionValue) -> None:
        ...
    def GetLoadExtractionPropertyValue(self, propertyName: str) -> CAE.AeroStructures.LoadExtractionValue:
        ...


    class MarginPropertyType(enum.Enum):
        Unknown = 0
        String = 1
        Boolean = 2
        Integer = 3
        Double = 4
        FieldWrapper = 5
        ScalarFieldWrapper = 6
        CoordinateSystem = 7
        DoubleArray = 8
        IntegerArray = 9
        PhysicalMaterial = 10
        Matrix = 11
        ScalarTable = 12
        Text = -1
        FieldExpression = -2
        VectorFieldWrapper = -3
        Vector = -4
        Reference = -5
        Point = -6
        DateTime = -7
        NamedPropertyTableArray = -8
        SetManager = -9
        NamedPropertyTable = -10
        Axis = -11
        CaeSection = -12
        SectionOrientation = -13
        SectionOffset = -14
        ReferenceArray = -15
        StringArray = -16
        Loadextraction = -17
    

class ParameterDescriptor(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    Dimensionality: CAE.AeroStructures.ParameterDescriptor.DimensionalityType
    Id: str
    ParamType: CAE.AeroStructures.ParameterDescriptor.ParameterType
    UiName: str


    class ParameterType(enum.Enum):
        Boolean = 0
        Integer = 1
        Scalar = 2
        Text = 3
        Load = 4
        Unknown = 5
    

    class DimensionalityType(enum.Enum):
        None = 0
        Failuremode = 1
        Loadcase = 2
        FmLc = 3
    

class MethodDescriptor(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def GetNumFailureModes(self) -> int:
        ...
    def HasFailureMode(self, id: str) -> bool:
        ...
    def GetFailureModeArray(self, fmArray: typing.List[CAE.AeroStructures.FailureMode]) -> None:
        ...
    def GetNumInputs(self) -> int:
        ...
    def HasInput(self, id: str) -> bool:
        ...
    def GetInput(self, id: str) -> CAE.AeroStructures.ParameterDescriptor:
        ...
    def GetInputArray(self, inputArray: typing.List[CAE.AeroStructures.ParameterDescriptor]) -> None:
        ...
    def GetNumOutputs(self) -> int:
        ...
    def HasOutput(self, id: str) -> bool:
        ...
    def GetOutput(self, id: str) -> CAE.AeroStructures.ParameterDescriptor:
        ...
    def GetOutputArray(self, outputArray: typing.List[CAE.AeroStructures.ParameterDescriptor]) -> None:
        ...
    Author: str
    Category: str
    Description: str
    Id: str
    UiName: str
    Version: int


class MatrixManip(NXObject):
    def __init__(self) -> None: ...
    def GetMapOperation(self) -> CAE.AeroStructures.MatrixManip.MapOperations:
        ...
    def SetMapOperation(self, mapOp: CAE.AeroStructures.MatrixManip.MapOperations) -> None:
        ...
    def GetFilterOperation(self) -> CAE.AeroStructures.MatrixManip.FilterOperations:
        ...
    def SetFilterOperation(self, filterOp: CAE.AeroStructures.MatrixManip.FilterOperations) -> None:
        ...
    def GetReduceOperation(self) -> CAE.AeroStructures.MatrixManip.ReduceOperations:
        ...
    def SetReduceOperation(self, reduceOp: CAE.AeroStructures.MatrixManip.ReduceOperations) -> None:
        ...
    def GetFactor(self) -> float:
        ...
    def SetFactor(self, factor: float) -> None:
        ...
    def GetFilterLowerBound(self) -> float:
        ...
    def SetFilterLowerBound(self, lowerBound: float) -> None:
        ...
    def GetFilterUpperBound(self) -> float:
        ...
    def SetFilterUpperBound(self, upperBound: float) -> None:
        ...
    def GetFactorExpression(self) -> Expression:
        ...
    def SetFactorExpression(self, exp: Expression) -> None:
        ...
    def GetFilterLowerBoundExpression(self) -> Expression:
        ...
    def SetFilterLowerBoundExpression(self, exp: Expression) -> None:
        ...
    def GetFilterUpperBoundExpression(self) -> Expression:
        ...
    def SetFilterUpperBoundExpression(self, exp: Expression) -> None:
        ...
    def GetStartMeasure(self) -> str:
        ...
    def SetStartMeasure(self, measure: str) -> None:
        ...
    def GetEndMeasure(self) -> str:
        ...
    def SetEndMeasure(self, measure: str) -> None:
        ...


    class ReduceOperations(enum.Enum):
        Max = 0
        Min = 1
        Average = 2
        Sum = 3
        None = 4
    

    class MapOperations(enum.Enum):
        Absolute = 0
        None = 1
    

    class FilterOperations(enum.Enum):
        Positive = 0
        Negative = 1
        Range = 2
        None = 3
    

class MarginSolutionLoadCaseCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[CAE.AeroStructures.LoadCase]:
        ...
    def __init__(self, owner: CAE.AeroStructures.MarginSolution) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.LoadCase:
        ...
    def CreateLoadCaseListBuilder(self) -> CAE.AeroStructures.LoadCaseListBuilder:
        ...
    def DeleteLoadCase(self, loadcase: CAE.AeroStructures.LoadCase) -> None:
        ...
    def Tag(self) -> Tag: ...



class MarginSolutionCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[CAE.AeroStructures.MarginSolution]:
        ...
    def __init__(self, owner: CAE.AeroStructManager) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.MarginSolution:
        ...
    def CreateMarginSolutionBuilder(self, metasolution: CAE.AeroStructures.MarginSolution) -> CAE.AeroStructures.MarginSolutionBuilder:
        ...
    def DeleteMarginSolution(self, metasolution: CAE.AeroStructures.MarginSolution) -> None:
        ...
    def CloneMarginSolution(self, source: CAE.AeroStructures.MarginSolution) -> CAE.AeroStructures.MarginSolution:
        ...
    def SetActiveMarginsolution(self, source: CAE.AeroStructures.MarginSolution) -> None:
        ...
    def GetActiveMarginsolution(self) -> CAE.AeroStructures.MarginSolution:
        ...
    def Tag(self) -> Tag: ...



class MarginSolutionBuilder(Builder):
    def __init__(self) -> None: ...
    Description: str
    Name: str
    ReferenceSolution: CAE.SimSolution


class MarginSolution(NXObject):
    def __init__(self) -> None: ...
    def Rename(self, name: str) -> None:
        ...
    def CreateMarginResultTableDataProvider(self) -> CAE.AeroStructures.MarginResultTableDataProvider:
        ...
    def CreateMarginResultTableDataProvider(self, marginCalculations: typing.List[CAE.AeroStructures.MarginCalculation]) -> CAE.AeroStructures.MarginResultTableDataProvider:
        ...
    def CreateMarginResultTableDataProvider(self, maxRank: int, maxMS: float) -> CAE.AeroStructures.MarginResultTableDataProvider:
        ...
    def CreateMarginResultTableDataProvider(self, marginCalculations: typing.List[CAE.AeroStructures.MarginCalculation], maxRank: int, maxMS: float) -> CAE.AeroStructures.MarginResultTableDataProvider:
        ...
    def CreateMarginResultTableRowFilter(self) -> CAE.AeroStructures.MarginResultTableRowFilter:
        ...
    def CreateMarginResultTableRowFilter(self, isDisjunction: bool, isNegated: bool) -> CAE.AeroStructures.MarginResultTableRowFilter:
        ...
    def CreateMarginResultQuery(self, filter: CAE.AeroStructures.MarginResultTableRowFilter) -> CAE.AeroStructures.MarginResultQuery:
        ...
    def CreateMarginResultQuery(self, marginCalculations: typing.List[CAE.AeroStructures.MarginCalculation], filter: CAE.AeroStructures.MarginResultTableRowFilter) -> CAE.AeroStructures.MarginResultQuery:
        ...
    def CreateMarginResultQuery(self, maxRank: int, maxMS: float, filter: CAE.AeroStructures.MarginResultTableRowFilter) -> CAE.AeroStructures.MarginResultQuery:
        ...
    def CreateMarginResultQuery(self, marginCalculations: typing.List[CAE.AeroStructures.MarginCalculation], maxRank: int, maxMS: float, filter: CAE.AeroStructures.MarginResultTableRowFilter) -> CAE.AeroStructures.MarginResultQuery:
        ...
    def Solve(self, marginCalculations: typing.List[CAE.AeroStructures.MarginCalculation]) -> None:
        ...
    def SolveAll(self) -> None:
        ...
    def CreateReport(self, templateFile: str, reportName: str, listError: bool) -> Report.Report:
        ...
    def GetReports(self, pReports: typing.List[Report.Report]) -> None:
        ...
    LoadCaseSetCollection: CAE.AeroStructures.LoadCaseSetCollection
    LoadCaseCollection: CAE.AeroStructures.MarginSolutionLoadCaseCollection
    MarginCalculationCollection: CAE.AeroStructures.MarginCalculationCollection
    Description: str
    ReferenceSolution: CAE.SimSolution


class MarginResultTableRowFilter(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def AddCondition(self, columnType: CAE.AeroStructures.MarginResultTableDataProvider.ColumnType, op: CAE.AeroStructures.MarginResultTableRowFilter.NumericComparisonOperator, value: int) -> None:
        ...
    def AddCondition(self, columnType: CAE.AeroStructures.MarginResultTableDataProvider.ColumnType, op: CAE.AeroStructures.MarginResultTableRowFilter.NumericComparisonOperator, value: float) -> None:
        ...
    def AddCondition(self, columnType: CAE.AeroStructures.MarginResultTableDataProvider.ColumnType, op: CAE.AeroStructures.MarginResultTableRowFilter.StringComparisonOperator, value: str) -> None:
        ...
    def AddCiCondition(self, columnType: CAE.AeroStructures.MarginResultTableDataProvider.ColumnType, op: CAE.AeroStructures.MarginResultTableRowFilter.StringComparisonOperator, value: str) -> None:
        ...
    def AddCondition(self, otherFilter: CAE.AeroStructures.MarginResultTableRowFilter) -> None:
        ...
    def AndWith(self, otherFilter: CAE.AeroStructures.MarginResultTableRowFilter) -> None:
        ...
    def OrWith(self, otherFilter: CAE.AeroStructures.MarginResultTableRowFilter) -> None:
        ...


    class StringComparisonOperator(enum.Enum):
        Equal = 0
        NotEqual = 1
        LessThan = 2
        LessOrEqual = 3
        GreaterThan = 4
        GreaterOrEqual = 5
        StartsWith = 6
        EndsWith = 7
        Contains = 8
    

    class NumericComparisonOperator(enum.Enum):
        Equal = 0
        NotEqual = 1
        LessThan = 2
        LessOrEqual = 3
        GreaterThan = 4
        GreaterOrEqual = 5
    

class MarginResultTableRow(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def GetInputIntegerValue(self, parameterName: str) -> int:
        ...
    def GetInputScalarValue(self, parameterName: str) -> float:
        ...
    def GetInputScalarUnit(self, parameterName: str) -> Unit:
        ...
    def GetInputLoad(self, parameterName: str) -> float:
        ...
    def GetInputStringValue(self, parameterName: str) -> str:
        ...
    def GetInputBooleanValue(self, parameterName: str) -> bool:
        ...
    def GetOutputIntegerValue(self, parameterName: str) -> int:
        ...
    def GetOutputScalarValue(self, parameterName: str) -> float:
        ...
    def GetOutputScalarUnit(self, parameterName: str) -> Unit:
        ...
    def GetOutputStringValue(self, parameterName: str) -> str:
        ...
    def GetOutputBooleanValue(self, parameterName: str) -> bool:
        ...
    Calculation: CAE.AeroStructures.MarginCalculation
    CalculationName: str
    FailureModeName: str
    FemSolutionName: str
    GlobalRank: int
    LoadCaseName: str
    MarginOfSafety: float
    MethodName: str
    RankByCalculation: int
    RankByFailureMode: int
    RankByLoadCase: int


class MarginResultTableDataProvider(NXObject):
    def __init__(self) -> None: ...
    def RegisterColumn(self, columnIdx: int, columnType: CAE.AeroStructures.MarginResultTableDataProvider.ColumnType) -> None:
        ...
    def RegisterAllColumns(self) -> None:
        ...
    def CreateQuery(self) -> CAE.AeroStructures.MarginResultQuery:
        ...


    class ColumnType(enum.Enum):
        Calculation = 0
        FailureMode = 1
        LoadCase = 2
        MarginOfSafety = 3
        GlobalRank = 4
        RankByCalculation = 5
        RankByFailureMode = 6
        RankByLoadCase = 7
        Method = 8
        FemSolution = 9
        Sentinel = 10
    

class MarginResultQuery(NXObject):
    def __init__(self) -> None: ...
    def CreateIterator(self) -> CAE.AeroStructures.MarginResultIterator:
        ...
    def GetMaximumRowCount(self) -> int:
        ...
    def GetRowCount(self) -> int:
        ...


class MarginResultIterator(NXObject):
    def __init__(self) -> None: ...
    def Next(self) -> bool:
        ...
    def GetCurrentRow(self) -> CAE.AeroStructures.MarginResultTableRow:
        ...


class MarginCalculationCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[CAE.AeroStructures.MarginCalculation]:
        ...
    def __init__(self, owner: CAE.AeroStructures.MarginSolution) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.MarginCalculation:
        ...
    def CreateMarginCalculationBuilder(self, margincalculation: CAE.AeroStructures.MarginCalculation) -> CAE.AeroStructures.MarginCalculationBuilder:
        ...
    def DeleteCalculation(self, margincalculation: CAE.AeroStructures.MarginCalculation) -> None:
        ...
    def CloneCalculation(self, name: str, sourcemargincalculation: CAE.AeroStructures.MarginCalculation) -> CAE.AeroStructures.MarginCalculation:
        ...
    def Tag(self) -> Tag: ...



class MarginCalculationBuilder(Builder):
    def __init__(self) -> None: ...
    def CreatePropertyTable(self) -> CAE.AeroStructures.PropTable:
        ...
    Annotation: Annotations.NoteBase
    Description: str
    LoadCaseSet: CAE.AeroStructures.LoadCaseSet
    LocationCoordinateSystem: CoordinateSystem
    LocationPoint: Point
    MethodKey: str
    Name: str
    PropertyTable: CAE.AeroStructures.PropTable
    Status: CAE.AeroStructures.MarginCalculationBuilder.CalculationStatus


    class CalculationStatus(enum.Enum):
        NotRun = 0
        Error = 1
        Success = 2
    

class MarginCalculation(NXObject):
    def __init__(self) -> None: ...
    def GetLog(self, logsEntries: typing.List[CAE.AeroStructures.CalculationLogLine]) -> None:
        ...
    def GetInputNames(self, inputNames: str) -> None:
        ...
    def GetOutputNames(self, outputNames: str) -> None:
        ...
    def GetParameterType(self, parameterName: str) -> CAE.AeroStructures.ParameterDescriptor.ParameterType:
        ...
    def GetInputComment(self, inputName: str) -> str:
        ...
    def GetInputIntegerValue(self, parameterName: str) -> int:
        ...
    def GetInputScalarValue(self, parameterName: str) -> float:
        ...
    def GetInputScalarUnit(self, parameterName: str) -> Unit:
        ...
    def GetInputLoadValues(self, parameterName: str, loadCaseName: str) -> float:
        ...
    def GetInputLoadUnit(self, parameterName: str) -> Unit:
        ...
    def GetInputStringValue(self, parameterName: str) -> str:
        ...
    def GetInputBooleanValue(self, parameterName: str) -> bool:
        ...
    def GetHasResult(self) -> bool:
        ...
    def GetResultInputNames(self, inputNames: str) -> None:
        ...
    def GetResultInputComment(self, inputName: str) -> str:
        ...
    def GetResultParameterType(self, parameterName: str) -> CAE.AeroStructures.ParameterDescriptor.ParameterType:
        ...
    def GetResultInputIntegerValue(self, parameterName: str) -> int:
        ...
    def GetResultInputScalarValue(self, parameterName: str) -> float:
        ...
    def GetResultInputScalarUnit(self, parameterName: str) -> Unit:
        ...
    def GetResultInputLoadValues(self, parameterName: str, loadCaseName: str) -> float:
        ...
    def GetResultInputLoadUnit(self, parameterName: str) -> Unit:
        ...
    def GetResultInputStringValue(self, parameterName: str) -> str:
        ...
    def GetResultInputBooleanValue(self, parameterName: str) -> bool:
        ...
    def GetResultOutputNames(self, outputNames: str) -> None:
        ...
    def GetResultOutputUnit(self, outputName: str) -> Unit:
        ...
    def GetResultOutputIntegerValue(self, parameterName: str, failureModeName: str, loadCaseName: str) -> int:
        ...
    def GetResultOutputScalarValue(self, parameterName: str, failureModeName: str, loadCaseName: str) -> float:
        ...
    def GetResultOutputScalarUnit(self, parameterName: str) -> Unit:
        ...
    def GetResultOutputStringValue(self, parameterName: str, failureModeName: str, loadCaseName: str) -> str:
        ...
    def GetResultOutputBooleanValue(self, parameterName: str, failureModeName: str, loadCaseName: str) -> bool:
        ...
    def GetResultMsValue(self, failureModeName: str, loadCaseName: str) -> float:
        ...
    def GetResultLoadCaseNames(self, loadCaseNames: str) -> None:
        ...
    def GetResultFailModeNames(self, failModeIds: str) -> None:
        ...
    Annotation: Annotations.NoteBase
    Description: str
    LoadCaseSet: CAE.AeroStructures.LoadCaseSet
    MethodDescriptor: CAE.AeroStructures.MethodDescriptor
    PropertyTable: CAE.AeroStructures.PropTable
    Status: CAE.AeroStructures.MarginCalculationBuilder.CalculationStatus


class MarginAnnotCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Annotations.BaseNote]:
        ...
    def __init__(self, owner: CAE.CaePart) -> None: ...
    def __init__(self) -> None: ...
    def CreateMarginAnnotBuilder(self, annotation: Annotations.SimpleDraftingAid) -> CAE.AeroStructures.MarginAnnotBuilder:
        ...
    def CreateMarginAnnot(self, labelData: Annotations.LabelData) -> CAE.AeroStructures.MarginAnnot:
        ...
    def Tag(self) -> Tag: ...



class MarginAnnotBuilder(CAE.CaeNoteBuilder):
    def __init__(self) -> None: ...


class MarginAnnot(CAE.CaeLabel):
    def __init__(self) -> None: ...


class ManualLoadExtraction(CAE.AeroStructures.LoadExtractionStrategy):
    def __init__(self) -> None: ...
    def GetValues(self, unit: Unit, keys: str, values: float) -> None:
        ...
    def SetValues(self, unit: Unit, keys: str, values: float) -> None:
        ...


class LoadExtractionValue(NXObject):
    def __init__(self) -> None: ...
    Strategy: CAE.AeroStructures.LoadExtractionStrategy
    StrategyType: CAE.AeroStructures.LoadExtractionValue.ActiveStrategy


    class ActiveStrategy(enum.Enum):
        None = 0
        User = 1
        Manual = 2
        FreeBody = 3
    

class LoadExtractionStrategy(NXObject):
    def __init__(self) -> None: ...


class LoadCaseSetLoadCaseCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[CAE.AeroStructures.LoadCase]:
        ...
    def __init__(self, owner: CAE.AeroStructures.LoadCaseSet) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.LoadCase:
        ...
    def Tag(self) -> Tag: ...



class LoadCaseSetCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[CAE.AeroStructures.LoadCaseSet]:
        ...
    def __init__(self, owner: CAE.AeroStructures.MarginSolution) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.LoadCaseSet:
        ...
    def CreateLoadCaseSetBuilder(self, loadcaeset: CAE.AeroStructures.LoadCaseSet) -> CAE.AeroStructures.LoadCaseSetBuilder:
        ...
    def DeleteLoadCaseSet(self, loadcaseset: CAE.AeroStructures.LoadCaseSet) -> None:
        ...
    def CreateLoadCaseSet(self, builder: CAE.AeroStructures.LoadCaseSetBuilder) -> None:
        ...
    def CloneLoadCaseSet(self, loadcaseset: CAE.AeroStructures.LoadCaseSet) -> None:
        ...
    def Tag(self) -> Tag: ...



class LoadCaseSetBuilder(Builder):
    def __init__(self) -> None: ...
    def AddLoadCase(self, loadcase: CAE.AeroStructures.LoadCase) -> None:
        ...
    def RemoveLoadCase(self, loadcase: CAE.AeroStructures.LoadCase) -> None:
        ...
    Description: str
    Name: str


class LoadCaseSet(NXObject):
    def __init__(self) -> None: ...
    LoadCaseCollection: CAE.AeroStructures.LoadCaseSetLoadCaseCollection


class LoadCaseListBuilder(Builder):
    def __init__(self) -> None: ...
    def RegisterCleanup(self) -> None:
        ...


class LoadCase(NXObject):
    def __init__(self) -> None: ...
    BaseLoadCase: CAE.BaseLoadcase
    StrengthRequirement: str


    class LoadCaseType(enum.Enum):
        Unitary = 0
        Combined = 1
    

class FailureMode(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    Id: str
    UiName: str


class CalculationLogLine(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def ToStringLine(self) -> str:
        ...
    Failmode: str
    Loadcase: str
    Message: str
    MsgType: CAE.AeroStructures.CalculationLogLine.MessageType
    Source: str
    Timestamp: str


    class MessageType(enum.Enum):
        Info = 0
        Warning = 1
        Error = 2
        Unknown = 3
    

