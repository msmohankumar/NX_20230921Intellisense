from ....NXOpen import *
from ...Routing import *
from ..Electrical import *

import typing
import enum

class WireDevice(Routing.Electrical.ElectricalStockDevice):
    def __init__(self) -> None: ...


class SystemDeviceCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Electrical.SystemDevice]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateSystemDevice(self) -> Routing.Electrical.SystemDevice:
        ...
    def CreateSystemDevice(self, systemName: str) -> Routing.Electrical.SystemDevice:
        ...
    def GetSystemSingleDevices(self) -> typing.List[Routing.Electrical.SystemDevice]:
        ...
    def Tag(self) -> Tag: ...



class SystemDevice(Routing.Electrical.HarnessDevice):
    def __init__(self) -> None: ...
    def GetSystemDefinition(self) -> Routing.Electrical.SystemDefinition:
        ...


class SystemDefinition(Routing.Electrical.HarnessDefinition):
    def __init__(self) -> None: ...


class SortConnectionsPluginData(TaggedObject):
    def __init__(self) -> None: ...
    def GetStockDevicesToSort(self, stockDevices: typing.List[Routing.Electrical.ElectricalStockDevice]) -> None:
        ...
    def SetSortedStockDevices(self, stockDevices: typing.List[Routing.Electrical.ElectricalStockDevice]) -> None:
        ...


class ShieldStockDefinition(Routing.Electrical.CableStockDefinition):
    def __init__(self) -> None: ...


class ShieldDevice(Routing.Electrical.CableDevice):
    def __init__(self) -> None: ...


class ShieldDefinition(Routing.Electrical.CableDefinition):
    def __init__(self) -> None: ...


class PathConnectionCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Electrical.PathConnection]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreatePathConnection(self) -> Routing.Electrical.PathConnection:
        ...
    def Tag(self) -> Tag: ...



class PathConnection(Routing.Electrical.Connection):
    def __init__(self) -> None: ...


class PathArrangementBuilder(Builder):
    def __init__(self) -> None: ...
    def ClearHarnessData(self) -> None:
        ...
    def DeletePathArrangement(self) -> None:
        ...
    def EstablishPathArrangement(self) -> None:
        ...
    def SetPathArrangementOrigin(self, point: Point3d) -> None:
        ...
    def InitializeBuilderFromArrangedPort(self, port: Routing.Port) -> None:
        ...
    HarnessPartOccurrence: Assemblies.Component
    PrototypePort: Routing.Port
    PrototypePortPartOccurrence: Assemblies.Component
    ReferencePort: TaggedObject


class NonPathConnectionCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Electrical.NonPathConnection]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateNonPathConnection(self) -> Routing.Electrical.NonPathConnection:
        ...
    def Tag(self) -> Tag: ...



class NonPathConnection(Routing.Electrical.Connection):
    def __init__(self) -> None: ...


class JumperConnectionCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Electrical.JumperConnection]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateJumperConnection(self) -> Routing.Electrical.JumperConnection:
        ...
    def Tag(self) -> Tag: ...



class JumperConnection(Routing.Electrical.PathConnection):
    def __init__(self) -> None: ...


class HarnessDeviceCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Electrical.HarnessDevice]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateHarnessDevice(self) -> Routing.Electrical.HarnessDevice:
        ...
    def CreateHarnessDevice(self, harnessName: str) -> Routing.Electrical.HarnessDevice:
        ...
    def GetHarnessSingleDevices(self) -> typing.List[Routing.Electrical.HarnessDevice]:
        ...
    def Tag(self) -> Tag: ...



class HarnessDevice(Routing.SingleDevice):
    def __init__(self) -> None: ...
    def GetHarnessDefinition(self) -> Routing.Electrical.HarnessDefinition:
        ...


class HarnessDefinition(Routing.AssemblyDefinition):
    def __init__(self) -> None: ...
    def GetChildConnections(self) -> typing.List[Routing.Electrical.Connection]:
        ...


class ElectricalStockDeviceCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Electrical.ElectricalStockDevice]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def AutoRouteConnections(self, routeLevel: Routing.Electrical.ElectricalStockDevice.RouteLevel, routeSel: Routing.Electrical.ElectricalStockDevice.AutoRouteSel, stockDevices: typing.List[Routing.Electrical.ElectricalStockDevice], errorList: ErrorList) -> int:
        ...
    def AssignStock(self, stockDevices: typing.List[Routing.Electrical.ElectricalStockDevice], routeType: Routing.Electrical.ElectricalStockDevice.RouteTypes) -> None:
        ...
    def RemoveStock(self, stockDevices: typing.List[Routing.Electrical.ElectricalStockDevice]) -> typing.List[Routing.Electrical.ElectricalStockDevice]:
        ...
    def AutoRouteAll(self, routeLevel: Routing.Electrical.ElectricalStockDevice.RouteLevel, routeSel: Routing.Electrical.ElectricalStockDevice.AutoRouteSel, errorList: ErrorList) -> int:
        ...
    def Unroute(self, stockDevices: typing.List[Routing.Electrical.ElectricalStockDevice]) -> typing.List[Routing.Electrical.ElectricalStockDevice]:
        ...
    def UnrouteAll(self) -> typing.List[Routing.Electrical.ElectricalStockDevice]:
        ...
    def Tag(self) -> Tag: ...



class ElectricalStockDevice(Routing.StockDevice):
    def __init__(self) -> None: ...
    def CalculateCutLength(self) -> float:
        ...
    def FindNearestHarnessDefinition(self) -> Routing.Electrical.HarnessDefinition:
        ...
    def FindTopmostCableDefinition(self) -> Routing.Electrical.CableDefinition:
        ...
    def FindFromConnector(self) -> Routing.Electrical.ConnectorDevice:
        ...
    def FindToConnector(self) -> Routing.Electrical.ConnectorDevice:
        ...
    def FindNearestHarnessDevice(self) -> Routing.Electrical.HarnessDevice:
        ...
    def FindImplementedConnection(self) -> Routing.Electrical.Connection:
        ...
    def HasIntermediateComponents(self) -> bool:
        ...
    def GetIntermediateComponents(self) -> typing.List[Routing.Electrical.ConnectorDevice]:
        ...
    def GetIntermediateTerminals(self) -> typing.List[Routing.LogicalTerminal]:
        ...
    def ManuallyRoute(self, routeLevel: Routing.Electrical.ElectricalStockDevice.RouteLevel, segments: typing.List[Routing.ISegment]) -> None:
        ...
    def ChangeHarness(self, harnessDevice: Routing.Electrical.HarnessDevice) -> None:
        ...
    ColorName: str
    CutLength: float
    NxColorValue: int


    class RouteTypes(enum.Enum):
        DefaultRoute = -1
        AutoRoute = 0
        ManualRoute = 1
    

    class RouteLevel(enum.Enum):
        Pin = 0
        Comp = 1
        Mixed = 2
        Partial = 3
    

    class AutoRouteSel(enum.Enum):
        BundleDiameter = 0
        LeastBundles = 1
        DesignRules = 2
        LeastSegments = 3
        ShortestLength = 4
    

class ElectricalStockDefinition(Routing.StockDefinition):
    def __init__(self) -> None: ...
    CrossSectionType: Routing.Electrical.ElectricalStockDefinition.SectionType
    Gauge: float
    Height: float
    LinearDensity: float
    MinBendRadius: float
    Width: float
    WireType: str


    class SectionType(enum.Enum):
        Circular = 0
        Rectangular = 1
    

class ElectricalPartDefinitionShadow(Routing.PartDefinitionShadow):
    def __init__(self) -> None: ...


class ElectricalNavigatorFilterCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Electrical.ElectricalNavigatorFilter]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateFilter(self, name: str, clause: str) -> Routing.Electrical.ElectricalNavigatorFilter:
        ...
    def GetDisplayFilter(self, type: Routing.Electrical.ElectricalFormat.Type) -> Routing.Electrical.ElectricalNavigatorFilter:
        ...
    def SetDisplayFilter(self, type: Routing.Electrical.ElectricalFormat.Type, filter: Routing.Electrical.ElectricalNavigatorFilter) -> None:
        ...
    def Tag(self) -> Tag: ...



class ElectricalNavigatorFilter(NavigatorFilter):
    def __init__(self) -> None: ...


class ElectricalFormatCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Electrical.ElectricalFormat]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateFormat(self, name: str, type: Routing.Electrical.ElectricalFormat.Type) -> Routing.Electrical.ElectricalFormat:
        ...
    def GetDisplayFormat(self, type: Routing.Electrical.ElectricalFormat.Type) -> Routing.Electrical.ElectricalFormat:
        ...
    def SetDisplayFormat(self, type: Routing.Electrical.ElectricalFormat.Type, format: Routing.Electrical.ElectricalFormat) -> None:
        ...
    def Tag(self) -> Tag: ...



class ElectricalFormat(TaggedObject):
    def __init__(self) -> None: ...
    FormatType: Routing.Electrical.ElectricalFormat.Type
    Name: str


    class Type(enum.Enum):
        Connections = 0
        Components = 1
    

class ElectricalDeviceRelationshipCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Electrical.ElectricalDeviceRelationship]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateElectricalDeviceRelationship(self) -> Routing.Electrical.ElectricalDeviceRelationship:
        ...
    def Tag(self) -> Tag: ...



class ElectricalDeviceRelationship(Routing.DeviceRelationship):
    def __init__(self) -> None: ...


class ConnectorDeviceCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Electrical.ConnectorDevice]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateConnectorDevice(self, connectorType: Routing.Electrical.ConnectorDevice.ComponentType, componentName: str) -> Routing.Electrical.ConnectorDevice:
        ...
    def CreateConnectorDevice(self, harnessDevice: Routing.Electrical.HarnessDevice, equipmentName: str, connectorName: str, connectorType: Routing.Electrical.ConnectorDevice.ComponentType) -> Routing.Electrical.ConnectorDevice:
        ...
    def GetConnectorSingleDevices(self) -> typing.List[Routing.Electrical.ConnectorDevice]:
        ...
    def GetEquipmentSingleDevices(self) -> typing.List[Routing.Electrical.ConnectorDevice]:
        ...
    def AutoAssignConnectors(self, connectors: typing.List[Routing.Electrical.ConnectorDevice]) -> None:
        ...
    def Tag(self) -> Tag: ...



class ConnectorDevice(Routing.SingleDevice):
    def __init__(self) -> None: ...
    def GetPartDefinition(self) -> Routing.Electrical.ElectricalPartDefinitionShadow:
        ...
    def SetPartDefinition(self, elecPartDefinitionShadow: Routing.Electrical.ElectricalPartDefinitionShadow) -> None:
        ...
    def GetTerminals(self) -> typing.List[Routing.LogicalTerminal]:
        ...
    def RemoveTerminal(self, routeTerminalToRemove: Routing.LogicalTerminal) -> bool:
        ...
    def GetAssignMethod(self) -> Routing.Electrical.ConnectorDevice.Assign:
        ...
    def FindNearestHarnessDevice(self) -> Routing.Electrical.HarnessDevice:
        ...
    def FindNearestCableDevice(self) -> Routing.Electrical.CableDevice:
        ...
    def IsNxDevice(self, elecHarnessDevice: Routing.Electrical.HarnessDevice) -> bool:
        ...
    def IsNxConnector(self, elecHarnessDevice: Routing.Electrical.HarnessDevice) -> bool:
        ...
    def IsUsedInRoutedConnection(self, elecHarnessDevice: Routing.Electrical.HarnessDevice) -> bool:
        ...
    def UnassignConnector(self) -> None:
        ...
    def ManuallyAssignConnector(self, elecConnectorPartOccurrence: Assemblies.Component) -> None:
        ...
    def FindRoutedStockDevices(self) -> typing.List[Routing.Electrical.ElectricalStockDevice]:
        ...
    def IsAssigned(self) -> bool:
        ...
    def FindStockDevices(self) -> typing.List[Routing.Electrical.ElectricalStockDevice]:
        ...
    def FindConnections(self) -> typing.List[Routing.Electrical.Connection]:
        ...
    def GetTerminal(self, terminalName: str, createTerminal: bool) -> Routing.LogicalTerminal:
        ...
    def FindMatchingParts(self) -> typing.List[Routing.CharacteristicList]:
        ...
    def FindPlacer(self, placerPos: float) -> Routing.Port:
        ...
    def PlaceConnectorOnPort(self, match: Routing.CharacteristicList, placer: Routing.Port) -> Assemblies.Component:
        ...
    def ProxyAssignConnector(self, proxy: Routing.Port) -> None:
        ...
    ComponentName: str
    ConnectorType: Routing.Electrical.ConnectorDevice.ComponentType


    class ComponentType(enum.Enum):
        None = 0
        Connector = 1
        Splice = 2
        Device = 3
        Other = 4
    

    class Assign(enum.Enum):
        None = 0
        Auto = 1
        Manual = 2
    

class ConnectionCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Electrical.Connection]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def GetConnections(self) -> typing.List[Routing.Electrical.Connection]:
        ...
    def Tag(self) -> Tag: ...



class Connection(Routing.LogicalConnection):
    def __init__(self) -> None: ...
    def GetIntermediateTerminals(self) -> typing.List[Routing.LogicalTerminal]:
        ...
    def ReplaceIntermediateTerminals(self, intermediateTerminals: typing.List[Routing.LogicalTerminal]) -> None:
        ...
    def AddIntermediateTerminal(self, intermediateTerminal: Routing.LogicalTerminal) -> bool:
        ...
    def RemoveIntermediateTerminal(self, intermediateTerminal: Routing.LogicalTerminal) -> bool:
        ...
    def GetRoutingMethod(self) -> str:
        ...
    def GetRoutedLevel(self) -> str:
        ...
    def GetRoutedLevelEnum(self) -> Routing.Electrical.Connection.RouteLevel:
        ...
    def IsRouted(self) -> bool:
        ...
    def FindNearestParentDevice(self) -> Routing.SingleDevice:
        ...
    def FindNearestHarnessDevice(self) -> Routing.Electrical.HarnessDevice:
        ...
    def FindNearestCableDevice(self) -> Routing.Electrical.CableDevice:
        ...
    def FindFromConnector(self) -> Routing.Electrical.ConnectorDevice:
        ...
    def FindToConnector(self) -> Routing.Electrical.ConnectorDevice:
        ...
    def FindPaths(self, routeLevel: Routing.Electrical.Connection.RouteLevel) -> typing.List[Routing.Path]:
        ...
    def Unroute(self) -> None:
        ...
    def AutomaticallyRoute(self, routeLevel: Routing.Electrical.Connection.RouteLevel) -> None:
        ...
    def AssignPath(self, routeLevel: Routing.Electrical.Connection.RouteLevel, path: Routing.Path) -> None:
        ...
    FromTerminal: Routing.LogicalTerminal
    MaximumPathLength: float
    MinimumPathLength: float
    PathLengthMultiplier: str
    PathLengthOffset: str
    ToTerminal: Routing.LogicalTerminal


    class RouteLevel(enum.Enum):
        NotRouted = 0
        Pin = 1
        Component = 2
        Mixed = 3
    

class CablewaysLayoutViewCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Electrical.CablewaysLayoutView]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateLayoutView(self, segment: Curve) -> Routing.Electrical.CablewaysLayoutView:
        ...
    def Tag(self) -> Tag: ...



class CablewaysLayoutView(NXObject):
    def __init__(self) -> None: ...
    def CondemnLayoutViewEntities(self) -> None:
        ...
    def UncondemnLayoutViewEntities(self) -> None:
        ...
    def PositionLayoutView(self, orientation: Matrix3x3, origin: Point3d) -> None:
        ...
    def PositionLayoutView(self, toOrientation: Xform) -> None:
        ...
    def FlipView(self) -> None:
        ...
    def GetViewDirection(self) -> bool:
        ...
    def HighlightView(self) -> None:
        ...
    def UnhighlightView(self) -> None:
        ...
    def GetViewMatrixAndOrigin(self, orientation: Matrix3x3, origin: Point3d) -> None:
        ...


class CablewaysLayoutBuilder(Builder):
    def __init__(self) -> None: ...


class CablewaysBuilder(Builder):
    def __init__(self) -> None: ...
    AllowNewCables: bool
    AllowOverFill: bool
    CableTrayArea: Expression
    CableTrayMaximumHeight: Expression
    CabletrayHeight: Expression
    CabletrayWidth: Expression
    FillPercentage: Expression
    RouteObjectCollector: Routing.RouteObjectCollector
    SpecifiedFillPercentage: Expression


class CableStockDefinition(Routing.Electrical.ElectricalStockDefinition):
    def __init__(self) -> None: ...
    CableLocation: int
    CoverThickness: float
    WireSpacing: float


class CableDevice(Routing.Electrical.ElectricalStockDevice):
    def __init__(self) -> None: ...
    def GetAssemblyDefinition(self) -> Routing.Electrical.CableDefinition:
        ...
    def ImportCablePart(self, partName: str) -> None:
        ...
    def GetConduitPartNumber(self) -> str:
        ...
    def SetConduitPartNumber(self, conduitPartNumber: str) -> None:
        ...


class CableDefinition(Routing.AssemblyDefinition):
    def __init__(self) -> None: ...


class CableConnectionCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Electrical.CableConnection]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateCableConnection(self) -> Routing.Electrical.CableConnection:
        ...
    def CreateShieldConnection(self) -> Routing.Electrical.CableConnection:
        ...
    def Tag(self) -> Tag: ...



class CableConnection(Routing.Electrical.Connection):
    def __init__(self) -> None: ...
    def IsCableRouted(self) -> bool:
        ...


class AssignProxyBuilder(Builder):
    def __init__(self) -> None: ...
    Point: Point
    Vector: Direction


