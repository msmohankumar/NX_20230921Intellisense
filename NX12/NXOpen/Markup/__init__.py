from ...NXOpen import *
from ..Markup import *

import typing
import enum

class Text(Markup.MarkupObject):
    def __init__(self) -> None: ...
    Content: str


class Rectangle(Markup.MarkupObject):
    def __init__(self) -> None: ...
    def GetCenterLengthAndWidth(self, center: Point2d, length: float, width: float) -> None:
        ...
    def SetCenterLengthAndWidth(self, center: Point2d, length: float, width: float) -> None:
        ...


class Polyline(Markup.MarkupObject):
    def __init__(self) -> None: ...
    def GetPoints(self, points: typing.List[Point2d]) -> None:
        ...
    def SetPoints(self, points: typing.List[Point2d]) -> None:
        ...
    LineType: Markup.Polyline.LineOption


    class LineOption(enum.Enum):
        Line = 0
        Spline = 1
    

class MarkupObjectCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Markup.MarkupObject]:
        ...
    def __init__(self, owner: Markup.MarkupManager) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, id: str) -> Markup.MarkupObject:
        ...
    def Tag(self) -> Tag: ...



class MarkupObject(NXObject):
    def __init__(self) -> None: ...
    def GetLocation(self) -> Point2d:
        ...
    def SetLocation(self, location: Point2d) -> None:
        ...
    def GetAssociatedObjects(self) -> typing.List[DisplayableObject]:
        ...
    def SetAssociatedObjects(self, associatedObjects: typing.List[DisplayableObject]) -> None:
        ...
    def GetLeaderLineLength(self) -> float:
        ...
    def SetLeaderLineLength(self, length: float) -> None:
        ...
    def GetTerminatingObjects(self) -> typing.List[DisplayableObject]:
        ...
    def SetTerminatingObjects(self, terminatingObjs: typing.List[DisplayableObject]) -> None:
        ...
    AnchorObject: DisplayableObject
    Comment: str
    PinToScreen: bool
    Visible: bool


class MarkupManager(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def Tag(self) -> Tag: ...

    MarkupFileCollection: Markup.MarkupFileCollection
    MarkupObjectCollection: Markup.MarkupObjectCollection


class MarkupFileObjectCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Markup.MarkupObject]:
        ...
    def __init__(self, owner: Markup.File) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, id: str) -> Markup.MarkupObject:
        ...
    def CreateCircle(self, center: Point2d, radius: float) -> Markup.Circle:
        ...
    def CreateEllipse(self, center: Point2d, major: float, minor: float) -> Markup.Ellipse:
        ...
    def CreateRectangle(self, center: Point2d, length: float, width: float) -> Markup.Rectangle:
        ...
    def CreatePolyline(self, points: typing.List[Point2d]) -> Markup.Polyline:
        ...
    def CreateFreehand(self, points: typing.List[Point2d]) -> Markup.Freehand:
        ...
    def CreateText(self, position: Point2d, textContent: str) -> Markup.Text:
        ...
    def CreateIcon(self, position: Point2d, iconName: str, size: Markup.Icon.Size) -> Markup.Icon:
        ...
    def DeleteObjects(self, objects: typing.List[TaggedObject]) -> None:
        ...
    def Tag(self) -> Tag: ...



class MarkupFileCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Markup.File]:
        ...
    def __init__(self, owner: Markup.MarkupManager) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, id: str) -> Markup.File:
        ...
    def CreateFile(self, fileSpec: str) -> Markup.File:
        ...
    def OpenFile(self, fileSpec: str) -> Markup.File:
        ...
    def ActivateFile(self, file: Markup.File) -> None:
        ...
    def GetActiveFile(self) -> Markup.File:
        ...
    def SaveFiles(self, files: typing.List[Markup.File]) -> None:
        ...
    def CloseFiles(self, files: typing.List[Markup.File]) -> None:
        ...
    def CreateEditObjectDisplayBuilder(self, objects: typing.List[Markup.MarkupObject]) -> Markup.EditObjectDisplayBuilder:
        ...
    def Tag(self) -> Tag: ...



class Icon(Markup.MarkupObject):
    def __init__(self) -> None: ...
    IconName: str
    IconSize: Markup.Icon.Size


    class Size(enum.Enum):
        ExtraSmall = 0
        Small = 1
        Medium = 2
        Large = 3
    

class Freehand(Markup.MarkupObject):
    def __init__(self) -> None: ...
    def GetPoints(self, points: typing.List[Point2d]) -> None:
        ...
    def SetPoints(self, points: typing.List[Point2d]) -> None:
        ...


class File(NXObject):
    def __init__(self) -> None: ...
    MarkupFileObjectCollection: Markup.MarkupFileObjectCollection
    FileSpecification: str


class Ellipse(Markup.MarkupObject):
    def __init__(self) -> None: ...
    def GetCenterAndRadius(self, center: Point2d, majorRadius: float, minorRadius: float) -> None:
        ...
    def SetCenterAndRadius(self, center: Point2d, majorRadius: float, minorRadius: float) -> None:
        ...


class EditObjectDisplayBuilder(Builder):
    def __init__(self) -> None: ...
    FillArea: bool
    LineColor: int
    LineFont: DisplayableObject.ObjectFont
    LineWidth: DisplayableObject.ObjectWidth
    TextFont: str
    TextFontStyle: Features.TextBuilder.FontStyleOptions
    TextScale: float


class Circle(Markup.MarkupObject):
    def __init__(self) -> None: ...
    def GetCenterAndRadius(self, center: Point2d, radius: float) -> None:
        ...
    def SetCenterAndRadius(self, center: Point2d, radius: float) -> None:
        ...


