from ...NXOpen import *
from ..DiagrammingLibraryAuthor import *

import typing
import enum

class Symbol3DBuilder(TaggedObject):
    def __init__(self) -> None: ...
    def Validate(self) -> bool:
        ...
    PortMappingData: ITableEditorDataProvider


class Symbol2DBuilder(TaggedObject):
    def __init__(self) -> None: ...
    def CreateFromSymbol(self, symbolId: str) -> None:
        ...
    def Validate(self) -> bool:
        ...
    AnchorPoint: Point2d
    DraftingSymbol: Tooling.SelectReuseLibraryItemBuilder
    EnableScale: bool
    Image: Gateway.ImageCaptureBuilder
    IsInline: bool
    PortData: DiagrammingLibraryAuthor.PortDataBuilder
    TagLocation: Point2d


class PortDataBuilder(TaggedObject):
    def __init__(self) -> None: ...
    def GetPortObjects(self, portObjects: typing.List[DiagrammingLibraryAuthor.AttributeHolder]) -> None:
        ...
    def GetPointLocation(self, portObject: DiagrammingLibraryAuthor.AttributeHolder) -> Point2d:
        ...
    def SetPointLocation(self, portObject: DiagrammingLibraryAuthor.AttributeHolder, portLocation: Point2d) -> None:
        ...
    def GetConnectionDirection(self, portObject: DiagrammingLibraryAuthor.AttributeHolder) -> Point2d:
        ...
    def SetConnectionDirection(self, portObject: DiagrammingLibraryAuthor.AttributeHolder, connectionDirection: Point2d) -> None:
        ...
    def CreatePort(self) -> DiagrammingLibraryAuthor.AttributeHolder:
        ...
    def DeletePort(self, portObject: DiagrammingLibraryAuthor.AttributeHolder) -> None:
        ...
    def Validate(self) -> bool:
        ...
    NozzleBottom: bool
    NozzleLeft: bool
    NozzleRight: bool
    NozzleTop: bool


class PipeStockBuilder(TaggedObject):
    def __init__(self) -> None: ...
    def SelectFolder(self, classId: str) -> None:
        ...
    def SelectPipeStock(self, symbolId: str) -> None:
        ...
    def GetPipeStockObjects(self, pipeStockObjects: typing.List[DiagrammingLibraryAuthor.AttributeHolder]) -> None:
        ...
    def CreatePipeStock(self, instanceId: str, partId: str, partName: str, numberName: str) -> DiagrammingLibraryAuthor.AttributeHolder:
        ...
    def DeletePipeStock(self, pipeStockObject: DiagrammingLibraryAuthor.AttributeHolder) -> None:
        ...
    def Validate(self) -> bool:
        ...


class LineTypeBuilderList(TaggedObject):
    def __init__(self) -> None: ...
    def Append(self, objects: typing.List[DiagrammingLibraryAuthor.LineTypeBuilder]) -> None:
        ...
    def Append(self, object: DiagrammingLibraryAuthor.LineTypeBuilder) -> None:
        ...
    def ClearIndex(self, deleteIdx: int) -> None:
        ...
    def FindIndex(self, obj: DiagrammingLibraryAuthor.LineTypeBuilder) -> int:
        ...
    def FindItem(self, index: int) -> DiagrammingLibraryAuthor.LineTypeBuilder:
        ...
    def Erase(self, index: int) -> None:
        ...
    def Erase(self, index: int, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Erase(self, obj: DiagrammingLibraryAuthor.LineTypeBuilder) -> None:
        ...
    def Erase(self, obj: DiagrammingLibraryAuthor.LineTypeBuilder, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Clear(self) -> None:
        ...
    def Clear(self, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def GetContents(self) -> typing.List[DiagrammingLibraryAuthor.LineTypeBuilder]:
        ...
    def SetContents(self, objects: typing.List[DiagrammingLibraryAuthor.LineTypeBuilder]) -> None:
        ...
    def Swap(self, index1: int, index2: int) -> None:
        ...
    def Swap(self, object1: DiagrammingLibraryAuthor.LineTypeBuilder, object2: DiagrammingLibraryAuthor.LineTypeBuilder) -> None:
        ...
    def Insert(self, location: int, object: DiagrammingLibraryAuthor.LineTypeBuilder) -> None:
        ...
    def MoveToTop(self, index: int) -> None:
        ...
    def MoveToBottom(self, index: int) -> None:
        ...
    Length: int


class LineTypeBuilder(TaggedObject):
    def __init__(self) -> None: ...
    def Validate(self) -> bool:
        ...
    LineColor: NXColor
    LineFont: DisplayableObject.ObjectFont
    LineTypeName: str
    LineTypePriority: int
    LineWidth: DisplayableObject.ObjectWidth
    ObjectId: str


class AttributeHolder(NXObject):
    def __init__(self) -> None: ...


