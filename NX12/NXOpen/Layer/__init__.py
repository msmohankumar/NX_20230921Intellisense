from ...NXOpen import *
from ..Layer import *

import typing
import enum

class StateInfo():
    Layer: int
    State: Layer.State
    def ToString(self) -> str:
        ...
    def __init__(self, Layer: int, State: Layer.State) -> None: ...


class StateCollection(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def GetState(self, layer: int) -> Layer.State:
        ...
    def SetState(self, layer: int, state: Layer.State) -> None:
        ...
    def SetStateOfCategory(self, category: Layer.Category, state: Layer.State) -> None:
        ...
    def FreeResource(self) -> None:
        ...


class State(enum.Enum):
    WorkLayer = 0
    Selectable = 1
    Visible = 2
    Hidden = 3


class LayerManager(Utilities.NXRemotableObject):
    def __init__(self, owner: BasePart) -> None: ...
    def ChangeStates(self, stateArray: typing.List[Layer.StateInfo], fitAll: bool) -> None:
        ...
    def ChangeStates(self, stateArray: typing.List[Layer.StateInfo]) -> None:
        ...
    def GetStates(self) -> Layer.StateCollection:
        ...
    def SetStates(self, stateCollection: Layer.StateCollection, fitAll: bool) -> None:
        ...
    def SetStates(self, stateCollection: Layer.StateCollection) -> None:
        ...
    def SetState(self, layer: int, state: Layer.State) -> None:
        ...
    def SetState(self, layer: int, state: Layer.State, fitAll: bool) -> None:
        ...
    def GetState(self, layer: int) -> Layer.State:
        ...
    def MoveDisplayableObjects(self, newLayer: int, objectArray: typing.List[DisplayableObject]) -> None:
        ...
    def ApplyMoveToLayerToOwningParts(self, newLayer: int, objectArray: typing.List[DisplayableObject]) -> None:
        ...
    def GetAllObjectsOnLayer(self, layer: int) -> typing.List[NXObject]:
        ...
    def CopyObjects(self, newLayer: int, objectArray: typing.List[NXObject]) -> None:
        ...
    def GetVisibilitiesInView(self, view: View, stateArray: typing.List[Layer.StateInfo]) -> None:
        ...
    def SetObjectsVisibilityOnLayer(self, view: View, stateArray: typing.List[Layer.StateInfo], doUpdate: bool) -> None:
        ...
    def ResetViewVisibilityToGlobal(self, view: View) -> None:
        ...
    def Tag(self) -> Tag: ...

    WorkLayer: int


class Constants(enum.Enum):
    FirstLayer = 1
    LastLayer = 256


class CategoryCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Layer.Category]:
        ...
    def __init__(self, owner: BasePart) -> None: ...
    def __init__(self) -> None: ...
    def CreateCategory(self, name: str, description: str, memberLayers: int) -> Layer.Category:
        ...
    def FindObject(self, name: str) -> Layer.Category:
        ...
    def Tag(self) -> Tag: ...



class Category(NXObject):

    def __init__(self) -> None: ...
    def SetMemberLayers(self, layers: int) -> None:
        ...
    def GetMemberLayers(self) -> int:
        ...
    def SetState(self, state: Layer.State) -> None:
        ...
    Description: str


