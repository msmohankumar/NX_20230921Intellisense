from . import SaveManagement
from ...NXOpen import *
from ..PDM import *

import typing
import enum

class WebAppSession(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def CreateCustomWebAppMenuHandler(self) -> PDM.CustomWebAppMenuHandler:
        ...
    def Open(self, databaseObjects: typing.List[PDM.DatabaseObject]) -> None:
        ...
    def ShowSummary(self, uid: str, objType: str, classId: str) -> None:
        ...
    def Tag(self) -> Tag: ...



class VariantConfigurationBuilder(TaggedObject):
    def __init__(self) -> None: ...
    def AskAvailableVariantRules(self, contextId: str, revId: str) -> str:
        ...
    def GetVariantRuleTableInformation(self, contextIds: str, variantRules: str) -> None:
        ...
    def RemoveVariantRule(self, contextId: str, variantRule: str) -> None:
        ...
    def AddMultipleVariantRules(self, contextIds: str, variantRules: str) -> None:
        ...
    def Validate(self) -> bool:
        ...


class TracelinkQuery(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def GetTracelinkRelationsXml(self) -> str:
        ...


class SoaQuery(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def AddFieldDescription(self, searchVar: PDM.PdmSearch, type: PDM.PdmSoaqueryNxmgrfielddatatype, name: str, attrName: str, defaultValue: str, logicalOperation: str, mathOperation: str, lov: PDM.ListOfValues) -> None:
        """[Obsolete("Deprecated in NX8.0.0.  It's not needed in any context of search based on queries.")"""
        ...


class SmartSaveObject(NXObject):
    def __init__(self) -> None: ...
    def GetModificationReason(self) -> str:
        ...
    def IsFrozenByStatus(self) -> bool:
        ...
    def IsModifiable(self) -> bool:
        ...
    def HasAddContentPrivilege(self) -> bool:
        ...
    def HasRemoveContentPrivilege(self) -> bool:
        ...
    def IsNonMaster(self) -> bool:
        ...
    def IsMajorRevisable(self) -> bool:
        ...
    def IsReleased(self) -> bool:
        ...
    def IsCheckedOutByAnotherUser(self) -> bool:
        ...
    def IsExplicitCheckOutNeeded(self) -> bool:
        ...
    def IsDisplayedOnTheSaveDialog(self) -> bool:
        ...
    def SetAsDisplayedOnTheSaveDialog(self, markDisplayedOnDialog: bool) -> None:
        ...
    def GetCurrentOperationType(self) -> PDM.SmartSaveObject.OperationType:
        ...
    def SetCurrentOperationType(self, newOperationType: PDM.SmartSaveObject.OperationType) -> None:
        ...
    def GetValidOperationTypes(self) -> typing.List[PDM.SmartSaveObject.OperationType]:
        ...
    def GetTeamcenterObjectType(self) -> str:
        ...
    def SetValidOperationTypes(self, newValidOperationTypes: typing.List[PDM.SmartSaveObject.OperationType]) -> None:
        ...
    def GetEffectivityFormula(self) -> str:
        ...
    def SetEffectivityFormula(self, effectivityFormula: str, effectivityDisplayString: str) -> None:
        ...


    class OperationType(enum.Enum):
        None = -1
        Create = 0
        Revise = 1
        SaveAs = 2
        Save = 3
        Delete = 4
    

class SmartSaveContext(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def SetWorkObjectToRootObjectMap(self, workObjects: typing.List[TaggedObject], rootObjects: typing.List[TaggedObject]) -> None:
        ...
    def GetWorkObjectToRootObjectMap(self, workObjects: typing.List[TaggedObject], rootObjects: typing.List[TaggedObject]) -> None:
        ...
    def GetSaveType(self) -> PDM.SmartSaveBuilder.SaveType:
        ...


class SmartSaveBuilder(Builder):
    def __init__(self) -> None: ...
    def GetSmartSaveObjects(self, smartSaveObjects: typing.List[PDM.SmartSaveObject]) -> None:
        ...
    def OnOperationTypeChanged(self, smartSaveObjects: typing.List[PDM.SmartSaveObject], operationType: AttributePropertiesBuilder.OperationType) -> None:
        ...
    def GetOperationFailures(self) -> ErrorList:
        ...
    def ClearValidationFailures(self) -> None:
        ...
    def UpdateSmartSaveObjectsOnBuilder(self) -> None:
        ...
    def CanPerformDefaultSave(self) -> bool:
        ...
    def ValidateSmartSaveObjects(self) -> None:
        ...
    def CreateSpecificationsForSmartSaveObjects(self, smartSaveObjects: typing.List[PDM.SmartSaveObject]) -> None:
        ...
    def GetErrorMessageHandler(self, refresh: bool) -> PDM.ErrorMessageHandler:
        ...
    def AssignRemoveProjects(self, smartSaveObjects: typing.List[PDM.SmartSaveObject], projectNames: str, assignmentStates: typing.List[Session.ProjectAssignmentState]) -> None:
        ...
    def GetAssociatedChangeNoticeNames(self, smartSaveObjects: typing.List[PDM.SmartSaveObject]) -> str:
        ...
    def AutoAssignAttributes(self, objects: typing.List[NXObject]) -> ErrorList:
        ...
    def AutoAssignAttributesWithNamingPattern(self, objects: typing.List[NXObject], properties: typing.List[NXObject]) -> ErrorList:
        ...
    def CreateAttributeTitleToNamingPatternMap(self, attributeTitles: str, titlePatterns: str) -> NXObject:
        ...
    DebugDumpEnabled: bool
    UseNewSortForDebug: bool


    class SaveType(enum.Enum):
        Save = 0
        SaveAll = 1
        SavePreciseAssembly = 2
        SaveWorkPartOnly = 3
        SaveAndClose = 4
        SaveDesignElements = 5
    

class SheetRevision(PDM.ConditionalElementRevision):
    def __init__(self) -> None: ...


class SessionSettings(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def GetGroups(self) -> str:
        ...
    def GetRoles(self) -> str:
        ...
    def GetVolumes(self) -> str:
        ...
    def GetLocalVolumes(self) -> str:
        ...
    def GetLocationCodes(self) -> str:
        ...
    def GetProjects(self) -> str:
        ...
    def Apply(self) -> None:
        ...
    def FreeResource(self) -> None:
        ...
    def DumpValidationInfo(self, logFileName: str) -> None:
        ...
    AdministrationBypass: bool
    AdministrationLogging: bool
    ApplicationLogging: bool
    Group: str
    IsAdministrator: bool
    Journaling: bool
    LocalVolume: str
    LocationCode: str
    Project: str
    Role: str
    SecurityLogging: bool
    Volume: str


class SearchResult(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def GetResultObjectNames(self) -> str:
        ...
    def GetResultItemIds(self) -> str:
        """[Obsolete("Deprecated in NX10.0.0.  Use PDM.SearchResult.GetResultMfkIds instead.")"""
        ...
    def GetResultMfkIds(self) -> str:
        ...
    def GetResultObjectTypes(self) -> str:
        ...


class SaveAsReviseObserver(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[PDM.SaveAsReviseCallbackData]:
        ...
    def __init__(self, owner: PDM.PdmSession) -> None: ...
    def __init__(self) -> None: ...
    def AddPrecopyoperationCallback(self, precopyoperationCb: PDM.SaveAsReviseObserver.PrecopyoperationCb) -> int:
        ...
    def RemovePrecopyoperationCallback(self, id: int) -> None:
        ...
    def AddPostcopyoperationCallback(self, postcopyoperationCb: PDM.SaveAsReviseObserver.PostcopyoperationCb) -> int:
        ...
    def RemovePostcopyoperationCallback(self, id: int) -> None:
        ...
    def Tag(self) -> Tag: ...



    

    

class SaveAsReviseCallbackData(TaggedObject):
    def __init__(self) -> None: ...
    def GetSourceObjects(self, sourceObjects: typing.List[TaggedObject]) -> int:
        ...
    def GetCopiedObjects(self, sourceObjects: TaggedObject, copiedObjects: typing.List[TaggedObject]) -> None:
        ...


class RequirementUtils(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def NewTracelinkQuery(self) -> PDM.TracelinkQuery:
        ...
    def CreateTraceLinks(self, requirementItemNumbers: str, requirementRevisions: str, parts: str) -> None:
        ...
    def RemoveTraceLinks(self, requirementItemNumbers: str, requirementRevisions: str, parts: str) -> None:
        ...
    def Tag(self) -> Tag: ...



class PortArtifact(NXObject):
    def __init__(self) -> None: ...


class PersistentSettings(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def GetGroups(self) -> str:
        ...
    def GetVolumes(self) -> str:
        ...
    def Apply(self) -> None:
        ...
    def FreeResource(self) -> None:
        ...
    Group: str
    Volume: str


class PendingComponentsManager(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def GetComponents(self) -> str:
        ...
    def GetComponentPartFileName(self, handle: str) -> str:
        ...
    def ComponentHasPosition(self, handle: str) -> bool:
        ...
    def DeleteComponent(self, handle: str) -> None:
        ...
    def AddComponent(self, handle: str, loadStatus: PartLoadStatus) -> Assemblies.Component:
        ...
    def AddNgcComponent(self, handle: str, loadStatus: PartLoadStatus) -> Assemblies.Component:
        ...
    def FreeResource(self) -> None:
        ...


class PdmSoaqueryNxmgrfielddatatype(enum.Enum):
    Char = 2001
    Date = 2002
    Double = 2003
    Float = 2004
    Int = 2005
    Bool = 2006
    Short = 2007
    String = 2008
    Reference = 2009
    UntypedReference = 2010
    ExternalReference = 2011


class PdmSession(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def GetTcserverSettings(self, connectString: str, discriminator: str) -> None:
        ...
    def GetSsoSettings(self, isSsoEnabled: bool, ssoServerUrl: str, ssoAppID: str) -> None:
        ...
    def SetDefaultFolder(self, defaultFolderSpec: str) -> None:
        ...
    def NewFileManagement(self) -> PDM.FileManagement:
        ...
    def NewCaeFileContainer(self) -> PDM.CAEFileContainer:
        ...
    def CreateCopyOperationBuilder(self, operation: PDM.PartOperationBuilder.OperationType) -> PDM.PartOperationCopyBuilder:
        ...
    def CreateCreateOperationBuilder(self, operation: PDM.PartOperationBuilder.OperationType) -> PDM.PartOperationCreateBuilder:
        ...
    def CreateOperationBuilder(self, operation: PDM.PartOperationBuilder.OperationType) -> PDM.PartOperationBuilder:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PdmSession.CreateCopyOperationBuilder instead")"""
        ...
    def CreateObjectCreateBuilder(self, tcTypes: str, baseTCTypes: str) -> PDM.ObjectCreateBuilder:
        ...
    def CreateMakeUniqueOperationBuilder(self, part: BasePart) -> PDM.PartOperationMakeUniqueBuilder:
        ...
    def CreateImportOperationBuilder(self) -> PDM.PartOperationImportBuilder:
        ...
    def CreatePartOperationAttributePropertiesBuilder(self, objects: typing.List[NXObject]) -> PDM.PartOperationAttributePropertiesBuilder:
        ...
    def CreatePartOperationValidationPropertiesBuilder(self, objects: typing.List[NXObject]) -> AttributePropertiesBuilder:
        ...
    def GetDatabaseObjectManager(self) -> PDM.DatabaseObjectManager:
        ...
    def CreateSmartSaveBuilder(self, saveType: PDM.SmartSaveBuilder.SaveType) -> PDM.SmartSaveBuilder:
        """[Obsolete("Deprecated in NX11.0.1.  Use NXOpen.PDM.PdmSession.CreateSmartSaveBuilderWithContext instead")"""
        ...
    def CreateSmartSaveContext(self, saveType: PDM.SmartSaveBuilder.SaveType) -> PDM.SmartSaveContext:
        ...
    def CreateSmartSaveBuilderWithContext(self, smartSaveContext: PDM.SmartSaveContext) -> PDM.SmartSaveBuilder:
        ...
    def CreateExportWorksetForReferenceBuilder(self, workset: BasePart) -> PDM.ExportWorksetForReferenceBuilder:
        ...
    def SetActiveEngineeringChangeNotice(self, part: NXObject, ecnMFKId: str, ecnRevsionId: str) -> None:
        ...
    def SetNativeMode(self, enable: bool) -> None:
        ...
    def Tag(self) -> Tag: ...

    AttributeGroupDescriptions: PDM.AttributeGroupDescriptionCollection
    PartOperationImportObserver: PDM.PartOperationImportObserver
    SaveObserver: PDM.SaveManagement.SaveObserver
    SaveAsReviseObserver: PDM.SaveAsReviseObserver


class PdmSearchManager(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def NewPdmSearch(self) -> PDM.PdmSearch:
        ...
    def NewPdmSoaquery(self) -> PDM.SoaQuery:
        """[Obsolete("Deprecated in NX9.0.0.  This method is not useful. For NX Search use NXOpen.PDM.PdmSearchManager.NewPdmSearch instead")"""
        ...
    def NewPdmSearchresult(self) -> PDM.SearchResult:
        ...
    def NewPdmListofvalues(self) -> PDM.ListOfValues:
        ...
    def Tag(self) -> Tag: ...



class PdmSearch(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def Advanced(self, entries: str, values: str) -> PDM.SearchResult:
        ...
    def Simple(self, searchCriteria: str) -> PDM.SearchResult:
        ...


class PdmPart(Utilities.NXRemotableObject):
    def __init__(self, owner: BasePart) -> None: ...
    def NewAlternateIdManager(self) -> PDM.AlternateIdManager:
        ...
    def NewDatabaseAttributeManager(self) -> PDM.DatabaseAttributeManager:
        ...
    def Checkout(self) -> None:
        ...
    def AssignPermanentName(self, newFileName: str) -> None:
        ...
    def SetDefaultFolderForPart(self) -> None:
        ...
    def CheckoutParts(self, partsToCheckOut: typing.List[BasePart], checkOutInput: PDM.PdmPart.CheckoutInput) -> PDM.OperationErrors:
        ...
    def CheckinParts(self, partsToCheckIn: typing.List[BasePart], checkInInput: PDM.PdmPart.CheckinInput) -> PDM.OperationErrors:
        ...
    def SetPreciseStructureOnSave(self, partsToSetPreciseOnSave: typing.List[BasePart]) -> None:
        ...
    def Tag(self) -> Tag: ...



    class PdmPartCheckoutInput():
        InputComment: str
        InputChangeId: str
        AllowRemote: bool
        ExplicitCheckOut: bool
        IncludeSecondary: bool
        def ToString(self) -> str:
            ...
    

    class PdmPartCheckinInput():
        AllowRemote: bool
        ExplicitCheckIn: bool
        IncludeSecondary: bool
        def ToString(self) -> str:
            ...
        def __init__(self, AllowRemote: bool, ExplicitCheckIn: bool, IncludeSecondary: bool) -> None: ...
    

class PdmNavigatorNode(TreeListNode):
    def __init__(self) -> None: ...
    def GetUid(self) -> str:
        ...
    def GetNodeType(self) -> str:
        ...


class PdmFile(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def GetFileName(self) -> str:
        ...
    def GetFileLastModifiedDate(self) -> str:
        ...
    def GetFileSize(self) -> str:
        ...


class PartOperationValidationPropertiesBuilder(AttributePropertiesBuilder):
    def __init__(self) -> None: ...
    def GetValidationRuleSetBrowseOption(self) -> PDM.PartOperationImportBuilder.ValidationRuleSetFileBrowseOption:
        ...
    def SetValidationRuleSetBrowseOption(self, validationRuleSetBrowseOption: PDM.PartOperationImportBuilder.ValidationRuleSetFileBrowseOption) -> None:
        ...
    def GetValidationRuleSetFile(self) -> str:
        ...
    def SetValidationRuleSetFile(self, filename: str) -> None:
        ...
    def GetValidationTreatWarningAsPass(self) -> bool:
        ...
    def SetValidationTreatWarningAsPass(self, validationTreatWarningAsPass: bool) -> None:
        ...
    def GetValidationTreatOutdatedAsPass(self) -> bool:
        ...
    def SetValidationTreatOutdatedAsPass(self, validationTreatOutdatedAsPass: bool) -> None:
        ...


class PartOperationMakeUniqueBuilder(PDM.PartOperationCopyBuilder):
    def __init__(self) -> None: ...
    SelectedComponents: SelectDisplayableObjectList


class PartOperationImportObserver(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[PDM.PartOperationImportCallbackData]:
        ...
    def __init__(self, owner: PDM.PdmSession) -> None: ...
    def __init__(self) -> None: ...
    def AddInitializeCallback(self, initializeCb: PDM.PartOperationImportObserver.InitializeCb) -> int:
        ...
    def RemoveInitializeCallback(self, id: int) -> None:
        ...
    def AddPreAutoassignCallback(self, preAutoassignCb: PDM.PartOperationImportObserver.PreAutoassignCb) -> int:
        ...
    def RemovePreAutoassignCallback(self, id: int) -> None:
        ...
    def AddPreCommitCallback(self, preCommitCb: PDM.PartOperationImportObserver.PreCommitCb) -> int:
        ...
    def RemovePreCommitCallback(self, id: int) -> None:
        ...
    def AddPostCommitCallback(self, postCommitCb: PDM.PartOperationImportObserver.PostCommitCb) -> int:
        ...
    def RemovePostCommitCallback(self, id: int) -> None:
        ...
    def AddTerminateCallback(self, terminateCb: PDM.PartOperationImportObserver.TerminateCb) -> int:
        ...
    def RemoveTerminateCallback(self, id: int) -> None:
        ...
    def Tag(self) -> Tag: ...



    

    

    

    

    

class PartOperationImportCallbackData(TaggedObject):
    def __init__(self) -> None: ...
    def GetLogicalObjects(self, logicalObjects: typing.List[PDM.NativePartLogicalObject]) -> None:
        ...
    ImportBuilder: PDM.PartOperationImportBuilder


class PartOperationImportBuilder(PDM.PartOperationBuilder):
    def __init__(self) -> None: ...
    def AddParts(self, parts: str, errorMsgs: str) -> None:
        ...
    def AddPartsUsingLogFile(self, logFilePath: str, errorMsgs: str) -> None:
        ...
    def AddPartsFromFolder(self, folderPath: str, errorMsgs: str) -> None:
        ...
    def GetUpdatedLogicalObjects(self, logicalObjects: typing.List[PDM.LogicalObject]) -> None:
        ...
    def GetLogicalObjectForPart(self, partFilename: str) -> PDM.LogicalObject:
        ...
    def ResetAttributes(self, logicalObjects: typing.List[PDM.LogicalObject]) -> None:
        ...
    def ExecuteDryRun(self) -> None:
        ...
    def GetDefaultProjectInformation(self, projectNames: str, assignmentStates: typing.List[Session.ProjectAssignmentState]) -> None:
        ...
    def SetDefaultProjectInformation(self, projectNames: str, assignmentStates: typing.List[Session.ProjectAssignmentState]) -> None:
        ...
    def GetDfaFiles(self, dfaFiles: str) -> None:
        ...
    def SetDfaFiles(self, dfaFiles: str) -> None:
        ...
    def RemoveDfaFile(self, filename: str) -> None:
        ...
    def SetExistingPartAttributes(self, logicalObject: PDM.LogicalObject, existingPartCliSpec: str) -> None:
        ...
    def ValidateLogicalObjects(self) -> None:
        ...
    def UpdateTeamcenterInformation(self, logicalObjects: typing.List[PDM.LogicalObject]) -> None:
        ...
    def OnCancel(self) -> None:
        ...
    AddCAENonMastersToImport: bool
    AddDfaMixins: bool
    AssignAlternateIds: bool
    AssociatedFilesRootDirectory: str
    ConversionType: PDM.PartOperationImportBuilder.ConversionRule
    DefaultAction: PDM.PartOperationImportBuilder.ExistingPartAction
    DefaultAlternateIdContext: str
    DefaultAlternateIdType: str
    DefaultDescription: str
    DefaultItemType: str
    DefaultName: str
    DefaultOwningGroup: str
    DefaultOwningUser: str
    IncludeComponentParts: bool
    IncludeDependentParts: bool
    NumberAttr: str
    NumberingSource: PDM.PartOperationImportBuilder.NumberingSourceOption
    OutputLogFile: str
    PrefixStr: str
    ProductInterfaces: bool
    PublishOptionalInfo: bool
    ReplaceWithStr: str
    RevisionAttr: str
    StringToReplace: str
    SuffixStr: str
    SyncArrangements: bool
    UseItemTypeFromPartFile: bool
    ValidationAbortImportOnFail: bool
    ValidationMode: PDM.PartOperationImportBuilder.Validation
    ValidationRuleSetBrowseOption: PDM.PartOperationImportBuilder.ValidationRuleSetFileBrowseOption
    ValidationRuleSetFile: str
    ValidationTreatOutdatedAsPass: bool
    ValidationTreatWarningAsPass: bool


    class ValidationRuleSetFileBrowseOption(enum.Enum):
        Native = 0
        Teamcenter = 1
    

    class Validation(enum.Enum):
        Off = 0
        ImportFromPart = 1
        RunValidation = 2
        RunValidationHybrid = 3
        Default = 4
    

    class NumberingSourceOption(enum.Enum):
        PartIDGenerator = 0
        OSFilename = 1
        Attribute = 2
    

    class ExistingPartAction(enum.Enum):
        Overwrite = 0
        UseExisting = 1
        NewRevision = 2
        Default = 3
    

    class ConversionRule(enum.Enum):
        AsID = 0
        AsIDandRevision = 1
        WithPrefix = 2
        WithSuffix = 3
        WithReplaceString = 4
    

class PartOperationCreateBuilder(PDM.PartOperationBuilder):
    def __init__(self) -> None: ...
    def SetItemType(self, itemType: str) -> None:
        ...
    def SetModelType(self, modelType: str) -> None:
        ...
    def SetMasterPart(self, masterPart: BasePart) -> None:
        ...
    def GetOperationSubType(self) -> PDM.PartOperationCreateBuilder.OperationSubType:
        ...
    def SetOperationSubType(self, operatioSubType: PDM.PartOperationCreateBuilder.OperationSubType) -> None:
        ...
    def SetAddMaster(self, addMaster: bool) -> None:
        ...
    def SetPartsToRename(self, partsToRename: typing.List[BasePart]) -> None:
        ...
    def GetAddMaster(self) -> bool:
        ...
    def SetPartSpecToOpen(self, partSpecToOpen: str) -> None:
        ...


    class OperationSubType(enum.Enum):
        FromTemplate = 0
        SelectTemplate = 1
        Rename = 2
        CreateSpecification = 3
    

class PartOperationCopyBuilder(PDM.PartOperationBuilder):
    def __init__(self) -> None: ...
    def SetSelectedPartsToCopy(self, selectedParts: typing.List[BasePart], failedParts: typing.List[BasePart]) -> None:
        ...
    def AddRelatedPartsToCopy(self, basePart: BasePart, relatedParts: typing.List[BasePart], relatedPartsReasons: str, operation: PDM.PartOperationBuilder.OperationType) -> None:
        ...
    def CreateNonMasterListForCopyLogicalObject(self, logicalObject: PDM.LogicalObject) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.PDM.NonMasterData.CreateNonMasterListForLogicalObject instead")"""
        ...
    def GetNonMasterListForCopyLogicalObject(self, logicalObject: PDM.LogicalObject) -> str:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.PDM.NonMasterData.GetNonMasterListForCopyLogicalObject instead")"""
        ...
    def IsNonMasterForLogicalObjectBeingCopied(self, logicalObject: PDM.LogicalObject, partName: str) -> bool:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.PDM.NonMasterData.IsNonMasterForLogicalObjectBeingCopied instead")"""
        ...
    def GetCopyNonMasterPartsOption(self, logicalObject: PDM.LogicalObject) -> PDM.PartOperationCopyBuilder.CopyNonMasterParts:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.PDM.NonMasterData.GetCopyNonMasterPartsOption instead")"""
        ...
    def SetCopyNonMasterPartsOption(self, logicalObject: PDM.LogicalObject, saveOption: PDM.PartOperationCopyBuilder.CopyNonMasterParts) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.PDM.NonMasterData.SetNonMasterSaveAsOption instead")"""
        ...
    def SetSelectedNonMasterToCopy(self, logicalObject: PDM.LogicalObject, partName: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.PDM.NonMasterData.SetSelectedNonMasterToCopy instead")"""
        ...
    def EditNonMasterToCopyName(self, logicalObject: PDM.LogicalObject, oldName: str, newName: str) -> bool:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.PDM.NonMasterData.EditNonMasterToCopyName instead")"""
        ...
    def GetOperationSubType(self) -> PDM.PartOperationCopyBuilder.OperationSubType:
        ...
    def SetOperationSubType(self, operationSubType: PDM.PartOperationCopyBuilder.OperationSubType) -> None:
        ...
    def GetSourcePartFromLogicalObject(self, logicalObject: PDM.LogicalObject) -> Part:
        ...
    DependentFilesToCopyOption: PDM.PartOperationCopyBuilder.CopyDependentFiles
    ReplaceAllComponentsInSession: bool


    class OperationSubType(enum.Enum):
        Default = 0
        MakeUnique = 1
    

    class CopyNonMasterParts(enum.Enum):
        All = 0
        None = 1
    

    class CopyDependentFiles(enum.Enum):
        All = 0
        None = 1
    

class PartOperationBuilder(Builder):
    def __init__(self) -> None: ...
    def CreateLogicalObjects(self, logicalObjects: typing.List[PDM.LogicalObject]) -> None:
        ...
    def GetDialogOperation(self) -> PDM.PartOperationBuilder.OperationType:
        ...
    def SetDialogOperation(self, dialogOperation: PDM.PartOperationBuilder.OperationType) -> None:
        ...
    def GetOperationFailures(self) -> ErrorList:
        """[Obsolete("Deprecated in NX12.0.0.  Use NXOpen.PDM.PartOperationBuilder.GetErrorMessageHandler instead")"""
        ...
    def GetAlternateIDManager(self, logicalObject: PDM.LogicalObject) -> PDM.AlternateIdManager:
        ...
    def CreateSpecificationsForLogicalObjects(self, logicalObjects: typing.List[PDM.LogicalObject]) -> None:
        ...
    def ValidateLogicalObjectsToCommit(self) -> None:
        ...
    def SetSelectedParts(self, selectedParts: typing.List[BasePart], failedParts: typing.List[BasePart]) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder.SetSelectedPartsToCopy instead")"""
        ...
    def AddRelatedPartToOperate(self, basePart: BasePart, relatedParts: typing.List[BasePart], relatedPartsReasons: str, operation: PDM.PartOperationBuilder.OperationType) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder.AddRelatedPartsToCopy instead")"""
        ...
    def CreateNonMasterListForLogicalObject(self, logicalObject: PDM.LogicalObject) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder.CreateNonMasterListForCopyLogicalObject instead")"""
        ...
    def SetNonMasterSaveAsOption(self, logicalObject: PDM.LogicalObject, saveOption: PDM.PartOperationBuilder.NonMasterSaveAs) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder.SetCopyNonMasterPartsOption instead")"""
        ...
    def SetSelectedNonMasterToSaveAs(self, logicalObject: PDM.LogicalObject, partName: str) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder.SetSelectedNonMasterToCopy instead")"""
        ...
    def GetNonMasterList(self, logicalObject: PDM.LogicalObject) -> str:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder.GetNonMasterListForCopyLogicalObject instead")"""
        ...
    def IsNonMasterBeingCopied(self, logicalObject: PDM.LogicalObject, partName: str) -> bool:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder.IsNonMasterForLogicalObjectBeingCopied instead")"""
        ...
    def GetNonMasterCopyOption(self, logicalObject: PDM.LogicalObject) -> PDM.PartOperationBuilder.NonMasterSaveAs:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder.GetCopyNonMasterPartsOption instead")"""
        ...
    def EditNonMasterName(self, logicalObject: PDM.LogicalObject, oldName: str, newName: str) -> bool:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder.EditNonMasterToCopyName instead")"""
        ...
    def ClearWarnings(self) -> None:
        ...
    def GetErrorMessageHandler(self, refresh: bool) -> PDM.ErrorMessageHandler:
        ...
    def AutoAssignAttributes(self, objects: typing.List[NXObject]) -> ErrorList:
        ...
    def AutoAssignAttributesWithNamingPattern(self, objects: typing.List[NXObject], properties: typing.List[NXObject]) -> ErrorList:
        ...
    def CreateAttributeTitleToNamingPatternMap(self, attributeTitles: str, titlePatterns: str) -> NXObject:
        ...
    DefaultDestinationFolder: str
    DependentFileSaveAsOption: PDM.PartOperationBuilder.DependentFileSaveAs
    ReplaceAllComponents: bool


    class OperationType(enum.Enum):
        SaveAs = 0
        Revise = 1
        Create = 2
        Import = 3
    

    class NonMasterSaveAs(enum.Enum):
        All = 0
        None = 1
    

    class DependentFileSaveAs(enum.Enum):
        All = 0
        None = 1
    

class PartOperationAttributePropertiesBuilder(AttributePropertiesBuilder):
    def __init__(self) -> None: ...
    def CreateOrModifyAttribute(self) -> bool:
        ...
    ReferenceObject: PDM.LogicalObject


class PartManager(Utilities.NXRemotableObject):
    def __init__(self, owner: PartCollection) -> None: ...
    def NewPartFromTemplateBuilder(self) -> PDM.PartFromTemplateBuilder:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCreateBuilder instead.")"""
        ...
    def NewPartFromPartBuilder(self) -> PDM.PartFromPartBuilder:
        ...
    def NewPendingComponentsManager(self, part: BasePart) -> PDM.PendingComponentsManager:
        ...
    def GetCaeCloneManager(self, part: BasePart) -> PDM.CaeCloneManager:
        ...
    def Tag(self) -> Tag: ...



class PartFromTemplateBuilder(PDM.PartBuilder):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def SetSeedPart(self, seedName: str) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use PDM.PartOperationCreateBuilder instead.")"""
        ...
    def Commit(self) -> BasePart:
        """[Obsolete("Deprecated in NX10.0.0.  Use PDM.PartOperationCreateBuilder instead.")"""
        ...
    def Commit(self, setAsDisplayPart: bool) -> BasePart:
        """[Obsolete("Deprecated in NX10.0.0.  Use PDM.PartOperationCreateBuilder instead.")"""
        ...


class PartFromPartBuilder(PDM.PartBuilder):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def CreateNonmasterList(self) -> None:
        ...
    def GetNonmasterList(self) -> str:
        ...
    def GetNonmasterToSaveAs(self, partName: str) -> bool:
        ...
    def SetNonmasterToSaveAs(self, partName: str, doSaveAs: bool) -> None:
        ...
    def EditNonmasterNameToSaveAs(self, oldName: str, newName: str) -> bool:
        ...
    def Commit(self) -> None:
        ...
    DependentFileSaveAsOption: PDM.PartFromPartBuilder.FileSaveAs
    NonmasterSaveAsOption: PDM.PartFromPartBuilder.FileSaveAs


    class FileSaveAs(enum.Enum):
        Some = 0
        All = 1
        None = 2
    

class PartCreationObjectAttributePropertiesBuilder(AttributePropertiesBaseBuilder):
    def __init__(self) -> None: ...


class PartCreationObject(NXObject):
    def __init__(self) -> None: ...
    def CreateAttributePropertiesBuilder(self) -> PDM.PartCreationObjectAttributePropertiesBuilder:
        """[Obsolete("Deprecated in NX8.5.0.  Use AttributeManager.CreateAttributePropertiesBuilder instead.")"""
        ...


class PartBuilder(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def CreatePartSpec(self, partType: str, partNumber: str, partRevision: str, partFileType: str, partFileName: str) -> None:
        ...
    def NewDatabaseAttributeManager(self) -> PDM.DatabaseAttributeManager:
        ...
    def CreatePartCreationObject(self) -> PDM.PartCreationObject:
        ...
    def NewAlternateIdManager(self) -> PDM.AlternateIdManager:
        ...
    def AssignPartNumber(self, partType: str) -> str:
        ...
    def AssignPartRevision(self) -> str:
        ...
    def AssignPartFileName(self, partFileType: str) -> str:
        ...
    def AssignPartNumber(self, oldPartNumber: str, partType: str) -> PDM.PartBuilder.PartNumberData:
        ...
    def AssignPartRevision(self, overload: int) -> PDM.PartBuilder.PartRevisionData:
        ...
    def AssignPartFileName(self, partNumber: str, partRevision: str, partFileNameType: str, oldPartFileName: str) -> PDM.PartBuilder.PartFileNameData:
        ...
    def SetAssignPartNumber(self, partNumber: str) -> None:
        ...
    def SetAssignPartType(self, partType: str) -> None:
        ...
    def SetContextOperation(self, operation: PDM.PartBuilder.Operation) -> None:
        ...


    class PartBuilderPartRevisionData():
        PartRevision: str
        PartRevisionModifiable: bool
        def ToString(self) -> str:
            ...
        def __init__(self, PartRevision: str, PartRevisionModifiable: bool) -> None: ...
    

    class PartBuilderPartNumberData():
        PartName: str
        PartNameModifiable: bool
        PartDescription: str
        PartDescriptionModifiable: bool
        PartNumber: str
        PartNumberModifiable: bool
        def ToString(self) -> str:
            ...
    

    class PartBuilderPartFileNameData():
        PartFileName: str
        PartFileNameModifiable: bool
        def ToString(self) -> str:
            ...
        def __init__(self, PartFileName: str, PartFileNameModifiable: bool) -> None: ...
    

    class Operation(enum.Enum):
        ExportPartNew = 0
        AssemblyDiagram = 1
        AssemblyCreateNewComponent = 2
        Default = 3
    

class OrderedElementGroup(NXObject):
    def __init__(self) -> None: ...


class OperationErrors(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...


class ObjectCreateBuilder(Builder):
    def __init__(self) -> None: ...
    def SetTypes(self, tcTypes: str, baseTCTypes: str) -> None:
        ...
    def CreateLogicalObjects(self, logicalObjects: typing.List[PDM.LogicalObject]) -> None:
        ...
    def GetAttributeHolderObjects(self, attributeHolderObjects: typing.List[PDM.GenericObjectAttributeHolder]) -> None:
        ...
    def AutoAssignAttributes(self, objects: typing.List[NXObject]) -> ErrorList:
        ...
    def AutoAssignAttributesWithNamingPattern(self, objects: typing.List[NXObject], properties: typing.List[NXObject]) -> ErrorList:
        ...
    def CreateAttributeTitleToNamingPatternMap(self, attributeTitles: str, titlePatterns: str) -> NXObject:
        ...
    DefaultDestinationFolder: str


class NonMasterData(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def CreateNonMasterListForLogicalObject(self, logicalObject: PDM.LogicalObject) -> None:
        ...
    def GetNonMasterListForCopyLogicalObject(self, logicalObject: PDM.LogicalObject) -> str:
        ...
    def IsNonMasterForLogicalObjectBeingCopied(self, logicalObject: PDM.LogicalObject, partName: str) -> bool:
        ...
    def GetCopyNonMasterPartsOption(self, logicalObject: PDM.LogicalObject) -> PDM.NonMasterData.CopyNonMasterPartsOption:
        ...
    def SetNonMasterSaveAsOption(self, logicalObject: PDM.LogicalObject, saveOption: PDM.NonMasterData.CopyNonMasterPartsOption) -> None:
        ...
    def SetSelectedNonMasterToCopy(self, logicalObject: PDM.LogicalObject, partName: str) -> None:
        ...
    def EditNonMasterToCopyName(self, logicalObject: PDM.LogicalObject, oldName: str, newName: str) -> bool:
        ...


    class CopyNonMasterPartsOption(enum.Enum):
        All = 0
        None = 1
    

class NativePartLogicalObject(PDM.LogicalObject):
    def __init__(self) -> None: ...
    def GetInitialName(self) -> str:
        ...
    def GetFinalName(self) -> str:
        ...
    def IsPartNameAutoAssigned(self) -> bool:
        ...
    def IsCandidateForImport(self) -> bool:
        ...
    def GetExistingPartAction(self) -> PDM.PartOperationImportBuilder.ExistingPartAction:
        ...
    def SetExistingPartAction(self, existingPartAction: PDM.PartOperationImportBuilder.ExistingPartAction) -> None:
        ...
    def GetValidationMode(self) -> PDM.PartOperationImportBuilder.Validation:
        ...
    def SetValidationMode(self, validationMode: PDM.PartOperationImportBuilder.Validation) -> None:
        ...
    def GetValidationRuleSetFileBrowseOption(self) -> PDM.PartOperationImportBuilder.ValidationRuleSetFileBrowseOption:
        ...
    def SetValidationRuleSetFileBrowseOption(self, browseOption: PDM.PartOperationImportBuilder.ValidationRuleSetFileBrowseOption) -> None:
        ...


class ModelElementRevision(NXObject):
    def __init__(self) -> None: ...
    def GetMemberPartitions(self) -> typing.List[Assemblies.Partition]:
        ...
    def GetOverridePart(self) -> Part:
        ...
    def IsExcludedFromSpatialSearch(self) -> bool:
        ...
    def SetExcludeFromSpatialSearch(self, excludeFromSpatialSearch: bool) -> None:
        ...
    def GetPositionStatus(self) -> PDM.ModelElementRevision.PositioningStatus:
        ...
    def IsAbsolutelyPositioned(self) -> bool:
        ...
    def GetPositioningGroups(self) -> typing.List[Assemblies.PositioningGroup]:
        ...
    def IsMemberOfPositioningGroup(self) -> bool:
        ...
    def Create(self, attributeGroupDescription: PDM.AttributeGroupDescription) -> PDM.AttributeGroup:
        ...
    def CreateAttributeGroupReviseBuilder(self, attributeGroups: typing.List[PDM.AttributeGroup]) -> PDM.AttributeGroupReviseBuilder:
        ...
    def GetAttributeGroups(self) -> typing.List[PDM.AttributeGroup]:
        ...
    def GetAttributeGroupDescriptions(self) -> typing.List[PDM.AttributeGroupDescription]:
        ...
    def CreateAttributeGroupReviseBuilder(self, attributeGroups: typing.List[PDM.AttributeGroup], keepOriginal: bool, saveAsActionType: PDM.AttributeGroupReviseBuilder.SaveAsActionType) -> PDM.AttributeGroupReviseBuilder:
        ...
    EffectivityFormula: str
    OwningCollaborativeDesign: CollaborativeDesign


    class PositioningStatus(enum.Enum):
        AbsolutelyPositioned = 0
        OutOfDate = 1
        UpToDate = 2
        Unknown = 3
    

class ModelElement(NXObject):
    def __init__(self) -> None: ...
    def GetMemberPartitions(self) -> typing.List[Assemblies.Partition]:
        ...
    def Create(self, attributeGroupDescription: PDM.AttributeGroupDescription) -> PDM.AttributeGroup:
        ...
    def CreateAttributeGroupReviseBuilder(self, attributeGroups: typing.List[PDM.AttributeGroup]) -> PDM.AttributeGroupReviseBuilder:
        ...
    def GetAttributeGroups(self) -> typing.List[PDM.AttributeGroup]:
        ...
    def GetAttributeGroupDescriptions(self) -> typing.List[PDM.AttributeGroupDescription]:
        ...
    def CreateAttributeGroupReviseBuilder(self, attributeGroups: typing.List[PDM.AttributeGroup], keepOriginal: bool, saveAsActionType: PDM.AttributeGroupReviseBuilder.SaveAsActionType) -> PDM.AttributeGroupReviseBuilder:
        ...
    OwningCollaborativeDesign: CollaborativeDesign


class LogicalObject(NXObject):
    def __init__(self) -> None: ...


class LogicalElementRevision(PDM.ConditionalElementRevision):
    def __init__(self) -> None: ...


class ListOfValues(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...


class IAttributeGroupOwner():
    def Create(self, attributeGroupDescription: PDM.AttributeGroupDescription) -> PDM.AttributeGroup:
        ...
    def CreateAttributeGroupReviseBuilder(self, attributeGroups: typing.List[PDM.AttributeGroup]) -> PDM.AttributeGroupReviseBuilder:
        ...
    def GetAttributeGroups(self) -> typing.List[PDM.AttributeGroup]:
        ...
    def GetAttributeGroupDescriptions(self) -> typing.List[PDM.AttributeGroupDescription]:
        ...
    def CreateAttributeGroupReviseBuilder(self, attributeGroups: typing.List[PDM.AttributeGroup], keepOriginal: bool, saveAsActionType: PDM.AttributeGroupReviseBuilder.SaveAsActionType) -> PDM.AttributeGroupReviseBuilder:
        ...


class GenericObjectAttributeHolder(NXObject):
    def __init__(self) -> None: ...


class FindCriteria(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def SetCriteria(self, queryName: str, entries: str, values: str) -> None:
        ...
    def GetCriteria(self, queryName: str, entries: str, values: str) -> None:
        ...


class FileManagement(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def ImportFiles(self, itemIds: str, itemRevisionIds: str, datasetNames: str, datasetTypeNames: str, datasetRelationTypeNames: str, importDirectoryNames: str) -> int:
        ...
    def ExportFiles(self, itemIds: str, itemRevisionIds: str, datasetNames: str, datasetTypeNames: str, datasetRelationTypeNames: str, baseDirectoryNames: str, toolNames: str, exportDirectoryNames: str) -> int:
        ...
    def GetAssociatedFiles(self, parts: typing.List[BasePart], fileTypesToExclude: typing.List[PDM.FileManagement.FileType]) -> typing.List[PDM.PdmFile]:
        ...
    def DownloadAssociatedFiles(self, parts: typing.List[BasePart], files: typing.List[PDM.PdmFile]) -> None:
        ...
    def ImportFilesAndCreateDatasets(self, itemIds: str, itemRevisionIds: str, datasetNames: str, datasetTypeNames: str, datasetRelationTypeNames: str, datasetToolNames: str, fileType: bool, namedReferenceNames: str, importFileNames: str, importFileDirectoryNames: str) -> int:
        ...


    class FileType(enum.Enum):
        CmmDmi = 0
        CpdFeaturePart = 1
        CpdGeometryOverride = 2
        DirectModel = 3
        Excel = 4
        ExcelX = 5
        Image = 6
        Jpeg = 7
        NxAttachedPart = 8
        NxPart = 9
        NxPosBin = 10
        NxleSymbolXml = 11
        NxleSymbolPreview = 12
        Preview2d = 13
        Preview3d = 14
        QafBinary = 15
        QafText = 16
        RoutePipeRun = 17
        RoutePipeSpec = 18
        RoutePipeRunAttachment = 19
        Text = 20
        Tif = 21
        TrushapeData = 22
        ValidationRuleSet = 23
    

class ExportWorksetForReferenceBuilder(Builder):
    def __init__(self) -> None: ...
    def GetObjects(self, objects: typing.List[NXObject]) -> None:
        ...
    def ValidateObjects(self) -> ErrorList:
        ...
    def AutoAssignAttributes(self, objects: typing.List[NXObject]) -> ErrorList:
        ...
    def AutoAssignAttributesWithNamingPattern(self, objects: typing.List[NXObject], properties: typing.List[NXObject]) -> ErrorList:
        ...
    def CreateAttributeTitleToNamingPatternMap(self, attributeTitles: str, titlePatterns: str) -> NXObject:
        ...
    DestinationFolder: str


class ErrorMessageHandler(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def GetErrorList(self) -> ErrorList:
        ...
    def GetErrorMessages(self) -> str:
        ...
    def GetWarningMessages(self) -> str:
        ...


class ElementGroup(PDM.ConditionalElementRevision):
    def __init__(self) -> None: ...


class EffectivityTableRow(NXObject):
    def __init__(self) -> None: ...


class EffectivityTableBuilder(TaggedObject):
    def __init__(self) -> None: ...
    def GetEffectivityRows(self, effectivityRows: typing.List[PDM.EffectivityTableRow]) -> None:
        ...
    def CreateNewEffectivityRow(self) -> PDM.EffectivityTableRow:
        ...
    def AddEffectivityRow(self, effectivityRow: PDM.EffectivityTableRow) -> None:
        ...
    def RemoveEffectivityRows(self, effectivityRows: typing.List[PDM.EffectivityTableRow]) -> None:
        ...
    def UpdateBuilderDetails(self, cd: CollaborativeDesign, validationBasisFormula: str, effectivityFormulae: str) -> None:
        ...
    def Commit(self) -> None:
        ...
    def Validate(self) -> bool:
        ...


class EffectivityAttributePropertiesBuilder(Builder):
    def __init__(self) -> None: ...
    def Delete(self, object: NXObject) -> None:
        ...
    def CreateAttribute(self) -> bool:
        ...
    def SetAttributeObjects(self, objects: typing.List[NXObject]) -> None:
        ...
    Category: str
    DisplayValue: str
    EffectivityTableBuilder: PDM.EffectivityTableBuilder
    SelectedObjects: SelectNXObjectList
    StringValue: str
    Title: str


class DesignSubordinateRevision(PDM.ModelElementRevision):
    def __init__(self) -> None: ...
    DesignPart: Part
    Modified: bool
    RootDesignElementRevision: PDM.DesignElementRevision


class DesignFeatureRevision(PDM.ModelElementRevision):
    def __init__(self) -> None: ...


class DesignElementRevision(PDM.ModelElementRevision):
    def __init__(self) -> None: ...
    def GetTransform(self, positionInMeters: Point3d) -> Matrix3x3:
        ...
    def GetDesignSubordinateRevisions(self) -> typing.List[PDM.DesignSubordinateRevision]:
        ...
    Category: PDM.DesignElementRevision.DesignElementCategory
    DesignPart: Part
    Modified: bool


    class DesignElementCategory(enum.Enum):
        Shape = 0
        Reuse = 1
        Promissory = 2
        DesignControlElement = 3
    

class DBEntityProxyCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[PDM.DBEntityProxy]:
        ...
    def __init__(self, owner: Part) -> None: ...
    def __init__(self) -> None: ...
    def FindProxy(self, journalIdentifier: str) -> NXObject:
        ...
    def CreateDbEntityProxy(self, title: str, index: int, context: TaggedObject, attributeOwner: TaggedObject) -> PDM.DBEntityProxy:
        ...
    def Tag(self) -> Tag: ...



class DBEntityProxy(NXObject):
    def __init__(self) -> None: ...


class DatabaseObjects(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def SetDatabaseObjects(self, databaseObjects: typing.List[PDM.DatabaseObject]) -> None:
        ...
    def GetDatabaseObjects(self) -> typing.List[PDM.DatabaseObject]:
        ...
    def Append(self, databaseObjects: typing.List[PDM.DatabaseObjects]) -> None:
        ...


class DatabaseObjectManager(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def NewFindcriteria(self, nCriteria: int) -> typing.List[PDM.FindCriteria]:
        ...
    def NewDatabaseobjects(self) -> PDM.DatabaseObjects:
        ...
    def FindObjects(self, findCriterias: typing.List[PDM.FindCriteria]) -> typing.List[PDM.DatabaseObjects]:
        ...


class DatabaseObject(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...


class DatabaseAttributeManager(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def SetAttribute(self, attributeTitle: str, attributeValue: str) -> None:
        ...
    def GetAttribute(self, attributeTitle: str) -> str:
        ...
    def StoreAttributes(self) -> None:
        ...
    def RefreshAttributes(self) -> None:
        ...
    def LoadAttributes(self, reload: bool) -> None:
        ...
    def LoadAttributesRecursively(self, reload: bool) -> None:
        ...


class CustomWebAppMenuHandler(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def RegisterCustomWebAppInvokedCallback(self, webappCb: PDM.CustomWebAppMenuHandler.CustomWebAppInvokedCallback) -> None:
        ...
    def GetSelectedUids(self, uids: str) -> None:
        ...
    def GetCommandName(self) -> str:
        ...


    

class CrossSheetReference(PDM.ModelElement):
    def __init__(self) -> None: ...


class ConnectionElementRevision(PDM.ConditionalElementRevision):
    def __init__(self) -> None: ...


class ConfigurationManager(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def CreateConfigurationContextBuilder(self) -> PDM.ConfigurationContextBuilder:
        ...
    def CreateEffectivityAttributePropertiesBuilder(self, part: BasePart, objects: typing.List[NXObject]) -> PDM.EffectivityAttributePropertiesBuilder:
        ...
    def Tag(self) -> Tag: ...



class ConfigurationContextBuilder(Builder):
    def __init__(self) -> None: ...
    CollaborativeDesign: CollaborativeDesign
    ConfigDetail: PDM.ConfigurationContextBuilder.ConfigurationDetail
    ConfigMode: PDM.ConfigurationContextBuilder.ConfigContextMode
    ConfigType: PDM.ConfigurationContextBuilder.ConfigContextType
    ContentDefinition: ContentDefinition
    EffectivityTable: PDM.EffectivityTableBuilder
    OverrideFolder: str
    RevisionRule: str
    VariantConfiguration: PDM.VariantConfigurationBuilder


    class ConfigurationDetail(enum.Enum):
        LoadfromTeamcenter = 0
        DefineinNX = 1
    

    class ConfigContextType(enum.Enum):
        AsSaved = 0
        PushedfromTeamcenter = 1
        DefineorLoadContext = 2
    

    class ConfigContextMode(enum.Enum):
        Nx4gd = 0
        Assemblies = 1
    

class ConditionalElementRevision(PDM.ModelElement):
    def __init__(self) -> None: ...
    EffectivityFormula: str


class CAEFileContainer(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def GetOwningPart(self) -> str:
        ...
    def SetOwningPart(self, partspec: str) -> None:
        ...
    def AddFile(self, datasetname: str, filename: str) -> None:
        ...
    def DeleteFile(self, datasetname: str, filename: str) -> None:
        ...
    def DoUpload(self) -> None:
        ...


class CaeCloneManager(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder instead..")"""
        ...
    def GetPartBuilderForClone(self, option: PDM.CaeCloneManager.CloneOption) -> PDM.PartFromPartBuilder:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder instead..")"""
        ...
    def SetIncludeMaster(self, value: bool) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder instead..")"""
        ...
    def GetContainer(self, option: PDM.CaeCloneManager.CloneOption) -> str:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder instead..")"""
        ...
    def SetContainer(self, option: PDM.CaeCloneManager.CloneOption, container: str) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder instead..")"""
        ...
    def CommitClone(self) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use NXOpen.PDM.PartOperationCopyBuilder instead..")"""
        ...


    class CloneOption(enum.Enum):
        None = -1
        Sim = 0
        Fem = 1
        Ideal = 2
        Master = 3
    

class AttributeGroupReviseBuilder(Builder):
    def __init__(self) -> None: ...
    def GetRevisedAttributeGroups(self) -> typing.List[PDM.AttributeGroup]:
        ...
    def GetOperationErrors(self) -> PDM.OperationErrors:
        ...
    def GetOperationFailures(self) -> ErrorList:
        ...
    def GetLogicalObjects(self) -> typing.List[PDM.LogicalObject]:
        ...


    class SaveAsActionType(enum.Enum):
        NewRevision = 0
        NewAttributeGroup = 1
    

class AttributeGroupDescriptionCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[PDM.AttributeGroupDescription]:
        ...
    def __init__(self, owner: PDM.PdmSession) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, journalIdentifier: str) -> PDM.AttributeGroupDescription:
        ...
    def Tag(self) -> Tag: ...



class AttributeGroupDescription(NXObject):
    def __init__(self) -> None: ...
    DisplayName: str
    MaximumNumberOfAttributeGroupsAllowed: int
    MinimumNumberOfAttributeGroupsAllowed: int


class AttributeGroupCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[PDM.AttributeGroup]:
        ...
    def __init__(self, owner: CollaborativeDesign) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, journalIdentifier: str) -> PDM.AttributeGroup:
        ...
    def Tag(self) -> Tag: ...



class AttributeGroup(NXObject):
    def __init__(self) -> None: ...
    def GetReferencingAttributeGroupOwners(self) -> typing.List[PDM.IAttributeGroupOwner]:
        ...
    def DetachAttributeGroup(self, attributeGroupOwner: PDM.IAttributeGroupOwner) -> None:
        ...
    def Create(self, attributeGroupDescription: PDM.AttributeGroupDescription) -> PDM.AttributeGroup:
        ...
    def CreateAttributeGroupReviseBuilder(self, attributeGroups: typing.List[PDM.AttributeGroup]) -> PDM.AttributeGroupReviseBuilder:
        ...
    def GetAttributeGroups(self) -> typing.List[PDM.AttributeGroup]:
        ...
    def GetAttributeGroupDescriptions(self) -> typing.List[PDM.AttributeGroupDescription]:
        ...
    def CreateAttributeGroupReviseBuilder(self, attributeGroups: typing.List[PDM.AttributeGroup], keepOriginal: bool, saveAsActionType: PDM.AttributeGroupReviseBuilder.SaveAsActionType) -> PDM.AttributeGroupReviseBuilder:
        ...
    DisplayName: str


class AlternateIdManager(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def SetContext(self, context: str) -> None:
        ...
    def GetContext(self) -> str:
        ...
    def GetAllContexts(self) -> str:
        ...
    def SetIdType(self, idType: str) -> None:
        ...
    def GetIdType(self) -> str:
        ...
    def GetAllIdTypes(self, context: str) -> str:
        ...
    def SetAlternateItemId(self, alternateItemId: str) -> None:
        ...
    def AssignAlternateId(self, alternateItemId: str, alternateRevId: str) -> None:
        ...
    def GetAlternateItemId(self) -> str:
        ...
    def SetAlternateRevId(self, alternateRevId: str) -> None:
        ...
    def AssignAlternateRevId(self) -> str:
        ...
    def GetAlternateRevId(self) -> str:
        ...
    def SetAlternateName(self, alternateName: str) -> None:
        ...
    def GetAlternateName(self) -> str:
        ...
    def SetAlternateDescription(self, alternateDescription: str) -> None:
        ...
    def GetAlternateDescription(self) -> str:
        ...
    def SetAlternateIdAsDefaultIndentifier(self, alternateIdAsDefaultIndentifier: bool) -> None:
        ...
    def GetAlternateIdAsDefaultIndentifier(self) -> bool:
        ...
    def SetAlternateIdInformation(self, context: str, idType: str, alternateItemId: str, alternateRevId: str, alternateName: str, alternateDescription: str, alternateIdAsDefaultIndentifier: bool) -> None:
        ...
    def CreateAlternateIdInformation(self) -> None:
        ...
    def AssignAlternateIds(self, context: str, idType: str) -> PDM.AlternateIdManager.AlternateIdsData:
        ...
    def AssignAlternateRevision(self) -> PDM.AlternateIdManager.AssignAlternateRevData:
        ...


    class AlternateIdManagerAssignAlternateRevData():
        AlternateRevId: str
        Modifiable: bool
        def ToString(self) -> str:
            ...
        def __init__(self, AlternateRevId: str, Modifiable: bool) -> None: ...
    

    class AlternateIdManagerAlternateIdsData():
        AlternateItemId: str
        AlternateRevId: str
        AlternateName: str
        AlternateDescription: str
        Modifiable: bool
        def ToString(self) -> str:
            ...
    

