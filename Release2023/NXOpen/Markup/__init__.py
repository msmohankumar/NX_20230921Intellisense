from ...NXOpen import *
from ..Markup import *

import typing
import enum

class Text(Markup.Element):
    def __init__(self) -> None: ...
    def Get2DLocation(self) -> Point2d:
        ...
    def Set2DLocation(self, location: Point2d) -> None:
        ...
    IncludeLabels: bool


    class ScaleOptions(enum.Enum):
        One = 0
        Two = 1
        Three = 2
        Four = 3
        Five = 4
    

class Rectangle(Markup.Element):
    def __init__(self) -> None: ...
    def GetCenterLengthAndWidth(self, center: Point3d, length: float, width: float) -> None:
        ...
    def SetCenterLengthAndWidth(self, center: Point3d, length: float, width: float) -> None:
        ...


class Polyline(Markup.Element):
    def __init__(self) -> None: ...
    def GetPoints(self, points: typing.List[Point3d]) -> None:
        ...
    def SetPoints(self, points: typing.List[Point3d]) -> None:
        ...
    LineType: Markup.Polyline.LineOption


    class LineOption(enum.Enum):
        Line = 0
        Spline = 1
    

class Polygon(Markup.Polyline):
    def __init__(self) -> None: ...


class NamespaceDoc(System.Object):
    def __init__(self) -> None: ...


class MarkupCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Markup.Markup]:
        ...
    def __init__(self, owner: BasePart) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, id: str) -> Markup.Markup:
        ...
    def CreateMarkup(self) -> Markup.Markup:
        ...
    def CreateMarkup(self, markupName: str) -> Markup.Markup:
        ...
    def MakeActive(self, layer: Markup.Markup) -> None:
        ...
    def MakeInactive(self, layer: Markup.Markup) -> None:
        ...
    def GetActive(self) -> Markup.Markup:
        ...
    def CreateMarkupBuilder(self, layer: Markup.Markup) -> Markup.MarkupBuilder:
        ...
    def Tag(self) -> Tag: ...



class MarkupBuilder(Builder):
    def __init__(self) -> None: ...
    Active: bool
    CaptureView: bool
    MarkupName: str


class Markup(DisplayableObject):
    def __init__(self) -> None: ...
    def GetElements(self) -> typing.List[Markup.Element]:
        ...
    def HideElements(self) -> None:
        ...
    def ShowElements(self) -> None:
        ...
    def HasCapturedView(self) -> bool:
        ...
    def CaptureView(self) -> None:
        ...
    def ApplyView(self) -> None:
        ...
    def DeleteView(self) -> None:
        ...
    def IsActive(self) -> bool:
        ...
    Elements: Markup.ElementCollection


class Line(Markup.Element):
    def __init__(self) -> None: ...
    def GetEndpoints(self, startPoint: Point3d, endPoint: Point3d) -> None:
        ...
    def SetEndpoints(self, startPoint: Point3d, endPoint: Point3d) -> None:
        ...


class InsetImage(Markup.Element):
    def __init__(self) -> None: ...


class Icon(Markup.Element):
    def __init__(self) -> None: ...
    IconName: str
    IconSize: Markup.Icon.Size


    class Size(enum.Enum):
        ExtraSmall = 0
        Small = 1
        Medium = 2
        Large = 3
    

class Freehand(Markup.Element):
    def __init__(self) -> None: ...
    def GetPoints(self, points: typing.List[Point3d]) -> None:
        ...
    def SetPoints(self, points: typing.List[Point3d]) -> None:
        ...


class Ellipse(Markup.Element):
    def __init__(self) -> None: ...
    def GetCenterAndRadius(self, center: Point3d, majorRadius: float, minorRadius: float) -> None:
        ...
    def SetCenterAndRadius(self, center: Point3d, majorRadius: float, minorRadius: float) -> None:
        ...


class ElementCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Markup.Element]:
        ...
    def __init__(self, owner: Markup.Markup) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, id: str) -> Markup.Element:
        ...
    def CreateCircle(self, center: Point3d, radius: float) -> Markup.Circle:
        ...
    def CreateCircle(self, center: Point2d, radius: float) -> Markup.Circle:
        ...
    def CreateCircle(self, anchorPoint: Point3d, center: Point3d, radius: float) -> Markup.Circle:
        ...
    def CreateCircle(self, anchorPoint: Point3d, center: Point2d, radius: float) -> Markup.Circle:
        ...
    def CreateEllipse(self, center: Point3d, major: float, minor: float) -> Markup.Ellipse:
        ...
    def CreateEllipse(self, center: Point2d, major: float, minor: float) -> Markup.Ellipse:
        ...
    def CreateEllipse(self, anchorPoint: Point3d, center: Point3d, major: float, minor: float) -> Markup.Ellipse:
        ...
    def CreateEllipse(self, anchorPoint: Point3d, center: Point2d, major: float, minor: float) -> Markup.Ellipse:
        ...
    def CreateRectangle(self, center: Point3d, length: float, width: float) -> Markup.Rectangle:
        ...
    def CreateRectangle(self, center: Point2d, length: float, width: float) -> Markup.Rectangle:
        ...
    def CreateRectangle(self, anchorPoint: Point3d, center: Point3d, length: float, width: float) -> Markup.Rectangle:
        ...
    def CreateRectangle(self, anchorPoint: Point3d, center: Point2d, length: float, width: float) -> Markup.Rectangle:
        ...
    def CreatePolyline(self, points: typing.List[Point3d]) -> Markup.Polyline:
        ...
    def CreatePolyline(self, points: typing.List[Point2d]) -> Markup.Polyline:
        ...
    def CreatePolyline(self, anchorPoint: Point3d, points: typing.List[Point3d]) -> Markup.Polyline:
        ...
    def CreatePolyline(self, anchorPoint: Point3d, points: typing.List[Point2d]) -> Markup.Polyline:
        ...
    def CreatePolygon(self, points: typing.List[Point3d]) -> Markup.Polygon:
        ...
    def CreatePolygon(self, points: typing.List[Point2d]) -> Markup.Polygon:
        ...
    def CreatePolygon(self, anchorPoint: Point3d, points: typing.List[Point3d]) -> Markup.Polygon:
        ...
    def CreatePolygon(self, anchorPoint: Point3d, points: typing.List[Point2d]) -> Markup.Polygon:
        ...
    def CreateFreehand(self, points: typing.List[Point3d]) -> Markup.Freehand:
        ...
    def CreateFreehand(self, points: typing.List[Point2d]) -> Markup.Freehand:
        ...
    def CreateFreehand(self, anchorPoint: Point3d, points: typing.List[Point3d]) -> Markup.Freehand:
        ...
    def CreateFreehand(self, anchorPoint: Point3d, points: typing.List[Point2d]) -> Markup.Freehand:
        ...
    def CreateFloatLine(self, startPoint: Point3d, endPoint: Point3d) -> Markup.Line:
        ...
    def CreateAnchoredLine(self, anchorPoint: Point3d, startPoint: Point3d, endPoint: Point3d) -> Markup.Line:
        ...
    def CreateText(self, position: Point3d, textContent: str) -> Markup.Text:
        ...
    def CreateText(self, position: Point2d, textContent: str) -> Markup.Text:
        ...
    def CreateIcon(self, position: Point3d, iconName: str, size: Markup.Icon.Size) -> Markup.Icon:
        ...
    def CreateIcon(self, position: Point2d, iconName: str, size: Markup.Icon.Size) -> Markup.Icon:
        ...
    def CreateIcon(self, anchorPoint: Point3d, position: Point3d, iconName: str, size: Markup.Icon.Size) -> Markup.Icon:
        ...
    def CreateIcon(self, anchorPoint: Point3d, position: Point2d, iconName: str, size: Markup.Icon.Size) -> Markup.Icon:
        ...
    def CreateInsetImage(self, position: Point3d, filename: str) -> Markup.InsetImage:
        ...
    def CreateElementBuilder(self, annotation: Markup.Element) -> Markup.ElementBuilder:
        ...
    def CreateEditElementDisplayBuilder(self, objects: typing.List[Markup.Element]) -> Markup.EditElementDisplayBuilder:
        ...
    def Tag(self) -> Tag: ...



class ElementBuilder(Builder):
    def __init__(self) -> None: ...
    def GetComment(self) -> str:
        ...
    def SetComment(self, comment: str) -> None:
        ...
    def GetEllipseSize(self, majorRadius: float, minorRadius: float) -> None:
        ...
    def SetEllipseSize(self, majorRadius: float, minorRadius: float) -> None:
        ...
    def SetFreehandShape(self, controlPoints: typing.List[Point3d]) -> None:
        ...
    def GetRectangleSize(self, length: float, width: float) -> None:
        ...
    def SetRectangleSize(self, length: float, width: float) -> None:
        ...
    def GetTextContent(self) -> str:
        ...
    def SetTextContent(self, comment: str) -> None:
        ...
    CircleSize: float
    EnableBackground: bool
    Geometries: SelectDisplayableObjectList
    IconName: str
    LeaderLineFont: DisplayableObject.ObjectFont
    LeaderLineWidth: DisplayableObject.ObjectWidth
    LineColor: NXColor
    LineFont: DisplayableObject.ObjectFont
    LineWidth: DisplayableObject.ObjectWidth
    Location: Point3d
    PinToScreen: bool
    Style: Markup.ElementBuilder.Styles
    TerminatingObjects: SelectDisplayableObjectList
    TextFont: str
    TextFontStyle: Features.TextBuilder.FontStyleOptions
    TextScale: Markup.Text.ScaleOptions


    class Styles(enum.Enum):
        Freehand = 0
        Text = 1
        Circle = 2
        Ellipse = 3
        Rectangle = 4
        Icon = 5
        Polyline = 6
        Polygon = 7
        Line = 8
        InsetImage = 9
    

class Element(DisplayableObject):
    def __init__(self) -> None: ...
    def GetLocation(self) -> Point3d:
        ...
    def SetLocation(self, location: Point3d) -> None:
        ...
    def SetLocation(self, location: Point2d) -> None:
        ...
    def GetAnchorPoint(self) -> Point3d:
        ...
    def SetAnchorPoint(self, anchorPoint: Point3d) -> None:
        ...
    def GetAnchorObjects(self) -> typing.List[DisplayableObject]:
        ...
    def SetAnchorObjects(self, anchorObjs: typing.List[DisplayableObject]) -> None:
        ...
    def GetTerminatingObjects(self) -> typing.List[DisplayableObject]:
        ...
    def SetTerminatingObjects(self, terminatingObjs: typing.List[DisplayableObject]) -> None:
        ...
    def GetParentMarkup(self) -> Markup.Markup:
        ...
    Comment: str
    PinToScreen: bool


class EditElementDisplayBuilder(Builder):
    def __init__(self) -> None: ...
    EnableBackground: bool
    LineColor: int
    LineFont: DisplayableObject.ObjectFont
    LineWidth: DisplayableObject.ObjectWidth
    TextFont: str
    TextFontStyle: Features.TextBuilder.FontStyleOptions
    TextScale: Markup.Text.ScaleOptions


class Circle(Markup.Element):
    def __init__(self) -> None: ...
    def GetCenterAndRadius(self, center: Point3d, radius: float) -> None:
        ...
    def SetCenterAndRadius(self, center: Point3d, radius: float) -> None:
        ...


