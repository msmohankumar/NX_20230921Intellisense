from ...NXOpen import *
from ..Utilities import *

import typing
import enum

class VersionCreated(System.Attribute):
    def __init__(self, major: int, minor: int, revision: int) -> None: ...
    Major: int
    Minor: int
    Revision: int


class ThreadRunner(System.Object):
    def InitializeRunSafely(self) -> None:
        ...
    def RunSafely(self, obj: Utilities.Runnable) -> None:
        ...
    def __init__(self) -> None: ...


    

class TestCompare(System.Object):
    def __init__(self, originalFile: str, newFile: str) -> None: ...
    def CompareFiles(self) -> None:
        ...


class ScriptHost(System.Object):
    def TidyUp(self) -> None:
        ...
    def GetJournalCount(self) -> int:
        ...
    def RunNXJournal(self, args: str) -> str:
        ...
    def RunInternalNXJournal(self, args: str) -> str:
        ...


class RuntimeImpl(System.Object):
    def ExAskRoot(self, pItem: int) -> int:
        ...
    def ExError(self, pItem: int, severe: int, strMessage: str) -> None:
        ...
    def ExForcePause(self, pItem: int) -> None:
        ...
    def ExAskRuntimeObject(self, pItem: int, physTag: Tag) -> int:
        ...
    def GetRuntimeObject(self, physTag: Tag) -> RuntimeObject:
        ...
    def ExAskRuntimeObjects(self, pItem: int, physTag: Tag, numOfObjects: int) -> None:
        ...
    def ExProceedSimulation(self, pItem: int, dt: float) -> None:
        ...
    def GetRuntimeObjects(self, physTag: Tag, numOfObjects: int, runtimeObjects: typing.List[RuntimeObject]) -> None:
        ...
    def Init(self, pSelf: int) -> None:
        ...
    def AskRoot(self) -> ComponentPart:
        ...
    def Error(self, severity: bool, strMessage: str) -> None:
        ...
    def ForcePause(self) -> None:
        ...
    def SetPerformSimulation(self, action: SimulationAction) -> None:
        ...
    def ProceedSimulation(self, dt: float) -> None:
        ...
    def __init__(self) -> None: ...


class Runnable():
    def Run(self) -> None:
        ...


class ResourceUtilities(System.Object):
    def __init__(self, assemblyData: bytes) -> None: ...
    def setExclusionZone(self, offset: int, size: int) -> None:
        ...
    def computeHash(self) -> bytes:
        ...
    def computeHash_Legacy(self) -> bytes:
        ...
    def getEmbeddedData(self) -> bytes:
        ...
    def getSignatureType(self) -> Utilities.ResourceUtilities.SignatureType:
        ...
    def getReleaseSigned(self) -> str:
        ...
    def getSignedBy(self) -> str:
        ...
    def needsRecompile(self) -> bool:
        ...
    def getSignature(self) -> bytes:
        ...
    def setEmbeddedData(self, embeddedData: bytes) -> None:
        ...
    def setSignature(self, signature: bytes) -> None:
        ...
    def setSignatureDetails(self) -> None:
        ...
    def processFile(self, filename: str, verify: bool, signatureType: str, sig: Utilities.ResourceUtilities.SignatureType, error_occurred: bool) -> None:
        ...
    def querySignatureDetails(self, filename: str, SignedBy: str, SignRelease: str, isSigned: bool) -> None:
        ...
    def VerifyHasRequiredSignature(self, filename: str, signTypeNeeded: Utilities.ResourceUtilities.SignatureType) -> None:
        ...
    AuthenticodeSignatureSize: int


    class VerifyFileStatus(enum.Enum):
        Unknown = 0
        Unsigned = 1
        Signed = 2
        MissingResource = 3
    

    class SignatureType(enum.Enum):
        NORMAL_TYPE = 0
        ALLIANCE_TYPE = 1
        SNAP_TYPE = 2
        BOTH_TYPE = 3
        MINI_SNAP = 4
    

class PropertyFunc(System.Object):
    def ExGetNumProps(self, pObject: int) -> int:
        ...
    def ExGetPropType(self, pObject: int, nProp: int) -> int:
        ...
    def ExGetObject(self, pObject: int, nProp: int) -> int:
        ...
    def ExGetInt(self, pObject: int, nProp: int) -> int:
        ...
    def ExGetBool(self, pObject: int, nProp: int) -> int:
        ...
    def ExGetString(self, pObject: int, nProp: int) -> int:
        ...
    def ExGetOperation(self, opName: str) -> int:
        ...
    def ExSetActive(self, pObject: int, active: bool) -> None:
        ...
    def ExGetActive(self, pObject: int) -> bool:
        ...
    def ExGetDuration(self, pObject: int) -> float:
        ...
    def ExSetDuration(self, pObject: int, duration: float) -> None:
        ...
    def ExGetFloat(self, pObject: int, nProp: int) -> float:
        ...
    def ExGetBoolArray(self, pObject: int, nProp: int, pBoolArrayValues: int, nArraySize: int) -> None:
        ...
    def ExGetIntArray(self, pObject: int, nProp: int, pIntArrayValues: int, nArraySize: int) -> None:
        ...
    def ExGetDoubleArray(self, pObject: int, nProp: int, pDoubleArrayValues: int, nArraySize: int) -> None:
        ...
    def ExGetStringArray(self, pObject: int, nProp: int, pStringArrayValues: int, nArraySize: int) -> None:
        ...
    def ExFreeBoolArrayMemory(self, pValules: int) -> None:
        ...
    def ExFreeIntArrayMemory(self, pValules: int) -> None:
        ...
    def ExFreeDoubleArrayMemory(self, pValules: int) -> None:
        ...
    def ExFreeStringArrayMemory(self, pValules: int, nArraySize: int) -> None:
        ...
    def ExSetObject(self, pObject: int, nProp: int, pValue: int) -> int:
        ...
    def ExSetInt(self, pObject: int, nProp: int, nValue: int) -> int:
        ...
    def ExSetBool(self, pObject: int, nProp: int, nValue: int) -> int:
        ...
    def ExSetFloat(self, pObject: int, nProp: int, fValue: float) -> int:
        ...
    def ExSetString(self, pObject: int, nProp: int, pValue: str) -> int:
        ...
    def ExSetBoolArray(self, pObject: int, nProp: int, pBoolArrayValues: int, nArraySize: int) -> int:
        ...
    def ExSetIntArray(self, pObject: int, nProp: int, pIntArrayValues: int, nArraySize: int) -> int:
        ...
    def ExSetDoubleArray(self, pObject: int, nProp: int, pDoubleArrayValues: int, nArraySize: int) -> int:
        ...
    def ExSetStringArray(self, pObject: int, nProp: int, pStringArrayValues: int, nArraySize: int) -> int:
        ...
    def ExSetDirty(self, pObject: int, nProp: int) -> None:
        ...
    def ExGetFunc(self, pObject: int, nFunc: int) -> int:
        ...
    def ExSetFuncArgObject(self, pFunc: int, nArg: int, pValue: int) -> None:
        ...
    def ExSetFuncArgInt(self, pFunc: int, nArg: int, nValue: int) -> None:
        ...
    def ExSetFuncArgBool(self, pFunc: int, nArg: int, nValue: int) -> None:
        ...
    def ExSetFuncArgFloat(self, pFunc: int, nArg: int, fValue: float) -> None:
        ...
    def ExFuncInvokeVoid(self, pFunc: int) -> None:
        ...
    def ExFuncInvokeObject(self, pFunc: int) -> int:
        ...
    def ExFuncInvokeInt(self, pFunc: int) -> int:
        ...
    def ExFuncInvokeBool(self, pFunc: int) -> int:
        ...
    def ExFuncInvokeFloat(self, pFunc: int) -> float:
        ...
    def ExFuncRelease(self, pFunc: int) -> None:
        ...
    def ExDebug(self, nValue: int) -> None:
        ...
    def ExPaintField(self, numPoint: int, pPoint: float, dColor: float, dTransparent: float, tgObj: Tag) -> None:
        ...
    def ExDeleteViewLabel(self) -> None:
        ...
    def __init__(self) -> None: ...


class PhysicsInit(System.Object):
    def Start(self) -> None:
        ...
    def Stop(self) -> None:
        ...
    def __init__(self) -> None: ...


class PeReader(System.Object):
    def __init__(self, filePath: str) -> None: ...
    SecurityDir: Utilities.PeReader.IMAGE_DATA_DIRECTORY
    HasSecurityDir: bool


    class PeReaderIMAGE_OPTIONAL_HEADER64():
        Magic: int
        MajorLinkerVersion: bytes
        MinorLinkerVersion: bytes
        SizeOfCode: int
        SizeOfInitializedData: int
        SizeOfUninitializedData: int
        AddressOfEntryPoint: int
        BaseOfCode: int
        ImageBase: int
        SectionAlignment: int
        FileAlignment: int
        MajorOperatingSystemVersion: int
        MinorOperatingSystemVersion: int
        MajorImageVersion: int
        MinorImageVersion: int
        MajorSubsystemVersion: int
        MinorSubsystemVersion: int
        Win32VersionValue: int
        SizeOfImage: int
        SizeOfHeaders: int
        CheckSum: int
        Subsystem: int
        DllCharacteristics: int
        SizeOfStackReserve: int
        SizeOfStackCommit: int
        SizeOfHeapReserve: int
        SizeOfHeapCommit: int
        LoaderFlags: int
        NumberOfRvaAndSizes: int
        DataDirectory: typing.List[Utilities.PeReader.IMAGE_DATA_DIRECTORY]
    

    class PeReaderIMAGE_OPTIONAL_HEADER32():
        Magic: int
        MajorLinkerVersion: bytes
        MinorLinkerVersion: bytes
        SizeOfCode: int
        SizeOfInitializedData: int
        SizeOfUninitializedData: int
        AddressOfEntryPoint: int
        BaseOfCode: int
        BaseOfData: int
        ImageBase: int
        SectionAlignment: int
        FileAlignment: int
        MajorOperatingSystemVersion: int
        MinorOperatingSystemVersion: int
        MajorImageVersion: int
        MinorImageVersion: int
        MajorSubsystemVersion: int
        MinorSubsystemVersion: int
        Win32VersionValue: int
        SizeOfImage: int
        SizeOfHeaders: int
        CheckSum: int
        Subsystem: int
        DllCharacteristics: int
        SizeOfStackReserve: int
        SizeOfStackCommit: int
        SizeOfHeapReserve: int
        SizeOfHeapCommit: int
        LoaderFlags: int
        NumberOfRvaAndSizes: int
        DataDirectory: typing.List[Utilities.PeReader.IMAGE_DATA_DIRECTORY]
    

    class PeReaderIMAGE_NT_HEADERS():
        Signature: int
        FileHeader: Utilities.PeReader.IMAGE_FILE_HEADER
        OptionalHeader32: Utilities.PeReader.IMAGE_OPTIONAL_HEADER32
        OptionalHeader64: Utilities.PeReader.IMAGE_OPTIONAL_HEADER64
    

    class PeReaderIMAGE_FILE_HEADER():
        Machine: int
        NumberOfSections: int
        TimeDateStamp: int
        PointerToSymbolTable: int
        NumberOfSymbols: int
        SizeOfOptionalHeader: int
        Characteristics: int
    

    class PeReaderIMAGE_DOS_HEADER():
        e_magic: int
        e_cblp: int
        e_cp: int
        e_crlc: int
        e_cparhdr: int
        e_minalloc: int
        e_maxalloc: int
        e_ss: int
        e_sp: int
        e_csum: int
        e_ip: int
        e_cs: int
        e_lfarlc: int
        e_ovno: int
        e_res1: int
        e_oemid: int
        e_oeminfo: int
        e_res2: int
        e_lfanew: int
    

    class PeReaderIMAGE_DATA_DIRECTORY():
        VirtualAddress: int
        Size: int
    

class ParameterType(System.Object):





    def __init__(self) -> None: ...


class ObjectMapEntry(System.Object):
    def __init__(self, objParam: TaggedObject, classNameParam: str) -> None: ...
    Obj: TaggedObject
    RemainingUndoOverDelete: int
    ClassName: str


class NXRemotingHelper(System.Object):
    def IsSessionRunningRemotely(self, ownerSession: any) -> bool:
        ...
    def GetServerObject(self) -> any:
        ...
    def __init__(self) -> None: ...


class NXRemotableObject(System.MarshalByRefObject):
    def initialize(self) -> None:
        ...
    def SyncProcessMessage(self) -> None:
        ...
    def AsyncProcessMessage(self) -> None:
        ...
    def __init__(self) -> None: ...
    NextSink: any


class NXObjectManager(Utilities.NXRemotableObject):
    def __init__(self) -> None: ...
    def GetObjectFromUInt(self, tagValue: int) -> TaggedObject:
        ...
    def GetTaggedObject(self, objectTag: Tag) -> TaggedObject:
        ...
    def Get(self, objectTag: Tag) -> TaggedObject:
        ...
    def Get(self, objectTag: Tag, name: str) -> TaggedObject:
        ...
    def Construct(self, className: str, arg: int) -> TransientObject:
        ...


    class TagEventType(enum.Enum):
        TAG_EVENT_NORMAL_CREATE = 0
        TAG_EVENT_UNDO_OVER_CREATE = 1
        TAG_EVENT_NORMAL_DELETE = 2
        TAG_EVENT_UNDO_OVER_DELETE = 3
        TAG_EVENT_UNDO_DELETE_EXPIRED = 4
        TAG_EVENT_UNDO_CREATE_EXPIRED = 5
        TAG_EVENT_BEFORE_REPLACE = 6
        TAG_EVENT_AFTER_REPLACE = 7
        TAG_EVENT_UNDO_DELETE_DISCARDED = 8
    

    class TagEventMaskType(enum.Enum):
        TAG_EVENT_NORMAL_CREATE_MASK = 1
        TAG_EVENT_UNDO_OVER_CREATE_MASK = 2
        TAG_EVENT_NORMAL_DELETE_MASK = 4
        TAG_EVENT_UNDO_OVER_DELETE_MASK = 8
        TAG_EVENT_UNDO_DELETE_EXPIRED_MASK = 16
        TAG_EVENT_UNDO_CREATE_EXPIRED_MASK = 32
        TAG_EVENT_BEFORE_REPLACE_MASK = 64
        TAG_EVENT_AFTER_REPLACE_MASK = 128
        TAG_EVENT_UNDO_DELETE_DISCARDED_MASK = 256
    

    

    class NXObjectManager.<>c(System.Object):
    
    
    
        def __init__(self) -> None: ...
    

    class NXObjectManager.<>c__DisplayClass19_0(System.Object):
    
    
        def __init__(self) -> None: ...
    

class NeedSNAPAuthorLicenseException(System.Exception):
    def __init__(self, description: str) -> None: ...


class NeedDOTNETAuthorLicenseException(System.Exception):
    def __init__(self, description: str) -> None: ...


class NamespaceDoc(System.Object):
    def __init__(self) -> None: ...


class MissingResourceException(System.Exception):
    def __init__(self, description: str) -> None: ...


class MessageRunner(System.Object):



    def Run(self) -> None:
        ...
    def __init__(self) -> None: ...


class MessageControl(System.Object):
    def Cancel(self, msToCancel: int) -> None:
        ...
    def __init__(self) -> None: ...


class JAM(System.Object):
    def ToByteArray(self, flags: bool) -> bytes:
        ...
    def ToTagArray(self, objects: typing.List[TaggedObject]) -> typing.List[Tag]:
        ...
    def ToTagArray(self, objects: any) -> typing.List[Tag]:
        ...
    def ToPointerArray(self, objects: typing.List[TransientObject]) -> int:
        ...
    def ToIdArray(self, objects: typing.List[Utilities.IHasHandle]) -> int:
        ...
    def ToPointerArray(self, objects: typing.List[TaggedObject]) -> int:
        ...
    def FreeVariant(self, v: Utilities.JAM.Variant) -> None:
        ...
    def ToVariant(self, o: any) -> Utilities.JAM.Variant:
        ...
    def FreeVariantArray(self, v: typing.List[Utilities.JAM.Variant]) -> None:
        ...
    def ToVariantArray(self, objects: any) -> typing.List[Utilities.JAM.Variant]:
        ...
    def ToObject(self, v: Utilities.JAM.Variant) -> any:
        ...
    def ToObjectArray(self, tags: typing.List[Tag]) -> any:
        ...
    def ToStructureArray(self) -> None:
        ...
    def ToObjectArray(self, count: int, variants: int) -> any:
        ...
    def ToObjectArray(self) -> None:
        ...
    def ToObjectArray_ForCallbacks(self) -> None:
        ...
    def ToObjectArray(self) -> None:
        ...
    def ToObjectArray_ForCallbacks(self) -> None:
        ...
    def ToEnumArray(self) -> None:
        ...
    def ToIntArray(self, count: int, ints: int) -> int:
        ...
    def ToDoubleArray(self, count: int, doubles: int) -> float:
        ...
    def ToBoolArray(self, count: int, logicals: int) -> bool:
        ...
    def ToStringArrayFromLocale(self, count: int, strings: int) -> str:
        ...
    def ToStringArrayFromText(self, count: int, strings: int) -> str:
        ...
    def ToStringFromText(self, text: int) -> str:
        ...
    def ToStringFromLocale(self, s: int, doFree: bool) -> str:
        ...
    def ToStringFromLocale(self, s: int) -> str:
        ...
    def ToText(self, s: str) -> int:
        ...
    def ToTextArray(self, strings: str) -> int:
        ...
    def FreeTextArray(self, array: int) -> None:
        ...
    def ToLocaleStringArray(self, strings: str) -> int:
        ...
    def FreeLocaleStringArray(self, array: int) -> None:
        ...
    def ToLocaleString(self, s: str) -> int:
        ...
    def FreeLocaleString(self, p: int) -> None:
        ...
    def TextFree(self, text: int) -> None:
        ...
    def SMFree(self, p: int) -> None:
        ...
    def StartCall(self) -> None:
        ...
    def StartCall(self, license: str) -> None:
        ...
    def StartCall(self, license1: str, license2: str) -> None:
        ...
    def StartCall(self, licenses: str) -> None:
        ...
    def EndCall(self) -> None:
        ...
    def StartUFCall(self) -> None:
        ...
    def EndUFCall(self) -> None:
        ...
    def Lookup(self, ptr: int) -> Tag:
        ...
    def Lookup(self, tag: Tag) -> int:
        ...
    def GetSingletonTag(self, className: str) -> Tag:
        ...
    def GetLicenseContext(self) -> str:
        ...
    def SetLicenseContext(self) -> None:
        ...
    def SetCallbackException(self) -> None:
        ...
    def ClearCallbackException(self) -> None:
        ...
    def __init__(self) -> None: ...


    class JAMVariantValue():
        i: int
        d: float
        l: bytes
        ptr: int
    

    class VariantType(enum.Enum):
        Int = 0
        Double = 1
        Logical = 2
        String = 3
        Tag = 4
        Empty = 5
        Variant = 6
        Array = 4096
    

    class JAMVariant():
        type: Utilities.JAM.VariantType
        array_length: int
        val: Utilities.JAM.VariantValue
    

class InvalidPeFormatException(System.Exception):
    def __init__(self, description: str) -> None: ...


class InstanceFunc(System.Object):
    def ExAddReference(self, pItem: int) -> None:
        ...
    def ExRelease(self, pItem: int) -> None:
        ...
    def ExIsDestroyed(self, pItem: int) -> int:
        ...
    def ExGetClass(self, pItem: int) -> int:
        ...
    def ExDestroy(self, pItem: int) -> None:
        ...
    def ExCopy(self, pItem: int) -> int:
        ...
    def ExAskAssembly(self, pItem: int) -> int:
        ...
    def ExAskObjectPersistentTag(self, pItem: int) -> Tag:
        ...
    def ExGetForce(self, pItem: int, indx: int) -> float:
        ...
    def ExGetTorque(self, pItem: int, indx: int) -> float:
        ...
    def ExGetAcceleration(self, pItem: int, is_angular: bool) -> float:
        ...
    def ExGetAxisForce(self, pItem: int, indx: int) -> float:
        ...
    def ExGetAxisTorque(self, pItem: int, indx: int) -> float:
        ...
    def ExGetControlForce(self, pItem: int, indx: int) -> float:
        ...
    def ExGetControlTorque(self, pItem: int, indx: int) -> float:
        ...
    def ExGetCouplingMasterForce(self, pItem: int, indx: int) -> float:
        ...
    def ExGetCouplingMasterTorque(self, pItem: int, indx: int) -> float:
        ...
    def ExGetCouplingSlaveForce(self, pItem: int, indx: int) -> float:
        ...
    def ExGetCouplingSlaveTorque(self, pItem: int, indx: int) -> float:
        ...
    def ExGetPulleyAxisForce(self, pItem: int, indx: int, pulleyIndex: int, isMaster: bool) -> float:
        ...
    def ExGetPulleyAxisTorque(self, pItem: int, indx: int, pulleyIndex: int, isMaster: bool) -> float:
        ...
    def __init__(self) -> None: ...


class IItemFactory():
    def Create(self, pItem: int) -> RuntimeObject:
        ...


class IHasHandle():
    Handle: int


class FetchConnect(System.Object):
    def ExAddProperty(self, pItem: int, strName: str, nBaseType: int, nContextType: int) -> None:
        ...
    def ExAddParameterBool(self, pItem: int, strName: str, nBaseType: int, boolValue: bool) -> None:
        ...
    def ExAddParameterDouble(self, pItem: int, strName: str, nBaseType: int, doubleValue: float) -> None:
        ...
    def ExAddParameterInt(self, pItem: int, strName: str, nBaseType: int, intValue: int) -> None:
        ...
    def Init(self, pSelf: int) -> None:
        ...
    def Connect(self, strName: str, item: RuntimeObject) -> None:
        ...
    def Connect(self, strName: str, item: ComponentPart) -> None:
        ...
    def Connect(self, strName: str, item: RigidBody) -> None:
        ...
    def Connect(self, strName: str, item: CollisionBody) -> None:
        ...
    def Connect(self, strName: str, item: RuntimeButton) -> None:
        ...
    def Connect(self, strName: str, item: CollisionSensor) -> None:
        ...
    def Connect(self, strName: str, item: DistanceSensor) -> None:
        ...
    def Connect(self, strName: str, item: LaserScanner) -> None:
        ...
    def Connect(self, strName: str, item: LightCurtain) -> None:
        ...
    def Connect(self, strName: str, item: PositionSensor) -> None:
        ...
    def Connect(self, strName: str, item: VelocitySensor) -> None:
        ...
    def Connect(self, strName: str, item: GenericSensor) -> None:
        ...
    def Connect(self, strName: str, item: LimitSwitch) -> None:
        ...
    def Connect(self, strName: str, item: Relay) -> None:
        ...
    def Connect(self, strName: str, item: Inclinometer) -> None:
        ...
    def Connect(self, strName: str, item: Accelerometer) -> None:
        ...
    def Connect(self, strName: str, item: TransportSurface) -> None:
        ...
    def Connect(self, strName: str, item: CollisionMaterial) -> None:
        ...
    def Connect(self, strName: str, item: Joint) -> None:
        ...
    def Connect(self, strName: str, item: AxisJoint) -> None:
        ...
    def Connect(self, strName: str, item: HingeJoint) -> None:
        ...
    def Connect(self, strName: str, item: SlidingJoint) -> None:
        ...
    def Connect(self, strName: str, item: ScrewJoint) -> None:
        ...
    def Connect(self, strName: str, item: PlanarJoint) -> None:
        ...
    def Connect(self, strName: str, item: RackPinion) -> None:
        ...
    def Connect(self, strName: str, item: CylindricalJoint) -> None:
        ...
    def Connect(self, strName: str, item: PointOnCurveJoint) -> None:
        ...
    def Connect(self, strName: str, item: CurveOnCurveJoint) -> None:
        ...
    def Connect(self, strName: str, item: FixedJoint) -> None:
        ...
    def Connect(self, strName: str, item: BallJoint) -> None:
        ...
    def Connect(self, strName: str, item: LimitJoint) -> None:
        ...
    def Connect(self, strName: str, item: AngularLimit) -> None:
        ...
    def Connect(self, strName: str, item: LinearLimit) -> None:
        ...
    def Connect(self, strName: str, item: SpringJoint) -> None:
        ...
    def Connect(self, strName: str, item: AngularSpring) -> None:
        ...
    def Connect(self, strName: str, item: LinearSpring) -> None:
        ...
    def Connect(self, strName: str, item: SpeedControl) -> None:
        ...
    def Connect(self, strName: str, item: PositionControl) -> None:
        ...
    def Connect(self, strName: str, item: ForceTorqueControl) -> None:
        ...
    def Connect(self, strName: str, item: AxisConstraint) -> None:
        ...
    def Connect(self, strName: str, item: SpringDamper) -> None:
        ...
    def Connect(self, strName: str, item: BreakingConstraint) -> None:
        ...
    def Connect(self, strName: str, item: GearCoupling) -> None:
        ...
    def Connect(self, strName: str, item: CamCoupling) -> None:
        ...
    def Connect(self, strName: str, item: ElecCamCoupling) -> None:
        ...
    def Connect(self, strName: str, item: PreventCollision) -> None:
        ...
    def Connect(self, strName: str, item: ChangeMaterial) -> None:
        ...
    def Connect(self, strName: str, item: SourceBehavior) -> None:
        ...
    def Connect(self, strName: str, item: SinkBehavior) -> None:
        ...
    def Connect(self, strName: str, item: Transformer) -> None:
        ...
    def Connect(self, strName: str, item: TransmitterEntry) -> None:
        ...
    def Connect(self, strName: str, item: TransmitterExit) -> None:
        ...
    def Connect(self, strName: str, item: ReadWriteDeviceObject) -> None:
        ...
    def Connect(self, strName: str, item: DisplayChanger) -> None:
        ...
    def Connect(self, strName: str, item: Gripper) -> None:
        ...
    def Connect(self, strName: str, item: LinearGripper) -> None:
        ...
    def Connect(self, strName: str, item: AngularGripper) -> None:
        ...
    def Connect(self, strName: str, item: VacuumGripper) -> None:
        ...
    def Connect(self, strName: str, item: ExpressionBlock) -> None:
        ...
    def Connect(self, strName: str, item: PathConstraintJoint) -> None:
        ...
    def Connect(self, strName: str, item: TagForm) -> None:
        ...
    def Connect(self, strName: str, item: RuntimeNC) -> None:
        ...
    def Connect(self, strName: str, item: GraphControl) -> None:
        ...
    def Connect(self, strName: str, item: ExternalConnection) -> None:
        ...
    def Connect(self, strName: str, item: SignalAdapter) -> None:
        ...
    def Connect(self, strName: str, item: Signal) -> None:
        ...
    def Connect(self, strName: str, item: MCDSignal) -> None:
        ...
    def Connect(self, strName: str, item: ProxyObject) -> None:
        ...
    def Connect(self, strName: str, item: RuntimeParameters) -> None:
        ...
    def Connect(self, strName: str, item: VirtualAxis) -> None:
        ...
    def Connect(self, strName: str, item: PneumaticCylinder) -> None:
        ...
    def Connect(self, strName: str, item: PneumaticValve) -> None:
        ...
    def Connect(self, strName: str, item: HydraulicCylinder) -> None:
        ...
    def Connect(self, strName: str, item: HydraulicValve) -> None:
        ...
    def Connect(self, strName: str, item: TableBase) -> None:
        ...
    def Connect(self, strName: str, item: Operation) -> None:
        ...
    def Connect(self, strName: str, item: InverseKinematics) -> None:
        ...
    def Connect(self, strName: str, item: BondZone) -> None:
        ...
    def Connect(self, strName: str, item: PulleysBeltChain) -> None:
        ...
    def Connect(self, strName: str, item: AlignBody) -> None:
        ...
    def Connect(self, strName: str, item: DynamicObjectInstantiation) -> None:
        ...
    def Connect(self, strName: str, item: Tracer) -> None:
        ...
    def Parameter(self, strName: str, value: int, item: int) -> None:
        ...
    def Parameter(self, strName: str, value: float, item: float) -> None:
        ...
    def Parameter(self, strName: str, value: bool, item: bool) -> None:
        ...
    def __init__(self) -> None: ...


class EstablishConnect(System.Object):
    def ExGetProperty(self, pItem: int, strName: str, nBaseType: int, nContextType: int) -> int:
        ...
    def ExGetOperationObj(self, pItem: int) -> int:
        ...
    def ExGetIntParameter(self, pItem: int, strName: str, nType: int) -> int:
        ...
    def ExGetDoubleParameter(self, pItem: int, strName: str, nType: int) -> float:
        ...
    def ExGetBoolParameter(self, pItem: int, strName: str, nType: int) -> bool:
        ...
    def Init(self, pSelf: int) -> None:
        ...
    def Connect(self, strName: str, item: RuntimeObject) -> None:
        ...
    def Connect(self, strName: str, item: ComponentPart) -> None:
        ...
    def Connect(self, strName: str, item: RigidBody) -> None:
        ...
    def Connect(self, strName: str, item: CollisionBody) -> None:
        ...
    def Connect(self, strName: str, item: RuntimeButton) -> None:
        ...
    def Connect(self, strName: str, item: CollisionSensor) -> None:
        ...
    def Connect(self, strName: str, item: DistanceSensor) -> None:
        ...
    def Connect(self, strName: str, item: LaserScanner) -> None:
        ...
    def Connect(self, strName: str, item: LightCurtain) -> None:
        ...
    def Connect(self, strName: str, item: PositionSensor) -> None:
        ...
    def Connect(self, strName: str, item: VelocitySensor) -> None:
        ...
    def Connect(self, strName: str, item: GenericSensor) -> None:
        ...
    def Connect(self, strName: str, item: LimitSwitch) -> None:
        ...
    def Connect(self, strName: str, item: Relay) -> None:
        ...
    def Connect(self, strName: str, item: Inclinometer) -> None:
        ...
    def Connect(self, strName: str, item: Accelerometer) -> None:
        ...
    def Connect(self, strName: str, item: TransportSurface) -> None:
        ...
    def Connect(self, strName: str, item: CollisionMaterial) -> None:
        ...
    def Connect(self, strName: str, item: Joint) -> None:
        ...
    def Connect(self, strName: str, item: AxisJoint) -> None:
        ...
    def Connect(self, strName: str, item: HingeJoint) -> None:
        ...
    def Connect(self, strName: str, item: SlidingJoint) -> None:
        ...
    def Connect(self, strName: str, item: PlanarJoint) -> None:
        ...
    def Connect(self, strName: str, item: ScrewJoint) -> None:
        ...
    def Connect(self, strName: str, item: RackPinion) -> None:
        ...
    def Connect(self, strName: str, item: CylindricalJoint) -> None:
        ...
    def Connect(self, strName: str, item: PointOnCurveJoint) -> None:
        ...
    def Connect(self, strName: str, item: CurveOnCurveJoint) -> None:
        ...
    def Connect(self, strName: str, item: FixedJoint) -> None:
        ...
    def Connect(self, strName: str, item: BallJoint) -> None:
        ...
    def Connect(self, strName: str, item: LimitJoint) -> None:
        ...
    def Connect(self, strName: str, item: AngularLimit) -> None:
        ...
    def Connect(self, strName: str, item: LinearLimit) -> None:
        ...
    def Connect(self, strName: str, item: SpringJoint) -> None:
        ...
    def Connect(self, strName: str, item: AngularSpring) -> None:
        ...
    def Connect(self, strName: str, item: LinearSpring) -> None:
        ...
    def Connect(self, strName: str, item: SpeedControl) -> None:
        ...
    def Connect(self, strName: str, item: PositionControl) -> None:
        ...
    def Connect(self, strName: str, item: ForceTorqueControl) -> None:
        ...
    def Connect(self, strName: str, item: AxisConstraint) -> None:
        ...
    def Connect(self, strName: str, item: SpringDamper) -> None:
        ...
    def Connect(self, strName: str, item: BreakingConstraint) -> None:
        ...
    def Connect(self, strName: str, item: GearCoupling) -> None:
        ...
    def Connect(self, strName: str, item: CamCoupling) -> None:
        ...
    def Connect(self, strName: str, item: ElecCamCoupling) -> None:
        ...
    def Connect(self, strName: str, item: PreventCollision) -> None:
        ...
    def Connect(self, strName: str, item: ChangeMaterial) -> None:
        ...
    def Connect(self, strName: str, item: SourceBehavior) -> None:
        ...
    def Connect(self, strName: str, item: SinkBehavior) -> None:
        ...
    def Connect(self, strName: str, item: Transformer) -> None:
        ...
    def Connect(self, strName: str, item: TransmitterEntry) -> None:
        ...
    def Connect(self, strName: str, item: TransmitterExit) -> None:
        ...
    def Connect(self, strName: str, item: ReadWriteDeviceObject) -> None:
        ...
    def Connect(self, strName: str, item: DisplayChanger) -> None:
        ...
    def Connect(self, strName: str, item: Gripper) -> None:
        ...
    def Connect(self, strName: str, item: LinearGripper) -> None:
        ...
    def Connect(self, strName: str, item: AngularGripper) -> None:
        ...
    def Connect(self, strName: str, item: VacuumGripper) -> None:
        ...
    def Connect(self, strName: str, item: ExpressionBlock) -> None:
        ...
    def Connect(self, strName: str, item: PathConstraintJoint) -> None:
        ...
    def Connect(self, strName: str, item: TagForm) -> None:
        ...
    def Connect(self, strName: str, item: RuntimeNC) -> None:
        ...
    def Connect(self, strName: str, item: GraphControl) -> None:
        ...
    def Connect(self, strName: str, item: ExternalConnection) -> None:
        ...
    def Connect(self, strName: str, item: SignalAdapter) -> None:
        ...
    def Connect(self, strName: str, item: Signal) -> None:
        ...
    def Connect(self, strName: str, item: MCDSignal) -> None:
        ...
    def Connect(self, strName: str, item: ProxyObject) -> None:
        ...
    def Connect(self, strName: str, item: RuntimeParameters) -> None:
        ...
    def Connect(self, strName: str, item: VirtualAxis) -> None:
        ...
    def Connect(self, strName: str, item: TableBase) -> None:
        ...
    def Connect(self, strName: str, item: Operation) -> None:
        ...
    def Connect(self, strName: str, item: PneumaticCylinder) -> None:
        ...
    def Connect(self, strName: str, item: PneumaticValve) -> None:
        ...
    def Connect(self, strName: str, item: HydraulicCylinder) -> None:
        ...
    def Connect(self, strName: str, item: HydraulicValve) -> None:
        ...
    def Connect(self, strName: str, item: InverseKinematics) -> None:
        ...
    def Connect(self, strName: str, item: PulleysBeltChain) -> None:
        ...
    def Connect(self, strName: str, item: BondZone) -> None:
        ...
    def Connect(self, strName: str, item: AlignBody) -> None:
        ...
    def Connect(self, strName: str, item: DynamicObjectInstantiation) -> None:
        ...
    def Connect(self, strName: str, item: Tracer) -> None:
        ...
    def Parameter(self, strName: str, value: int, item: int) -> None:
        ...
    def Parameter(self, strName: str, value: float, item: float) -> None:
        ...
    def Parameter(self, strName: str, value: bool, item: bool) -> None:
        ...
    def __init__(self) -> None: ...


class DeletedObjectQueue(System.Object):
    def __init__(self) -> None: ...
    def Add(self, ome: Utilities.ObjectMapEntry) -> None:
        ...
    def RemoveOldest(self) -> None:
        ...
    def RemoveNewest(self) -> None:
        ...
    Count: int
    Newest: Utilities.ObjectMapEntry


    class DeletedObjectQueue.Element(System.Object):
    
    
    
        def __init__(self, ome: Utilities.ObjectMapEntry) -> None: ...
    

class Decryptor(System.Object):







    def verifySignature(self, hashValue: bytes, signature: bytes) -> bool:
        ...
    def __init__(self) -> None: ...


class CodeDomCompiler(System.Object):



    def AddReferenceItem(self, name: str, assemblyName: str) -> None:
        ...
    def Compile(self, script: str) -> bool:
        ...
    def GetFeedback(self) -> str:
        ...
    def TidyUp(self) -> None:
        ...
    Assembly: any


class ClassDefs(System.Object):








































































































































































    def __init__(self) -> None: ...


class BaseTypeDefs(System.Object):











    def __init__(self) -> None: ...


class BaseSession(TaggedObject):
    def needToEvaluate(self) -> bool:
        ...
    def querySignatureDetails(self, filename: str, SignedBy: str, SignRelease: str, isSigned: bool) -> None:
        ...
    def evalualuteCallStack(self, sigType: Utilities.ResourceUtilities.SignatureType) -> int:
        ...
    def evalualuteJournalDLLs(self) -> int:
        ...
    def determineSignatureNeeded(self) -> Utilities.ResourceUtilities.SignatureType:
        ...
    def verifyAssemblyData(self, callEvaluateStack: bool) -> bool:
        ...
    def initialize(self) -> None:
        ...
    def StaticInitialize(self) -> None:
        ...
    def RefreshSessionTable(self) -> bool:
        ...
    def InitLicense(self) -> None:
        ...
    def GetObjectManager(self) -> Utilities.NXObjectManager:
        ...
    def __init__(self) -> None: ...
    def Finalize(self) -> None:
        ...
    def SetTestOutput(self, outputFile: str) -> None:
        ...
    def SetTestOutput(self, outputFile: str, version: int) -> None:
        ...
    def CloseTestOutput(self) -> None:
        ...
    def CompareTestOutput(self, originalFile: str, newFile: str) -> None:
        ...


