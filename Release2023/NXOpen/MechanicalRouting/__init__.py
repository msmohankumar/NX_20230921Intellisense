from ...NXOpen import *
from ..MechanicalRouting import *

import typing
import enum

class SpoolManager(Utilities.NXRemotableObject):
    def __init__(self, owner: MechanicalRouting.RoutingManager) -> None: ...
    def RefreshSpools(self, part: Part) -> None:
        ...
    def RemoveMembersFromTheirSpools(self, members: typing.List[Assemblies.Component]) -> None:
        ...
    def MoveMembersToSpool(self, members: typing.List[Assemblies.Component], desinationSpool: MechanicalRouting.Spool) -> None:
        ...
    def Tag(self) -> Tag: ...



class SpoolCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[MechanicalRouting.Spool]:
        ...
    def __init__(self, owner: MechanicalRouting.CollectionsManager) -> None: ...
    def __init__(self) -> None: ...
    def Tag(self) -> Tag: ...



class SpoolBuilder(Builder):
    def __init__(self) -> None: ...
    Description: str
    Members: Routing.RouteObjectCollector
    Name: str


class Spool(NXObject):
    def __init__(self) -> None: ...
    def GetMembers(self) -> typing.List[Assemblies.Component]:
        ...
    def HasMember(self, object: Assemblies.Component) -> bool:
        ...
    ComponentGroup: Assemblies.ComponentGroup
    Description: str
    Name: str
    ViewSet: ViewSet


class RunsManager(Utilities.NXRemotableObject):
    def __init__(self, owner: MechanicalRouting.RoutingManager) -> None: ...
    def LoadRuns(self, collaborativeDesign: CollaborativeDesign, runIdsToLoad: str) -> None:
        ...
    def UnloadRun(self, run: NXObject) -> None:
        ...
    def GetLoadedRuns(self, runs: typing.List[NXObject]) -> None:
        ...
    def AssociateRun(self, part: Part, run: NXObject) -> None:
        ...
    def DissociateRun(self, part: Part, run: NXObject) -> None:
        ...
    def SetActiveRun(self, part: Part, run: NXObject) -> None:
        ...
    def MakeRunInactive(self, part: Part) -> None:
        ...
    def AddToRun(self, component: Assemblies.Component, run: NXObject) -> None:
        ...
    def AddComponentsToRun(self, componentsToAdd: typing.List[Assemblies.Component], run: NXObject) -> None:
        ...
    def RemoveFromRun(self, component: Assemblies.Component) -> None:
        """[Obsolete("Deprecated in NX2007.0.0.  Please use NXOpen.MechanicalRouting.RunsManager.RemoveComponentFromRun instead.")"""
        ...
    def RemoveComponentFromRun(self, component: Assemblies.Component, run: NXObject) -> None:
        ...
    def MoveToRun(self, component: Assemblies.Component, run: NXObject) -> None:
        ...
    def MoveComponentsToRun(self, componentsToMove: typing.List[Assemblies.Component], run: NXObject) -> None:
        ...
    def Delete3dRunObject(self, part: Part, runObject: NXObject) -> None:
        ...
    def ShowFlowDirectionForRun(self, part: Part, run: NXObject) -> None:
        ...
    def ShowFlowDirectionForRunBranch(self, part: Part, run: NXObject) -> None:
        ...
    def ReverseFlowDirectionForRunBranch(self, run: NXObject) -> None:
        ...
    def Delete3dRunObjects(self, runObjects: typing.List[NXObject]) -> None:
        ...
    def LoadPidRunAssemblies(self, assemblies: typing.List[Part]) -> None:
        ...
    def Tag(self) -> Tag: ...



class RunsAssignmentManager(Utilities.NXRemotableObject):
    def __init__(self, owner: MechanicalRouting.RoutingManager) -> None: ...
    def AssignComponentPort(self, component: Assemblies.Component, physicalPort: Routing.Port, logicalPort: NXObject) -> None:
        ...
    def AssignPort(self, physicalPort: Routing.Port, logicalPort: NXObject) -> None:
        ...
    def Unassign(self, part: Part, logicalPort: NXObject) -> None:
        ...
    def UnassignComponent(self, component: Assemblies.Component) -> None:
        ...
    def AssignComponentsToLogicalConnection(self, components: typing.List[Assemblies.Component], logicalConnection: NXObject) -> None:
        ...
    def AssignSingleComponentToLogicalConnection(self, component: Assemblies.Component, logicalConnection: NXObject) -> None:
        ...
    def UnassignComponentsFromLogicalConnection(self, part: Part, logicalConnection: NXObject) -> None:
        ...
    def AssignComponentToLogicalEquipment(self, component: Assemblies.Component, logicalEquipment: NXObject) -> None:
        ...
    def UnassignComponentFromLogicalEquipment(self, part: Part, logicalEquipment: NXObject) -> None:
        ...
    def GetLogicalObjectMappingStatus(self, logicalDesignObject: NXObject, message: MechanicalRouting.RunsAssignmentManager.MappingStatusMessage) -> MechanicalRouting.RunsAssignmentManager.MappingStatus:
        ...
    def GetSimplifiedViewLogicalObjectMappingStatus(self, logicalDesignObject: NXObject, message: MechanicalRouting.RunsAssignmentManager.MappingStatusMessage) -> MechanicalRouting.RunsAssignmentManager.MappingStatus:
        ...
    def GetMappingStatusMessageUserString(self, message: MechanicalRouting.RunsAssignmentManager.MappingStatusMessage) -> str:
        ...
    def IsPortAssigned(self, component: Assemblies.Component, port: NXObject) -> bool:
        ...
    def IsComponentAssignedToConnection(self, component: Assemblies.Component) -> bool:
        ...
    def IsComponentAssignedToEquipment(self, component: Assemblies.Component) -> bool:
        ...
    def IsLogicalDesignObjectAssigned(self, part: Part, logicalDesignObject: NXObject) -> bool:
        ...
    def IsLogicalPortAssigned(self, part: Part, logicalPort: NXObject) -> bool:
        ...
    def IsLogicalConnectionAssigned(self, part: Part, logicalConnection: NXObject) -> bool:
        ...
    def IsLogicalConnectionFromPortAssigned(self, part: Part, logicalConnection: NXObject) -> bool:
        ...
    def IsLogicalConnectionToPortAssigned(self, part: Part, logicalConnection: NXObject) -> bool:
        ...
    def IsLogicalEquipmentAssigned(self, part: Part, logicalEquipment: NXObject) -> bool:
        ...
    def GetPortLogicalPortAssignedTo(self, part: Part, logicalPort: NXObject, component: Assemblies.Component, port: NXObject) -> None:
        ...
    def GetLogicalConnectionFromPortAssignedTo(self, part: Part, logicalConnection: NXObject, component: Assemblies.Component, port: NXObject) -> None:
        ...
    def GetLogicalConnectionToPortAssignedTo(self, part: Part, logicalConnection: NXObject, component: Assemblies.Component, port: NXObject) -> None:
        ...
    def GetComponentLogicalEquipmentAssignedTo(self, part: Part, logicalEquipment: NXObject) -> Assemblies.Component:
        ...
    def GetAssignedLogicalPort(self, component: Assemblies.Component, port: NXObject) -> NXObject:
        ...
    def GetAssignedLogicalConnection(self, component: Assemblies.Component) -> NXObject:
        ...
    def GetAssignedLogicalEquipment(self, component: Assemblies.Component) -> NXObject:
        ...
    def MapComponentToPart(self, part: Part, component: Assemblies.Component) -> Assemblies.Component:
        ...
    def GetComponentsLogicalConnectionAssignedTo(self, part: Part, logicalConnection: NXObject) -> typing.List[Assemblies.Component]:
        ...
    def MakeComponentBranchTerminating(self, component: Assemblies.Component) -> None:
        ...
    def MakeComponentNotBranchTerminating(self, component: Assemblies.Component) -> None:
        ...
    def RefreshMappingStatusAndUpdateView(self, part: Part, runObject: NXObject) -> None:
        ...
    def Tag(self) -> Tag: ...



    class MappingStatusMessage(enum.Enum):
        Unknown = 0
        Assigned = 1
        NotAssigned = 2
        OneOrMoreConnectedPortsNotAssigned = 3
        Unloaded = 4
        DeviationOfDiscipline = 5
        DeviationOfSpecification = 6
        DeviationOfDisciplineAndSpecification = 7
        BreakAtFromPort = 8
        BreakAtToPort = 9
        BreakInContinuityOfObjectsInConnection = 10
        OneOrMoreBareSegmentsInConnection = 11
        AssignedStockDoesNotMatchLogicalStock = 12
        PortIdentifierDoesNotMatchLogicalPortIdentifier = 13
        ParentRunLoadedInMultipleOpenParts = 14
        PartAssociatedToRunNotLoaded = 15
        OneOrMoreBranchMembersHasAWarning = 16
        OneOrMoreBranchMembersHasAnError = 17
        OneOrMoreBranchMembersCannotBeEvaluated = 18
        OneOrMoreRunMembersHasAWarning = 19
        OneOrMoreRunMembersHasAnError = 20
        OneOrMoreRunMembersCannotBeEvaluated = 21
        ToPortEquipmentPartNotLoaded = 22
        FromPortEquipmentPartNotLoaded = 23
        AnUnkownErrorHasOccurred = 24
        OpenEndedConnectionAtFromPort = 25
        OpenEndedConnectionAtToPort = 26
        AssignedEquipmentDoesNotMatchLogicalEquipment = 27
        Suppressed = 28
        ToPortEquipmentSuppressed = 29
        FromPortEquipmentSuppressed = 30
        TerminatingPortDisconnectedFromAllTerminatingPorts = 31
        TerminatingPortNotConnectedToAllTerminatingPorts = 32
        BranchesWithinRunAreNotContiguous = 33
    

    class MappingStatus(enum.Enum):
        Unknown = 0
        Pass = 1
        Warning = 2
        Error = 3
        CannotBeEvaluated = 4
    

class RunAssembliesService(Utilities.NXRemotableObject):
    def __init__(self, owner: MechanicalRouting.RoutingManager) -> None: ...
    def CreateAssemblies3DRunIntoContainerPart(self, containerPart: Part, runId: str) -> None:
        ...
    def Tag(self) -> Tag: ...



class RoutingManager(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def GetRoutingManager(self, owner: Session) -> MechanicalRouting.RoutingManager:
        ...
    def GetPortsFromFitting(self, fittingComponent: Assemblies.Component, ports: typing.List[Routing.Port]) -> None:
        ...
    def ExportCablewayToFile(self, part: BasePart, xmlFileName: str, action: str, dataTypeToExport: MechanicalRouting.RoutingManager.DataType, maxSearchLevels: int) -> None:
        ...
    def AddGuidToObjectAttribute(self, guidObject: NXObject, attributeName: str) -> None:
        ...
    def GetCoincidentNodes(self, nodeOccurrence: TaggedObject, coincidentNodes: typing.List[TaggedObject]) -> None:
        ...
    def Tag(self) -> Tag: ...

    BuilderFactory: MechanicalRouting.BuilderFactory
    ConnectivityService: MechanicalRouting.ConnectivityService
    LogicalDesignService: MechanicalRouting.LogicalDesignService
    RunAssembliesService: MechanicalRouting.RunAssembliesService
    RunsManager: MechanicalRouting.RunsManager
    RunsAssignmentManager: MechanicalRouting.RunsAssignmentManager
    SpoolManager: MechanicalRouting.SpoolManager


    class DataType(enum.Enum):
        All = 0
        Network = 1
        Devices = 2
    

class RefreshRunsFromTeamcenterBuilder(Builder):
    def __init__(self) -> None: ...
    def GetRefreshStatusForRun(self, runId: str) -> MechanicalRouting.RefreshRunsFromTeamcenterBuilder.RefreshStatusType:
        ...
    def GetBlockedReasonForRun(self, runId: str) -> MechanicalRouting.RefreshRunsFromTeamcenterBuilder.BlockedReasonType:
        ...
    def GetTimestampOfRefreshedRun(self, runId: str) -> int:
        ...


    class RefreshStatusType(enum.Enum):
        Unknown = 0
        UpToDate = 1
        Refreshed = 2
        Blocked = 3
        Deleted = 4
        Failed = 5
    

    class BlockedReasonType(enum.Enum):
        NotBlocked = 0
        LoadedInPid = 1
        OtherRunsBlocked = 2
        NotSpecified = 3
    

class PipingComponentFileBuilder(Builder):
    def __init__(self) -> None: ...
    ComponentsCollector: Routing.RouteObjectCollector
    PcfFileName: str


class LogicalDesignService(Utilities.NXRemotableObject):
    def __init__(self, owner: MechanicalRouting.RoutingManager) -> None: ...
    def Assign3DPortToLogicalPort(self, logicalPort: NXObject, physicalPort: Routing.Port) -> None:
        ...
    def Unassign3DPortsFromLogicalPort(self, container: Assemblies.Component, logicalPort: NXObject) -> None:
        ...
    def GetMappingStatus(self, routingObject: NXObject, container: Assemblies.Component) -> MechanicalRouting.LogicalDesignService.MappingStatus:
        ...
    def GetMappingStatusMessage(self, routingObject: NXObject, container: Assemblies.Component) -> str:
        ...
    def AssignComponentsToLogicalConnection(self, components: typing.List[Assemblies.Component], logicalConnection: NXObject) -> None:
        ...
    def UnassignComponentsToLogicalConnection(self, container: Assemblies.Component, logicalConnection: NXObject) -> None:
        ...
    def AssignComponentToLogicalEquipment(self, logicalEquipment: NXObject, component: Assemblies.Component) -> None:
        ...
    def UnassignComponentToLogicalEquipment(self, container: Assemblies.Component, logicalEquipment: NXObject) -> None:
        ...
    def GetRunsInContainer(self, container: Assemblies.Component) -> typing.List[NXObject]:
        ...
    def MakeRunActive(self, container: Assemblies.Component, run: NXObject) -> None:
        ...
    def GetActiveRun(self, container: Assemblies.Component) -> NXObject:
        ...
    def EnsureLogicalModelIsLoaded(self, container: Assemblies.Component) -> None:
        ...
    def ReassignComponentsFromLogicalConnection(self, container: Assemblies.Component, sourceLogicalConnection: NXObject, destinationObject: NXObject) -> None:
        ...
    def ReassignComponentsToRun(self, components: typing.List[Assemblies.Component], run: NXObject) -> None:
        ...
    def DeleteRuns(self, runs: typing.List[NXObject]) -> None:
        ...
    def LoadAllComponents(self, run: NXObject) -> None:
        ...
    def IsRunIncludedInSubset(self, container: Assemblies.Component, run: NXObject) -> bool:
        ...
    def Tag(self) -> Tag: ...



    class MappingStatus(enum.Enum):
        Pass = 0
        OutOfDate = 1
        Unloaded = 2
        Fail = 3
        Unknown = 4
        ConnectionChanged = 5
        ParentRunNotConfiguredOrDeleted = 6
        OneOrMoreRunBranchesNotSavedToTeamcenter = 7
        RunBranchNotSavedToTeamcenter = 8
        DeviationOfDiscipline = 9
        DeviationOfSpecification = 10
        DeviationOfDiscAndSpec = 11
    

class EndformBuilder(Builder):
    def __init__(self) -> None: ...
    def SetPartNumberIdentifier(self, partNumber: str) -> None:
        ...
    def SetClassificationIdentifier(self, classificationId: str) -> None:
        ...
    def SetFileName(self, filename: str) -> None:
        ...
    def CreateRouteControlPointListItem(self) -> Routing.RouteObjectCollector:
        ...
    def PlaceEndform(self) -> None:
        ...
    def EditEndform(self) -> None:
        ...
    def RemoveEndform(self) -> None:
        ...
    RouteControlPointList: Routing.RouteObjectCollectorList
    RouteObjectCollector: Routing.RouteObjectCollector


class EditCutElbowBuilder(Builder):
    def __init__(self) -> None: ...
    LockCutAngle: bool
    RouteObjectCollector: Routing.RouteObjectCollector


    class Type(enum.Enum):
        Lock = 0
        Unlock = 1
    

class DynamicCutElbowBehaviorBuilder(Builder):
    def __init__(self) -> None: ...
    def SetModelElementRevision(self, modelElementRevision: PDM.ModelElementRevision) -> None:
        ...
    def SetLockedCutElbow(self, lockState: bool) -> None:
        ...
    def IsLockedCutElbow(self) -> bool:
        ...


class ConnectivityService(Utilities.NXRemotableObject):
    def __init__(self, owner: MechanicalRouting.RoutingManager) -> None: ...
    def GetConnectedPorts(self, part: Part, connectedPorts1: typing.List[Routing.Port], connectedPorts2: typing.List[Routing.Port]) -> None:
        ...
    def GetPortsConnectedToDesignElement(self, part: Assemblies.Component, connectedPorts1: typing.List[Routing.Port], connectedPorts2: typing.List[Routing.Port]) -> None:
        """[Obsolete("Deprecated in NX1899.0.0.  JA_MECHANICALROUTING_CONNECTIVITY_SERVICE_get_connected_ports_from_component")"""
        ...
    def GetComponentsConnectedToDesignElement(self, containerTag: Assemblies.Component, componentTag: Assemblies.Component, connectedComponents: typing.List[Assemblies.Component], errorList: ErrorList) -> None:
        """[Obsolete("Deprecated in NX1926.0.0.  JA_MECHANICALROUTING_CONNECTIVITY_SERVICE_get_components_connected_to_component")"""
        ...
    def GetConnectedPortsFromComponent(self, part: Assemblies.Component, connectedPorts1: typing.List[Routing.Port], connectedPorts2: typing.List[Routing.Port]) -> None:
        ...
    def GetComponentsConnectedToComponent(self, containerTag: Assemblies.Component, componentTag: Assemblies.Component, componentType: MechanicalRouting.ConnectivityService.ComponentType, connectedComponents: typing.List[Assemblies.Component], errorList: ErrorList) -> None:
        """[Obsolete("Deprecated in NX1953.0.0.  No alternative provided for this method.")"""
        ...
    def Tag(self) -> Tag: ...



    class ComponentType(enum.Enum):
        Fitting = 0
        Stock = 1
        Any = 2
    

class CollectionsManager(Utilities.NXRemotableObject):
    def __init__(self, owner: Part) -> None: ...
    def Tag(self) -> Tag: ...

    CablewayNearNodes: MechanicalRouting.CablewayNearNodeCollection
    Spools: MechanicalRouting.SpoolCollection


class CablewayNodeIdentifierBuilder(Builder):
    def __init__(self) -> None: ...
    def GetNodes(self) -> typing.List[SmartObject]:
        ...
    def SetNodes(self, nodes: typing.List[SmartObject]) -> None:
        ...
    def SetIdentifiers(self, identifiers: str) -> None:
        ...
    NodeSelection: Routing.RouteObjectCollector


class CablewayNearNodeCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[MechanicalRouting.CablewayNearNode]:
        ...
    def __init__(self, owner: MechanicalRouting.CollectionsManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateCablewayNearNodeForDevice(self, device: Assemblies.Component, nodes: typing.List[SmartObject], distances: float) -> MechanicalRouting.CablewayNearNode:
        ...
    def CreateCablewayNearNodeForMultiPort(self, multiPort: Routing.MultiPort, nodes: typing.List[SmartObject], distances: float) -> MechanicalRouting.CablewayNearNode:
        ...
    def FindCablewayNearNodeFromDevice(self, device: Assemblies.Component) -> MechanicalRouting.CablewayNearNode:
        ...
    def FindCablewayNearNodeFromMultiPort(self, multiPort: Routing.MultiPort) -> MechanicalRouting.CablewayNearNode:
        ...
    def Tag(self) -> Tag: ...



class CablewayNearNodeBuilder(Builder):
    def __init__(self) -> None: ...
    def RemoveDeviceComponent(self) -> None:
        ...
    def RemoveMultiport(self) -> None:
        ...
    def GetNodes(self) -> typing.List[SmartObject]:
        ...
    def SetNodes(self, nodes: typing.List[SmartObject]) -> None:
        ...
    def GetDistances(self) -> float:
        ...
    def SetDistances(self, distances: float) -> None:
        ...
    DeviceComponent: Assemblies.Component
    DeviceSelection: SelectNXObjectList
    Multiport: Routing.MultiPort
    NodeSelection: SelectNXObjectList


class CablewayNearNode(NXObject):
    def __init__(self) -> None: ...
    def GetNodes(self) -> typing.List[SmartObject]:
        ...
    def SetNodes(self, nodes: typing.List[SmartObject]) -> None:
        ...
    def GetDistances(self) -> float:
        ...
    def SetDistances(self, distances: float) -> None:
        ...
    Device: Assemblies.Component
    Multiport: Routing.MultiPort


class CablewayExportBuilder(Builder):
    def __init__(self) -> None: ...
    def ExportToFile(self, xmlFileName: str, dataTypeToExport: MechanicalRouting.RoutingManager.DataType, maxSearchLevels: int) -> None:
        ...
    def ExportToTeamcenter(self, itemIDRev: str, dataTypeToExport: MechanicalRouting.RoutingManager.DataType, maxSearchLevels: int) -> None:
        ...
    ExportType: MechanicalRouting.CablewayExportBuilder.ExportMode


    class ExportMode(enum.Enum):
        Native = 0
        Teamcenter = 1
    

class CablewayAttributeBuilder(Builder):
    def __init__(self) -> None: ...
    def BuildEquivalentPointsMap(self, objects: typing.List[TaggedObject]) -> None:
        ...
    def CopyTemplateAttributesToEquivalentPoints(self, objects: typing.List[TaggedObject]) -> None:
        ...
    AttributeCatalog: MechanicalRouting.CablewayAttributeBuilder.AttributeCatalogType
    SelectedObjectList: SelectNXObjectList


    class AttributeCatalogType(enum.Enum):
        EditPointAttributes = 0
        EditCurveAttributes = 1
        EditHangerAttributes = 2
    

class BulkReplacementBuilder(Routing.BulkReplacementBuilder):
    def __init__(self) -> None: ...


class BuilderFactory(Utilities.NXRemotableObject):
    def __init__(self, owner: MechanicalRouting.RoutingManager) -> None: ...
    def CreateDynamicCutElbowBehaviorBuilder(self, part: Part) -> MechanicalRouting.DynamicCutElbowBehaviorBuilder:
        ...
    def CreatePipingComponentFileBuilder(self, part: Part) -> MechanicalRouting.PipingComponentFileBuilder:
        ...
    def CreateBulkReplacementBuilder(self, part: Part, workOcc: Assemblies.Component, segmentsOrStocks: typing.List[NXObject]) -> MechanicalRouting.BulkReplacementBuilder:
        ...
    def CreateRefreshRunsFromTeamcenterBuilder(self, containerPartOccurrence: Assemblies.Component) -> MechanicalRouting.RefreshRunsFromTeamcenterBuilder:
        ...
    def CreateEndformBuilder(self, part: Part, workOcc: Assemblies.Component) -> MechanicalRouting.EndformBuilder:
        ...
    def CreateEditCutElbowBuilder(self, part: Part, workOcc: Assemblies.Component) -> MechanicalRouting.EditCutElbowBuilder:
        ...
    def CreateCablewayExportBuilder(self, part: Part) -> MechanicalRouting.CablewayExportBuilder:
        ...
    def CreateCablewayNearNodeBuilder(self, part: Part) -> MechanicalRouting.CablewayNearNodeBuilder:
        ...
    def CreateCablewayAttributeBuilder(self, part: Part) -> MechanicalRouting.CablewayAttributeBuilder:
        ...
    def CreateSpoolBuilder(self, part: Part, spoolToEdit: MechanicalRouting.Spool) -> MechanicalRouting.SpoolBuilder:
        ...
    def CreateCablewayNodeIdentifierBuilder(self, part: Part) -> MechanicalRouting.CablewayNodeIdentifierBuilder:
        ...
    def Tag(self) -> Tag: ...



