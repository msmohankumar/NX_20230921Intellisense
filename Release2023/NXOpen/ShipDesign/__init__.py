from ...NXOpen import *
from ..ShipDesign import *

import typing
import enum

class ShipSession(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def Tag(self) -> Tag: ...

    Navigators: ShipDesign.NavigatorCollection
    Generator: ShipDesign.Generator
    GeneralArrangement: ShipDesign.GeneralArrangementManager
    ApplicationUtils: ShipDesign.ApplicationUtils


class ShipNavigatorRoot(NXObject):
    def __init__(self) -> None: ...


class ShipNavigatorNodeBuilder(Builder):
    def __init__(self) -> None: ...
    ExpandChildNodes: bool
    NodeName: str
    NodeType: ShipDesign.ShipNavigatorNodeBuilder.NodeTypes
    SourceFeatures: Features.SelectFeatureList
    SourceParts: Assemblies.SelectComponentList


    class NodeTypes(enum.Enum):
        Object = 0
        Part = 1
        Container = 2
    

class PaintParametersParameterValue(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...


class PaintParametersData(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def EditParameter(self, parameterName: str, parameterValue: str) -> None:
        ...
    def SetParameterStatus(self, parameterName: str, parameterStatus: int, isAdd: bool) -> None:
        ...
    def SetPaintParameterStatus(self, parameterName: str, parameterStatus: int, isAdd: bool) -> None:
        ...
    def EditPrimaryParameter(self, parameterName: str, parameterValue: str) -> None:
        ...
    def GetCheckedParameters(self) -> typing.List[ShipDesign.PaintParametersParameterValue]:
        ...
    def RefreshParentParameter(self) -> None:
        ...


    class JaShipPaintParametersStatus(enum.Enum):
        Selected = 1
    

class NavigatorView(NXObject):
    def __init__(self) -> None: ...
    def AddRootNode(self, name: str, nodeObjects: typing.List[TaggedObject]) -> None:
        ...
    def GetRootNode(self) -> ShipDesign.NavigatorNode:
        ...
    def RemoveRootNode(self) -> None:
        ...
    def GetSelectedNodes(self) -> typing.List[ShipDesign.NavigatorNode]:
        ...
    def SetSelectedNodes(self, selectedNodes: typing.List[ShipDesign.NavigatorNode]) -> None:
        ...
    def SetLastSelectedNode(self, selectedNode: ShipDesign.NavigatorNode) -> None:
        ...
    def GetLastSelectedNode(self) -> ShipDesign.NavigatorNode:
        ...


class NavigatorNode(NXObject):
    def __init__(self) -> None: ...
    def GetNodeObjects(self) -> typing.List[TaggedObject]:
        ...
    def SetNodeObjects(self, nodeObjects: typing.List[TaggedObject]) -> None:
        ...
    def AddChild(self, name: str, nodeObjects: typing.List[TaggedObject], createPersistentData: bool) -> ShipDesign.NavigatorNode:
        ...
    def RemoveChild(self, childNode: ShipDesign.NavigatorNode) -> None:
        ...
    def GetParent(self) -> ShipDesign.NavigatorNode:
        ...
    def GetChildren(self) -> typing.List[ShipDesign.NavigatorNode]:
        ...
    def GetNextNode(self) -> ShipDesign.NavigatorNode:
        ...
    def GetPreviousNode(self) -> ShipDesign.NavigatorNode:
        ...
    def GetNextSiblingNode(self) -> ShipDesign.NavigatorNode:
        ...
    def GetPreviousSiblingNode(self) -> ShipDesign.NavigatorNode:
        ...
    def SetIcon(self, icon: str) -> None:
        ...
    def SetDraggable(self, draggable: bool) -> None:
        ...
    def UpdateProperty(self, propertyName: str, propertyValue: str) -> None:
        ...
    def GetProperty(self, propertyName: str) -> str:
        ...
    CheckStatus: bool
    Modifiable: bool
    Title: str


class NavigatorCollection(Utilities.NXRemotableObject):
    def __init__(self, owner: ShipDesign.ShipSession) -> None: ...
    def ShowNavigator(self, index: int, bitmap: str, tooltip: str, name: str) -> ShipDesign.Navigator:
        ...
    def RegisterNavigator(self, index: int, bitmap: str, tooltip: str, name: str) -> None:
        ...
    def UnregisterNavigator(self, index: int) -> None:
        ...
    def IsNavigatorRegistered(self, index: int) -> bool:
        ...
    def GetNavigatorCount(self) -> int:
        ...
    def ActiveNavigator(self, index: int) -> None:
        ...
    def GetNavigator(self, index: int) -> ShipDesign.Navigator:
        ...
    def RefreshNavigator(self, index: int) -> None:
        ...
    def GetShipNavigatorRoot(self) -> ShipDesign.ShipNavigatorRoot:
        ...
    def UnloadPartAndItsChildren(self, partTag: BasePart) -> None:
        ...
    def SaveConfigureFile(self, index: int) -> None:
        ...
    def ChangeNodeState(self, tgTargetNode: ShipDesign.NavigatorNode, status: int) -> None:
        ...
    def ChangeNodesState(self, tgNodes: typing.List[ShipDesign.NavigatorNode], status: int) -> None:
        ...
    def RemoveNodes(self, index: int, tgNodes: typing.List[ShipDesign.NavigatorNode]) -> None:
        ...
    def CopyNode(self, index: int, tgNodes: typing.List[ShipDesign.NavigatorNode]) -> None:
        ...
    def CutNode(self, index: int, tgNodes: typing.List[ShipDesign.NavigatorNode]) -> None:
        ...
    def PasteNode(self, index: int, tgTargetNode: ShipDesign.NavigatorNode) -> None:
        ...
    def ReparentNode(self, index: int, tgTargetNode: ShipDesign.NavigatorNode, tgSourceNode: ShipDesign.NavigatorNode) -> None:
        ...
    def ReparentNodes(self, index: int, tgTargetNode: ShipDesign.NavigatorNode, tgNodes: typing.List[ShipDesign.NavigatorNode]) -> None:
        ...
    def SetNodeName(self, tgTargetNode: ShipDesign.NavigatorNode, name: str) -> None:
        ...
    def SetActiveNode(self, index: int, tgTargetNode: ShipDesign.NavigatorNode) -> None:
        ...
    def SendToSubView(self, index: int, tgTargetNode: ShipDesign.NavigatorNode) -> None:
        ...
    def CreateShipNavigatorNodeBuilder(self, isEdit: bool, tgNode: ShipDesign.NavigatorNode) -> ShipDesign.ShipNavigatorNodeBuilder:
        ...
    def EditFeature(self, tgFeat: Features.Feature) -> None:
        ...
    def GetReferencingNodes(self, tgReferencedObject: TaggedObject) -> typing.List[ShipDesign.NavigatorNode]:
        ...
    def PopulateAndPrintShipNavigator(self, displayPart: BasePart) -> None:
        ...
    def EnterSketchEnvironment(self, sketchFeature: Features.SketchFeature) -> None:
        ...
    def IncrementIgnoreNavigatorViewUpdateEventsLevel(self, index: int) -> None:
        ...
    def DecrementIgnoreNavigatorViewUpdateEventsLevel(self, index: int) -> None:
        ...
    def Tag(self) -> Tag: ...



class Navigator(NXObject):
    def __init__(self) -> None: ...
    def Hide(self) -> None:
        ...
    def Hide(self, hideNavigator: bool) -> None:
        ...
    def ShowView(self, viewIndex: int) -> None:
        ...
    def HideView(self, viewIndex: int) -> None:
        ...
    def GetViewCount(self) -> int:
        ...
    def GetView(self, viewIndex: int) -> ShipDesign.NavigatorView:
        ...
    def RegisterNodeContextMenuItem(self, title: str, icon: str, actionCB: ShipDesign.Navigator.NodeContextMenuItemActionCallback, visibilityCB: ShipDesign.Navigator.NodeContextMenuItemVisibilityCallback, isDefaultCB: ShipDesign.Navigator.NodeContextMenuItemDefaultMenuItemCallback) -> None:
        ...
    def RegisterViewContextMenuItem(self, title: str, icon: str, actionCB: ShipDesign.Navigator.ViewContextMenuItemActionCallback, visibilityCB: ShipDesign.Navigator.ViewContextMenuItemVisibilityCallback) -> None:
        ...
    def SetNodeSelectedCallback(self, selectedCB: ShipDesign.Navigator.NodeSelectedCallback) -> None:
        ...
    def SetNodeDeselectedCallback(self, deselectedCB: ShipDesign.Navigator.NodeDeselectedCallback) -> None:
        ...
    def SetNodeCheckCallback(self, checkCB: ShipDesign.Navigator.NodeCheckCallback) -> None:
        ...
    def SetNodePropertyCompareCallback(self, checkCB: ShipDesign.Navigator.NodePropertyCompareCallback) -> None:
        ...
    def SetRootPart(self, rootPart: BasePart) -> None:
        ...
    def GetRootPart(self) -> BasePart:
        ...
    def RegisterNodesContextMenuItem(self, title: str, icon: str, actionCB: ShipDesign.Navigator.NodesContextMenuItemActionCallback, visibilityCB: ShipDesign.Navigator.NodesContextMenuItemVisibilityCallback, isDefaultCB: ShipDesign.Navigator.NodesContextMenuItemDefaultMenuItemCallback) -> None:
        ...


    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

class NamespaceDoc(System.Object):
    def __init__(self) -> None: ...


class Generator(Utilities.NXRemotableObject):
    def __init__(self, owner: ShipDesign.ShipSession) -> None: ...
    def CheckBodyClash(self, bodyA: DisplayableObject, bodyB: DisplayableObject) -> ShipDesign.Generator.ClashType:
        ...
    def GetOutlineSheetbody(self, bodies: typing.List[Body], datumPlane: DatumPlane) -> Body:
        ...
    def AskPlatesSpatialRelations(self, hull: TaggedObject, inSheets: typing.List[TaggedObject], tolerence: float, elementIndex: int, outElements: typing.List[TaggedObject]) -> None:
        ...
    def AskIntersectionPlates(self, plate: TaggedObject, inSheets: typing.List[TaggedObject], tolerence: float, outElements: typing.List[TaggedObject]) -> None:
        ...
    def RegisterApplicationCallback(self, name: str, enterCallback: ShipDesign.Generator.ShipCustomerEnterApplication, exitCallback: ShipDesign.Generator.ShipCustomerExitApplication) -> None:
        ...
    def CreateCargo(self, inSheets: typing.List[TaggedObject], tolerence: float, outElements: typing.List[TaggedObject]) -> None:
        ...
    def GetSheetsEdgesLaidOnTargetSheet(self, outSheet: TaggedObject, inSheets: typing.List[TaggedObject], tolerence: float, outElements: typing.List[TaggedObject]) -> None:
        ...
    def CreateProgress(self, numSteps: int, operationName: str) -> None:
        ...
    def DeleteProgress(self) -> None:
        ...
    def AdvanceProgress(self, stepNumber: int) -> None:
        ...
    def Tag(self) -> Tag: ...



    

    

    class ClashType(enum.Enum):
        None = 0
        AInB = 1
        BInA = 2
        Exists = 3
        AbutNoClass = 4
        AbutBInA = 5
        AbutBOutA = 6
        Interfere = 7
    

    

    

    

    

class GeneralArrangementManager(Utilities.NXRemotableObject):
    def __init__(self, owner: ShipDesign.ShipSession) -> None: ...
    def GASketchEnd(self) -> None:
        ...
    def ResizeGrid(self) -> None:
        ...
    def MakeContainerPart(self, part: Part) -> None:
        ...
    def CreateSkecthRectangle(self, sketch: Sketch) -> None:
        ...
    def CreateWaveLinkPlane(self, srPlane: TaggedObject) -> TaggedObject:
        ...
    def RemoveSketchFromMoldRefSet(self, sketch: TaggedObject) -> None:
        ...
    def WaveLinkFrameBarToDeckRefPart(self) -> None:
        ...
    def EditRoomCallBack(self) -> None:
        ...
    def RemoveUnusedExpression(self) -> None:
        ...
    def ReloadMaterialData(self, bShip: bool) -> None:
        ...
    def Tag(self) -> Tag: ...



class ApplicationUtils(Utilities.NXRemotableObject):
    def __init__(self, owner: ShipDesign.ShipSession) -> None: ...
    def RegisterButtonApplication(self, appId: int, buttonName: str) -> None:
        """[Obsolete("Deprecated in NX2007.0.0.  This functionality is no longer supported.")"""
        ...
    def RegisterApplicationForModlFeatureEdit(self, appName: str) -> None:
        """[Obsolete("Deprecated in NX2007.0.0.  This functionality is no longer supported.")"""
        ...
    def RegisterApplicationSensitivityOnApplicationChange(self, appName: str, appsWhereToLive: str) -> None:
        """[Obsolete("Deprecated in NX2007.0.0.  This functionality is no longer supported.")"""
        ...
    def RegisterLastApplication(self, part: Part, appName: str) -> None:
        """[Obsolete("Deprecated in NX2007.0.0.  This functionality is no longer supported.")"""
        ...
    def Tag(self) -> Tag: ...



