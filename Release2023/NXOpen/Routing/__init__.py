from . import Electrical
from ...NXOpen import *
from ..Routing import *

import typing
import enum

class WrapApplicationType(enum.Enum):
    Unknown = 0
    Spot = 1
    Overlapped = 2
    Gapped = 3


class WireCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Wire]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateWire(self, startControlPoint: Routing.ControlPoint, endControlPoint: Routing.ControlPoint, segments: typing.List[Routing.ISegment], stockData: Routing.StockData, stocks: typing.List[Routing.Stock], lengthOfWire: float) -> Routing.Wire:
        ...
    def Tag(self) -> Tag: ...



class Wire(NXObject):
    def __init__(self) -> None: ...
    def GetStock(self) -> typing.List[Routing.Stock]:
        ...
    def GetSegments(self) -> typing.List[Routing.ISegment]:
        ...
    def GetSegmentList(self) -> typing.List[Routing.ISegment]:
        ...
    def AddSegmentsToList(self, objs: typing.List[Routing.ISegment]) -> None:
        ...
    def DelSegmentsFromList(self, objs: typing.List[Routing.ISegment]) -> None:
        ...
    ControlPointEnd: Routing.ControlPoint
    ControlPointStart: Routing.ControlPoint


class WindCatcherBuilder(Builder):
    def __init__(self) -> None: ...
    def GetClosestParentDuctSegment(self) -> Routing.LineSegment:
        ...
    EndAngleExpression: Expression
    ParentDuct: Routing.Stock
    ReverseWindDirection: bool
    TrimToParentDuct: bool
    Type: Routing.WindCatcherBuilder.WindCatcherType
    WindCatcherDuct: Routing.Stock


    class WindCatcherType(enum.Enum):
        Arc = 0
        Triangle = 1
    

class WindCatcher(Features.BodyFeature):
    def __init__(self) -> None: ...


class WatertightFittingsBuilder(Builder):
    def __init__(self) -> None: ...
    def SetFilenameFromFilenewbuilder(self, fileNewBuilder: FileNew) -> None:
        ...
    def GetRequiredAttributes(self) -> Routing.CharacteristicList:
        ...
    def SetRequiredAttributes(self, charxData: Routing.CharacteristicList) -> None:
        ...
    def GetOptionalAttributes(self) -> Routing.CharacteristicList:
        ...
    def SetOptionalAttributes(self, charxData: Routing.CharacteristicList) -> None:
        ...
    Filename: str
    FittingMembers: Routing.RouteObjectCollector
    FlangeDirection: bool
    FlangeOffset: Expression
    FlangeSketch: Section
    FlangeThickness: Expression


class UserDefined(enum.Enum):
    NotUserDefined = 0
    UserDefined = 1


class UnifyPathBuilder(Builder):
    def __init__(self) -> None: ...
    def GetUnifyCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetUnifyCharacteristics(self, charxType: NXObject.AttributeType, charxName: str, charxValue: str) -> None:
        ...
    ReferenceObject: SelectNXObject
    RouteObjectCollector: Routing.RouteObjectCollector


class Type(enum.Enum):
    Unknown = -1
    FixedCrossSection = 0
    Wrapped = 1
    Sleeved = 2
    Flagged = 3


class TransformPathBuilder(Builder):
    def __init__(self) -> None: ...
    def StartDrag(self) -> None:
        ...
    def DragByTransform(self, translation: Vector3d, rotation: Matrix3x3) -> None:
        ...
    def StopDrag(self) -> None:
        ...
    def DestroyAllPreviewObjects(self) -> None:
        ...
    def SetCopyTransform(self, translation: Vector3d, rotation: Matrix3x3) -> None:
        ...
    def GetIthSetOfObjects(self, ith: int, objects: typing.List[NXObject]) -> None:
        ...
    def DetachSelectedPath(self) -> None:
        ...
    def AttachSelectedPath(self) -> None:
        ...
    def RemoveConnectedPartsInBuilder(self) -> None:
        ...
    def AddConnectedPartsInBuilder(self) -> None:
        ...
    def UpdateConnectedPartList(self, selectedObject: typing.List[NXObject], deselectedObject: typing.List[NXObject]) -> None:
        ...
    def UpdateSelObjectsVector(self) -> None:
        ...
    def SetCollisionObject(self, object: NXObject) -> None:
        ...
    def GetCopiedAttributes(self) -> Routing.CharacteristicList:
        ...
    def SetCopiedAttributes(self, charxData: Routing.CharacteristicList) -> None:
        ...
    def GetOmittedAttributes(self) -> Routing.CharacteristicList:
        ...
    def SetOmittedAttributes(self, charxData: Routing.CharacteristicList) -> None:
        ...
    AcrossAssemblies: bool
    AttributeReferenceSelection: Routing.RouteObjectCollector
    CheckForDuplicates: bool
    CopyConnectedParts: bool
    MoveOrCopyOption: Routing.TransformPathBuilder.TransformOption
    MoveWithExtensionSegments: bool
    NumberOfCopies: int
    PathSelection: Routing.RouteObjectCollector
    Transform: GeometricUtilities.ModlMotion


    class TransformOption(enum.Enum):
        MoveOriginal = 0
        CopyOriginal = 1
    

    class CopyAttributes(enum.Enum):
        Defaults = 0
        UserSpecified = 1
    

class TerminalPortCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.TerminalPort]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateTerminalPort(self, origin: Point3d, alignmentVector: Vector3d, multiPort: Routing.MultiPort, pinIdentifier: str) -> Routing.TerminalPort:
        ...
    def CreateTerminalPort(self, origin: Point3d, alignmentVector: Vector3d, point: Point, multiPort: Routing.MultiPort, pinIdentifier: str) -> Routing.TerminalPort:
        ...
    def CreateTerminalPort(self, origin: Point3d, alignmentVector: Vector3d, derivationObject: Axis, multiPort: Routing.MultiPort, pinIdentifier: str) -> Routing.TerminalPort:
        ...
    def Tag(self) -> Tag: ...



class TerminalPortBuilder(Builder):
    def __init__(self) -> None: ...
    IndividualCutBack: GeometricUtilities.OnPathDimensionBuilder
    IndividualExtenstion: Expression
    Modeled: bool
    TerminalPort: NXObject


class TerminalPort(Routing.Port):
    def __init__(self) -> None: ...
    def SetAlignVector(self, vector: Vector3d) -> None:
        ...
    def SetRotationVector(self, vector: Vector3d) -> None:
        ...
    def SetRotationObject(self, rotationObject: DisplayableObject) -> None:
        ...
    def SetForwardExtension(self, forwardExtension: float) -> None:
        ...
    def SetEngagement(self, engagement: float) -> None:
        ...
    def SetCutbackLength(self, cutbackLength: float) -> None:
        ...
    MultiPort: Routing.MultiPort
    PinIdentifier: str
    Axis: Axis
    CutbackLengthObject: Expression
    EngagementObject: Expression
    ForwardExtensionObject: Expression


class Terminal(enum.Enum):
    NotTerminalSeg = 0
    TerminalSeg = 1


class TangencyGroupBuilder(Builder):
    def __init__(self) -> None: ...
    SegmentList: SelectNXObjectList


class SubdivideSegmentBuilder(Builder):
    def __init__(self) -> None: ...
    def SetSplineSettings(self, createTangency: bool, addPoints: bool) -> None:
        ...
    def GetSplineSettings(self, createTangency: bool, createPoints: bool) -> None:
        ...
    def SetSplineSettings(self, createTangency: bool, addPoints: bool, addFixConstraint: bool) -> None:
        ...
    def GetSplineSettings(self, createTangency: bool, createPoints: bool, addFixConstraint: bool) -> None:
        ...
    EqualSegmentsOption: Routing.SubdivideSegmentBuilder.EqualSegmentsMethod
    ReverseSubdividePoint: bool
    Segment: Routing.SelectISegment
    SubdivideArcLength: GeometricUtilities.OnPathDimensionBuilder
    SubdivideEndPercentage: GeometricUtilities.OnPathDimensionBuilder
    SubdivideNumSegments: int
    SubdividePoint: GeometricUtilities.OnPathDimensionBuilder
    SubdivideStartPercentage: GeometricUtilities.OnPathDimensionBuilder
    Type: Routing.SubdivideSegmentBuilder.Types


    class Types(enum.Enum):
        AtPoint = 0
        EqualSegments = 1
        ArcLengthSegments = 2
    

    class EqualSegmentsMethod(enum.Enum):
        EqualArcLength = 0
        EqualParameter = 1
    

class StockUse(enum.Enum):
    LegacyStock = 0
    Bundled = 1
    StockAsComponent = 2
    StockInComponent = 3
    Deformed = 4


class StockType(enum.Enum):
    Unknown = 0
    FixedCrossSection = 1
    Wrapped = 2
    Sleeved = 3
    Flagged = 4


class StockTransitionBuilder(Builder):
    def __init__(self) -> None: ...
    def SetStockTransitionProperties(self) -> None:
        ...
    EndProfileOriginCurve: SelectCurve
    EndProfileOriginCurveDirection: bool
    SegmentCollector: Routing.RouteObjectCollector
    StartProfileOriginCurve: SelectCurve
    StartProfileOriginCurveDirection: bool
    StockSettings: Routing.PathStockBuilder


class StockTransition(Routing.Stock):
    def __init__(self) -> None: ...


class StockStyleBuilder(Builder):
    def __init__(self) -> None: ...
    EnumStockStyle: Routing.StockStyleBuilder.StockStyle
    RouteSelectionStock: Routing.RouteObjectCollector


    class StockStyle(enum.Enum):
        Centerline = 0
        SimpleSolid = 1
        DetailedSolid = 2
    

class StockStyle(enum.Enum):
    None = 0
    Simple = 1
    Detailed = 2


class StockPort(Routing.Port):
    def __init__(self) -> None: ...
    def GetStock(self) -> Routing.Stock:
        ...
    def GetExtractPort(self) -> Routing.ExtractPort:
        ...


class StockPartConverterBuilder(Builder):
    def __init__(self) -> None: ...
    ConvertWorkPartAndLoadedChildrenOption: Routing.StockPartConverterBuilder.PartOption
    RecreateStockComponentsOption: bool


    class PartOption(enum.Enum):
        WorkPart = 0
        WorkPartWithLoadedChildren = 1
    

class StockOffsetPortCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.StockOffsetPort]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateStockOffsetPort(self, partOccurrence: Assemblies.Component, portPrototype: Routing.Port) -> Routing.StockOffsetPort:
        ...
    def Tag(self) -> Tag: ...



class StockOffsetPort(Routing.Port):
    def __init__(self) -> None: ...
    def GetPortOccurrence(self) -> Routing.Port:
        ...
    def GetOffsetPort(self) -> Routing.Port:
        ...
    def GetMaxPathStockDiameter(self) -> float:
        ...


class StockOffsetPointBuilder(Builder):
    def __init__(self) -> None: ...
    def GetPointData(self, pointType: Routing.StockOffsetPointBuilder.PointType, basePoint: Point, offsetDir: Direction, offsetExpression: str) -> None:
        ...
    def GetStockOffsetPointObject(self) -> TaggedObject:
        ...
    ConstraintPoint: Point
    PointSelection: SelectNXObject


    class PointType(enum.Enum):
        Normal = 0
        StockOffset = 1
    

class StockDevice(Routing.SingleDevice):
    def __init__(self) -> None: ...
    def LogStockDeviceWiresforConcurrency(self, partTag: Part) -> None:
        ...
    StockDefinition: Routing.StockDefinition
    StockLength: float


class StockDefinition(Routing.ItemDefinition):
    def __init__(self) -> None: ...
    OuterDiameter: float


class StockDataType(enum.Enum):
    NotBundled = 0
    Bundled = 1


class StockDataRefreshBuilder(Builder):
    def __init__(self) -> None: ...
    def RefreshStockData(self, stockData: Routing.StockData) -> Routing.StockDataRefreshBuilder.RefreshStatus:
        ...
    Status: Routing.StockDataRefreshBuilder.RefreshStatus
    StockData: Routing.StockData


    class RefreshStatus(enum.Enum):
        Ok = 0
        StockDataTagInvalid = 1
        StockDataMissingSearchAttributes = 2
        StockPartNotFoundInReuseLibrary = 3
        MultipleStocksFoundInReuseLibrary = 4
        StockPartNotRequired = 5
        StockPartNotFoundForLoading = 6
        CannotFullyLoadStockPart = 7
        StockDataNotFoundInLoadedPart = 8
        StockConversionError = 9
        ErrorRefreshUndone = 10
    

class StockDataCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.StockData]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateStockData(self, values: Routing.CharacteristicList) -> Routing.StockData:
        ...
    def CreateStockData(self) -> Routing.StockData:
        ...
    def RemoveUnusedStockData(self) -> None:
        ...
    def Tag(self) -> Tag: ...



class StockData(NXObject):
    def __init__(self) -> None: ...
    def GetCrossSections(self) -> typing.List[Routing.CrossSection]:
        ...
    def SetCrossSections(self, crossSections: typing.List[Routing.CrossSection]) -> None:
        ...
    def GetAnchors(self) -> typing.List[Routing.Anchor]:
        ...
    def SetAnchors(self, anchors: typing.List[Routing.Anchor]) -> None:
        ...
    def GetIsBundled(self) -> Routing.StockDataType:
        ...
    def GetStocks(self) -> typing.List[Routing.Stock]:
        ...
    def GetBundledStockDatas(self) -> typing.List[Routing.StockData]:
        ...
    def GetNamedAnchor(self, anchorName: str) -> Routing.Anchor:
        ...
    def GetStyledCross(self, stockStyle: Routing.StockStyle) -> Routing.CrossSection:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...


class StockColorBuilder(Builder):
    def __init__(self) -> None: ...
    RouteStockPickColor: NXColor
    RouteStockSelectStockFace: ScCollector


class StockCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Stock]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateStock(self, stockData: Routing.StockData, anchor: Routing.Anchor, crossSection: Routing.CrossSection, segments: typing.List[Routing.ISegment]) -> typing.List[Routing.Stock]:
        ...
    def GetComponentStock(self, component: Assemblies.Component) -> Routing.Stock:
        ...
    def ConvertToStockAsComponents(self, convertSpaceReservartion: bool, nameType: Routing.ComponentName) -> None:
        ...
    def AddStock(self, stockPart: Routing.CharacteristicList, dataCharx: Routing.CharacteristicList, segments: typing.List[Routing.ISegment], routeLevel: str) -> None:
        ...
    def AddStock(self, stockPart: Routing.CharacteristicList, dataCharx: Routing.CharacteristicList, segments: typing.List[Routing.ISegment], routeLevel: str, stocks: typing.List[Routing.Stock]) -> None:
        ...
    def AddStock(self, stockPart: Routing.CharacteristicList, dataCharx: Routing.CharacteristicList, segments: typing.List[Routing.ISegment], routeLevel: str, isSpaceReservation: bool, stocks: typing.List[Routing.Stock]) -> None:
        ...
    def AddStock(self, stockPart: Routing.CharacteristicList, dataCharx: Routing.CharacteristicList, segments: typing.List[Routing.ISegment], routeLevel: str, isSpaceReservation: bool, anchorName: str, stocks: typing.List[Routing.Stock]) -> None:
        ...
    def RemoveStock(self, segments: typing.List[Routing.ISegment]) -> None:
        ...
    def RemoveAllFillerStocks(self, segments: typing.List[Routing.ISegment]) -> None:
        ...
    def UpdateBundleStockForFiller(self, segments: typing.List[Routing.ISegment]) -> None:
        ...
    def SetAttachedStockLength(self, partOcc: Assemblies.Component) -> None:
        ...
    def SetReferenceStockFromObject(self, object: NXObject) -> None:
        ...
    def ResetReferenceStock(self) -> None:
        ...
    def Tag(self) -> Tag: ...



class StockBuilder(Builder):
    def __init__(self) -> None: ...
    FlipStock: bool
    GridTopologyEligibilityFlag: bool
    RemoveExistingStock: bool
    RotationValue: Expression
    SegmentCollector: Routing.RouteObjectCollector
    StockAnchor: str
    StockSettings: Routing.PathStockBuilder
    StockStyle: Routing.StockBuilder.StockStyleType
    SwapProfile: bool


    class StockStyleType(enum.Enum):
        Centerline = 0
        SimpleSolid = 1
        DetailedSolid = 2
    

class StockBrowserBuilder(Builder):
    def __init__(self) -> None: ...
    def GetSortedList(self, objects: typing.List[NXObject]) -> None:
        ...
    def SetSortedList(self, objects: typing.List[NXObject]) -> None:
        ...
    def DeleteStocks(self, objects: typing.List[NXObject]) -> None:
        ...
    FilterType: Routing.StockBrowserBuilder.TypeFilter
    NameFilter: str


    class TypeFilter(enum.Enum):
        All = 0
        Stock = 1
        OverStock = 2
        FillerStock = 3
        SpaceReservation = 4
        FittingOverstock = 5
    

class StockBlockBuilder(TaggedObject):
    def __init__(self) -> None: ...
    def GetClassificationObjectIdentifierForStock(self) -> str:
        ...
    def SetClassificationObjectIdentifierForStock(self, classificationObjectId: str) -> None:
        ...
    def SetPartNumberIdentifierForStock(self, partNumberId: str) -> None:
        ...
    def SetPartNumberIdentifierForSpaceReservation(self, partNumberId: str) -> None:
        ...
    def GetFileSpecificationOfStockToPlace(self) -> str:
        ...
    def SetFileSpecificationOfStockToPlace(self, filename: str) -> None:
        ...
    def GetClassificationObjectIdentifierForSpaceReservation(self) -> str:
        ...
    def SetClassificationObjectIdentifierForSpaceReservation(self, classificationObjectId: str) -> None:
        ...
    def GetFileSpecificationOfSpaceReservationToPlace(self) -> str:
        ...
    def SetFileSpecificationOfSpaceReservationToPlace(self, filename: str) -> None:
        ...
    def SetStockSelectionSource(self, stockSelectionSource: Routing.StockBlockBuilder.StockSelectionSource) -> None:
        ...
    def SetSpaceReservationSelectionSource(self, stockSelectionSource: Routing.StockBlockBuilder.SpaceReservationSelectionSource) -> None:
        ...
    def GetLibraryDefinedAttributeHolderForStock(self) -> Routing.AttributeHolder:
        ...
    def GetLibraryDefinedAttributeHolderForSpaceReservation(self) -> Routing.AttributeHolder:
        ...
    def ResetAttributesOnLibraryDefinedAttributeHolder(self) -> None:
        ...
    def SetComponentSelectedInSession(self, component: Assemblies.Component) -> None:
        ...
    def Validate(self) -> bool:
        ...
    Diameter: Expression
    FlatOvalHeight: Expression
    FlatOvalWidth: Expression
    RectangularHeight: Expression
    RectangularWidth: Expression
    RotationAngle: Expression
    SpaceReservationMethodType: Routing.StockBlockBuilder.SpaceReservationMethod
    StartObject: NXObject
    StockMethodType: Routing.StockBlockBuilder.StockMethod
    StockSubType: Routing.StockBlockBuilder.AssignStockSubType
    StockType: Routing.StockBlockBuilder.AssignStockType


    class StockSelectionSource(enum.Enum):
        NotSpecified = 0
        ClassficationObject = 1
        PTBLibrary = 2
        Database = 3
        Session = 4
    

    class StockMethod(enum.Enum):
        None = 0
        SpecifiedStock = 1
    

    class SpaceReservationSelectionSource(enum.Enum):
        NotSpecified = 0
        ClassficationObject = 1
        PTBLibrary = 2
        Session = 3
    

    class SpaceReservationMethod(enum.Enum):
        None = 0
        FromStartObject = 1
        Circular = 2
        Rectangular = 3
        FlatOval = 4
        SpecifiedSpaceReservation = 5
    

    class AssignStockType(enum.Enum):
        Stock = 0
        Overstock = 1
    

    class AssignStockSubType(enum.Enum):
        Stock = 0
        SpaceReservation = 1
    

class Stock(NXObject):
    def __init__(self) -> None: ...
    def GetStockData(self) -> Routing.StockData:
        ...
    def SetStockData(self, stockData: Routing.StockData) -> None:
        ...
    def GetCrossSection(self) -> Routing.CrossSection:
        ...
    def SetCrossSection(self, crossSection: Routing.CrossSection) -> None:
        ...
    def GetAnchor(self) -> Routing.Anchor:
        ...
    def SetAnchor(self, anchor: Routing.Anchor) -> None:
        ...
    def GetStockStyle(self) -> Routing.StockStyle:
        ...
    def SetStockStyle(self, style: Routing.StockStyle) -> None:
        ...
    def GetSegments(self) -> typing.List[Curve]:
        ...
    def AddSegments(self, segments: typing.List[Curve]) -> None:
        ...
    def RemoveSegments(self, segments: typing.List[Curve]) -> None:
        ...
    def GetRotationAngle(self) -> float:
        ...
    def SetRotationAngle(self, rotationAngle: float) -> None:
        ...
    def GetTwistAngle(self) -> float:
        ...
    def SetTwistAngle(self, twistAngle: float) -> None:
        ...
    def GetProfileEnd(self) -> Routing.ProfileFrom:
        ...
    def SetProfileEnd(self, profileEnd: Routing.ProfileFrom) -> None:
        ...
    def GetFlippedStatus(self) -> Routing.Flip:
        ...
    def SetFlippedStatus(self, flipped: Routing.Flip) -> None:
        ...
    def GetPorts(self, startPort: Routing.StockPort, endPort: Routing.StockPort) -> None:
        ...
    def GetStockUse(self) -> Routing.StockUse:
        ...
    def GetFeatures(self) -> typing.List[Features.Feature]:
        ...
    def GetComponent(self) -> Assemblies.Component:
        ...
    def GetNameStatus(self) -> Routing.ComponentName:
        ...
    def GetOriginalLength(self) -> float:
        ...
    def ColorBodies(self) -> None:
        ...
    def SyncComponentAttrs(self, isNewPart: bool) -> None:
        ...
    def AlignStock(self, vector: Vector3d) -> None:
        ...
    def RenameStockComponent(self, partName: str) -> None:
        ...
    def GetBodies(self) -> typing.List[Body]:
        ...
    def GetHarnessDevice(self) -> Routing.Electrical.HarnessDevice:
        ...
    def IsSpaceReservation(self) -> bool:
        ...
    def GetBodySegmentMap(self, feature: Features.Feature, body: Body, stockSegments: typing.List[Curve], pathSegments: typing.List[Curve]) -> None:
        ...
    def ConnectStockComponentWithAssemblyPath(self) -> bool:
        ...
    def FixCrossSectionInvalidities(self) -> bool:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...
    NegateOffsetsFlag: bool


class SplitRunBuilder(Builder):
    def __init__(self) -> None: ...
    def GetAttributeHolder(self) -> NXObject:
        ...
    NameToFrom: bool
    RunName: str
    RunObject: Routing.SelectRun
    SplitObject: Routing.RouteObjectCollector


class SplitDuctBuilder(Builder):
    def __init__(self) -> None: ...
    def CreateNewDivisionsListItem(self, selectedPort: Routing.Port, isAbsoluteFlow: bool) -> Routing.DivisionsBuilder:
        ...
    def AddDivisionsBuilderToList(self, selectedPort: Routing.Port) -> None:
        ...
    DivisionsList: TaggedObjectList
    FlowType: Routing.SplitDuctBuilder.FlowTypes


    class FlowTypes(enum.Enum):
        AbsoluteFlow = 0
        RelativeFlow = 1
    

class SplineSegmentCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.SplineSegment]:
        ...
    def __init__(self, owner: Routing.SegmentManager) -> None: ...
    def __init__(self) -> None: ...
    def Tag(self) -> Tag: ...



class SplineSegment(Spline):
    def __init__(self) -> None: ...
    def GetGuid(self) -> str:
        """[Obsolete("Deprecated in NX2007.0.0.  Use NXOpen.Routing.ISegment.Guid instead.")"""
        ...
    def GenerateNewSegmentGuid(self) -> None:
        """[Obsolete("Deprecated in NX2007.0.0.  Use NXOpen.Routing.ISegment.GenerateNewGuid instead.")"""
        ...
    def GetEndRcps(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint) -> None:
        ...
    def SetEndRcps(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint) -> None:
        ...
    def GetEndPoints(self, startPoint: Point3d, endPoint: Point3d) -> None:
        ...
    def SetEndPoints(self, startPoint: Point3d, endPoint: Point3d) -> None:
        ...
    def GetIsTerminalSegment(self) -> Routing.Terminal:
        ...
    def SetIsTerminalSegment(self, isTerminal: Routing.Terminal) -> None:
        ...
    def GetIsSegmentInterior(self) -> Routing.Interior:
        ...
    def SetSegmentInteriorPart(self, interiorPart: Assemblies.Component) -> None:
        ...
    def GetSegmentStock(self) -> typing.List[Routing.Stock]:
        ...
    def GetSegmentAllStocks(self) -> typing.List[Routing.Stock]:
        ...
    def GetCablewaysLayoutViews(self) -> typing.List[Routing.Electrical.CablewaysLayoutView]:
        ...
    def GetCableDevices(self) -> typing.List[Routing.Electrical.CableDevice]:
        ...
    def GetIsEccentricSegment(self) -> Routing.Eccentric:
        ...
    def ConvertLinearToEccentricLinear(self) -> Routing.ConvertLinearToEccentricLinear:
        ...
    def ConvertEccentricLinearToLinear(self) -> Routing.ConvertEccentricLinearToLinear:
        ...
    def GenerateNewGuid(self) -> None:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...
    IsFlexibleParametricSplineSegment: bool
    SplineData: Routing.SplineData
    FollowCurve: Curve
    Guid: str
    Length: float


class SplinePathBuilder(Builder):
    def __init__(self) -> None: ...
    def AddDefiningPointToSpline(self, point: Point, createNewPoint: bool) -> int:
        ...
    def AddDefiningPointAtAbsoluteCoords(self, point: Point3d) -> None:
        ...
    def UpdateDefiningPointPositionAtIndex(self, index: int, point: Point, inDrag: bool) -> None:
        ...
    def UpdateDefiningPoint(self, index: int, point: Point, inDrag: bool, translation: Vector3d) -> None:
        ...
    def DeleteDefiningPointAtIndex(self, index: int) -> None:
        ...
    def SetSplineMethod(self, splineMethod: Positioning.Constraint.SplineType) -> None:
        """[Obsolete("Deprecated in NX11.0.2.  Use Routing.SplinePathBuilder.DefiningTypes instead.")"""
        ...
    def SetLockToSelectedFlag(self, lockSelected: bool) -> None:
        ...
    def SetAddPointsOnSubdivideFlag(self, addPoints: bool) -> None:
        ...
    def SetCreateTangencyFlag(self, createTangency: bool) -> None:
        ...
    def GetSplineLength(self) -> float:
        ...
    def GetSplineLengthNoShaping(self) -> float:
        ...
    def LockSplineLengthWithShaping(self, length: Expression, slackDirection: Direction) -> None:
        ...
    def LockSplineLengthWithShapingFixedPoints(self, length: Expression, slackDirection: Direction) -> None:
        ...
    def ShapeByAdditionalLengthMovingPoints(self, length: Expression, slackType: Routing.SplinePathBuilder.SplinePathSlackType, slackDirection: Direction) -> None:
        ...
    def LockSplineLengthNoShaping(self, length: Expression) -> None:
        ...
    def SetSplineLength(self, length: Expression) -> None:
        ...
    def RemoveAllShaping(self) -> None:
        ...
    def RemoveLengthConstraint(self) -> None:
        ...
    def IsLengthLocked(self, length: Expression, isLocked: bool, slackDirection: Direction) -> None:
        ...
    def AddSlackToSpline(self, slackType: Routing.SplinePathBuilder.SplinePathSlackType, slackValue: Expression, slackDirection: Direction) -> None:
        ...
    def IsSplineSlacked(self, slacked: bool, slackType: Routing.SplinePathBuilder.SplinePathSlackType, slackValue: Expression, downDir: Direction) -> None:
        ...
    def InitializeDrag(self, index: int) -> None:
        ...
    def CommitDrag(self, definingPoint: Point) -> None:
        ...
    def AssignExtension(self, pointIndex: int, direction: Direction, forwardLength: Expression, backwardLength: Expression) -> None:
        ...
    def AssignHealPathExtension(self, pointIndex: int, direction: Direction, forwardLength: Expression, backwardLength: Expression) -> None:
        ...
    def CreateHealPathConstraints(self, startObject: NXObject, endObject: NXObject) -> None:
        ...
    def AskDefiningData(self, points: typing.List[Point]) -> None:
        ...
    def GetExtensionDataForPointAtIndex(self, index: int, forwardLength: Expression, backwardLength: Expression, extDirection: Vector3d) -> None:
        ...
    def GetDefiningPointPositions(self, pointPositions: float) -> None:
        ...
    def GetDefiningPointPositionsAsPoints(self, pointPositions: typing.List[Point3d]) -> None:
        ...
    def GetRouteSegment(self) -> Curve:
        ...
    def GetStartAndEndRcp(self, startRcp: Routing.ControlPoint) -> Routing.ControlPoint:
        ...
    def DetachPoint(self, index: int) -> None:
        ...
    def GetOffsetData(self, index: int, method: int, basePoint: Point, offDir: Direction, exp: str) -> None:
        ...
    def GetLargestDiameterStock(self) -> Routing.Stock:
        ...
    def BlankStockAndGetLargestDia(self) -> Routing.Stock:
        """[Obsolete("Deprecated in NX12.0.0.  Use Routing.SplinePathBuilder.GetLargestDiameterStock instead.")"""
        ...
    def UnblankStocks(self) -> None:
        """[Obsolete("Deprecated in NX12.0.0.  There is no need for this method.")"""
        ...
    def GetLockedSplineMinimumLength(self) -> float:
        ...
    def UpdateExtensionDirectionForPointAtIndex(self, index: int, deltaTrans: Vector3d, orientation: Matrix3x3, inDrag: bool) -> None:
        ...
    def UpdateExtensionDirectionAtIndex(self, index: int, direction: Vector3d) -> None:
        ...
    def AssignTangentExtensionForPointAtIndex(self, index: int, forwardLength: Expression, backwardLength: Expression, tangent: Vector3d, normal: Vector3d, extensionDir: Direction) -> None:
        ...
    def AssignExtension(self, pointIndex: int, direction: Direction, forwardLength: Expression, backwardLength: Expression, forceDeleteOnZeroExpression: bool) -> None:
        ...
    def CreateAssignTangencyBuilder(self) -> Routing.AssignTangencyBuilder:
        ...
    def GetAssignTangencyBuilder(self) -> Routing.AssignTangencyBuilder:
        ...
    def SetStockBoundedDiameter(self, value: float) -> None:
        ...
    def SetDefaultPortExtensionLength(self, value: float) -> None:
        ...
    BoundedCurvature: bool
    BoundedCurvatureRadius: Expression
    BoundedCurvatureRatio: Expression
    DefiningType: Routing.SplinePathBuilder.DefiningTypes
    MinimumCheckingAllowableRatio: Expression
    MinimumCheckingAllowableValue: Expression
    MinimumCheckingMethod: Routing.SplinePathBuilder.SplinePathAttributeOptions
    RadiusSource: Routing.SplinePathBuilder.SplinePathRadiusSource
    ShowSplineMinimumRadius: bool
    UseMinimumCheckingValue: bool


    class SplinePathSlackType(enum.Enum):
        PercentLength = 0
        AdditionalLength = 1
        LockLength = 2
        TotalPercentage = 3
        TotalAdditional = 4
        Undefined = 5
    

    class SplinePathRadiusSource(enum.Enum):
        Expression = 0
        RatioToDiameter = 1
        Attribute = 2
    

    class SplinePathAttributeOptions(enum.Enum):
        Radius = 0
        RatioToDiameter = 1
    

    class DragMode(enum.Enum):
        Active = 0
        Inactive = 1
    

    class DefiningTypes(enum.Enum):
        Unsupported = 0
        Interpolation = 1
        Parametric = 2
        Bezier = 3
        BezierSlack = 4
        BezierMaxCurvature = 5
        BezierMaxCurvatureSlacked = 6
    

    class DefiningPointMethod(enum.Enum):
        CreatePoint = 0
        UseExisting = 1
    

class SplineOptions(enum.Enum):
    ByPoints = 0
    ByPoles = 1


class SplineData(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def GetDefiningPoints(self) -> typing.List[Routing.DefiningPoint]:
        ...
    def SetDefiningPoints(self, definingPoints: typing.List[Routing.DefiningPoint]) -> None:
        ...
    def GetDefiningPoint(self, index: int) -> Routing.DefiningPoint:
        ...
    def SetDefiningPoint(self, index: int, definingPoint: Routing.DefiningPoint) -> None:
        ...
    def GetPosition(self, index: int) -> Point3d:
        ...
    def SetPosition(self, index: int, position: Point3d) -> None:
        ...
    def RemovePosition(self, index: int) -> int:
        ...
    def InsertPositionBefore(self, index: int, position: Point3d) -> int:
        ...
    def InsertPositionAfter(self, index: int, position: Point3d) -> int:
        ...
    def GetDirection(self, index: int) -> Vector3d:
        ...
    def SetDirection(self, index: int, direction: Vector3d) -> None:
        ...
    def GetBackwardExtension(self, index: int) -> float:
        ...
    def SetBackwardExtension(self, index: int, backwardExtension: float) -> None:
        ...
    def GetForwardExtension(self, index: int) -> float:
        ...
    def SetForwardExtension(self, index: int, forwardExtension: float) -> None:
        ...
    def RemoveExtension(self, index: int) -> None:
        ...
    def IsConstrained(self, index: int) -> bool:
        ...
    def CommitChanges(self) -> Routing.ISegment:
        ...
    def FreeResource(self) -> None:
        ...
    NumDefiningPoints: int


class SpaceReservationBuilder(Builder):
    def __init__(self) -> None: ...
    GridTopologyEligibilityFlag: bool
    SegmentCollector: Routing.RouteObjectCollector
    StockSettings: Routing.PathStockBuilder


class SingleDevice(Routing.RouteObject):
    def __init__(self) -> None: ...
    def GetReferencingDeviceRelshps(self) -> typing.List[Routing.DeviceRelationship]:
        ...
    def GetRelatedSingleDevices(self) -> typing.List[Routing.SingleDevice]:
        ...
    def GetRelatingSingleDevice(self) -> Routing.SingleDevice:
        ...
    def GetImplementedConnections(self) -> typing.List[Routing.LogicalConnection]:
        ...
    def ManuallyDelete(self) -> Routing.SingleDevice.DeleteObjectResult:
        ...
    def GetItemDefinition(self) -> Routing.ItemDefinition:
        ...
    NxEquivalent: NXObject
    PartName: str
    PartNumber: str


    class DeleteObjectResult(enum.Enum):
        Ok = 0
        StillRouted = 1
        StillAssigned = 2
        CantDeleteUnknown = 3
    

class SimplifyPathBuilder(Builder):
    def __init__(self) -> None: ...
    SegmentCollector: Routing.RouteObjectCollector


class SelectStock(TaggedObject):
    def __init__(self) -> None: ...
    def SetValue(self, selection: Routing.Stock, view: View, point: Point3d) -> None:
        ...
    def GetValue(self, selection: Routing.Stock, view: View, point: Point3d) -> None:
        ...
    def SetValue(self, snapType: InferSnapType.SnapType, selection1: Routing.Stock, view1: View, point1: Point3d, selection2: Routing.Stock, view2: View, point2: Point3d) -> None:
        ...
    def GetValue(self, snapType: InferSnapType.SnapType, selection1: Routing.Stock, view1: View, point1: Point3d, selection2: Routing.Stock, view2: View, point2: Point3d) -> None:
        ...
    def SetValue(self, selection: Routing.Stock, caeSubType: CaeObjectType.CaeSubType, caeSubId: int) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use other versions of NXOpen.SelectObject.SetValue.")"""
        ...
    def GetValue(self, caeSubType: CaeObjectType.CaeSubType, caeSubId: int) -> Routing.Stock:
        """[Obsolete("Deprecated in NX10.0.0.  Use other versions of NXOpen.SelectObject.GetValue.")"""
        ...
    def Validate(self) -> bool:
        ...
    Value: Routing.Stock


class SelectRun(TaggedObject):
    def __init__(self) -> None: ...
    def SetValue(self, selection: Routing.Run, view: View, point: Point3d) -> None:
        ...
    def GetValue(self, selection: Routing.Run, view: View, point: Point3d) -> None:
        ...
    def SetValue(self, snapType: InferSnapType.SnapType, selection1: Routing.Run, view1: View, point1: Point3d, selection2: Routing.Run, view2: View, point2: Point3d) -> None:
        ...
    def GetValue(self, snapType: InferSnapType.SnapType, selection1: Routing.Run, view1: View, point1: Point3d, selection2: Routing.Run, view2: View, point2: Point3d) -> None:
        ...
    def SetValue(self, selection: Routing.Run, caeSubType: CaeObjectType.CaeSubType, caeSubId: int) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use other versions of NXOpen.SelectObject.SetValue.")"""
        ...
    def GetValue(self, caeSubType: CaeObjectType.CaeSubType, caeSubId: int) -> Routing.Run:
        """[Obsolete("Deprecated in NX10.0.0.  Use other versions of NXOpen.SelectObject.GetValue.")"""
        ...
    def Validate(self) -> bool:
        ...
    Value: Routing.Run


class SelectPort(TaggedObject):
    def __init__(self) -> None: ...
    def SetValue(self, selection: Routing.Port, view: View, point: Point3d) -> None:
        ...
    def GetValue(self, selection: Routing.Port, view: View, point: Point3d) -> None:
        ...
    def SetValue(self, snapType: InferSnapType.SnapType, selection1: Routing.Port, view1: View, point1: Point3d, selection2: Routing.Port, view2: View, point2: Point3d) -> None:
        ...
    def GetValue(self, snapType: InferSnapType.SnapType, selection1: Routing.Port, view1: View, point1: Point3d, selection2: Routing.Port, view2: View, point2: Point3d) -> None:
        ...
    def SetValue(self, selection: Routing.Port, caeSubType: CaeObjectType.CaeSubType, caeSubId: int) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use other versions of NXOpen.SelectObject.SetValue.")"""
        ...
    def GetValue(self, caeSubType: CaeObjectType.CaeSubType, caeSubId: int) -> Routing.Port:
        """[Obsolete("Deprecated in NX10.0.0.  Use other versions of NXOpen.SelectObject.GetValue.")"""
        ...
    def Validate(self) -> bool:
        ...
    Value: Routing.Port


class SelectLineSegment(TaggedObject):
    def __init__(self) -> None: ...
    def SetValue(self, selection: Routing.LineSegment, view: View, point: Point3d) -> None:
        ...
    def GetValue(self, selection: Routing.LineSegment, view: View, point: Point3d) -> None:
        ...
    def SetValue(self, snapType: InferSnapType.SnapType, selection1: Routing.LineSegment, view1: View, point1: Point3d, selection2: Routing.LineSegment, view2: View, point2: Point3d) -> None:
        ...
    def GetValue(self, snapType: InferSnapType.SnapType, selection1: Routing.LineSegment, view1: View, point1: Point3d, selection2: Routing.LineSegment, view2: View, point2: Point3d) -> None:
        ...
    def SetValue(self, selection: Routing.LineSegment, caeSubType: CaeObjectType.CaeSubType, caeSubId: int) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use other versions of NXOpen.SelectObject.SetValue.")"""
        ...
    def GetValue(self, caeSubType: CaeObjectType.CaeSubType, caeSubId: int) -> Routing.LineSegment:
        """[Obsolete("Deprecated in NX10.0.0.  Use other versions of NXOpen.SelectObject.GetValue.")"""
        ...
    def Validate(self) -> bool:
        ...
    Value: Routing.LineSegment


class SelectISegment(TaggedObject):
    def __init__(self) -> None: ...
    def SetValue(self, selection: Routing.ISegment, view: View, point: Point3d) -> None:
        ...
    def GetValue(self, selection: Routing.ISegment, view: View, point: Point3d) -> None:
        ...
    def SetValue(self, snapType: InferSnapType.SnapType, selection1: Routing.ISegment, view1: View, point1: Point3d, selection2: Routing.ISegment, view2: View, point2: Point3d) -> None:
        ...
    def GetValue(self, snapType: InferSnapType.SnapType, selection1: Routing.ISegment, view1: View, point1: Point3d, selection2: Routing.ISegment, view2: View, point2: Point3d) -> None:
        ...
    def SetValue(self, selection: Routing.ISegment, caeSubType: CaeObjectType.CaeSubType, caeSubId: int) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use other versions of NXOpen.SelectObject.SetValue.")"""
        ...
    def GetValue(self, caeSubType: CaeObjectType.CaeSubType, caeSubId: int) -> Routing.ISegment:
        """[Obsolete("Deprecated in NX10.0.0.  Use other versions of NXOpen.SelectObject.GetValue.")"""
        ...
    def Validate(self) -> bool:
        ...
    Value: Routing.ISegment


class SelectControlPoint(TaggedObject):
    def __init__(self) -> None: ...
    def SetValue(self, selection: Routing.ControlPoint, view: View, point: Point3d) -> None:
        ...
    def GetValue(self, selection: Routing.ControlPoint, view: View, point: Point3d) -> None:
        ...
    def SetValue(self, snapType: InferSnapType.SnapType, selection1: Routing.ControlPoint, view1: View, point1: Point3d, selection2: Routing.ControlPoint, view2: View, point2: Point3d) -> None:
        ...
    def GetValue(self, snapType: InferSnapType.SnapType, selection1: Routing.ControlPoint, view1: View, point1: Point3d, selection2: Routing.ControlPoint, view2: View, point2: Point3d) -> None:
        ...
    def SetValue(self, selection: Routing.ControlPoint, caeSubType: CaeObjectType.CaeSubType, caeSubId: int) -> None:
        """[Obsolete("Deprecated in NX10.0.0.  Use other versions of NXOpen.SelectObject.SetValue.")"""
        ...
    def GetValue(self, caeSubType: CaeObjectType.CaeSubType, caeSubId: int) -> Routing.ControlPoint:
        """[Obsolete("Deprecated in NX10.0.0.  Use other versions of NXOpen.SelectObject.GetValue.")"""
        ...
    def Validate(self) -> bool:
        ...
    Value: Routing.ControlPoint


class SegmentPairBuilder(Builder):
    def __init__(self) -> None: ...
    PairSegment: SelectNXObjectList


class SegmentManager(Utilities.NXRemotableObject):
    def __init__(self, owner: Part) -> None: ...
    def CreateSegment(self, followCurve: Curve, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint, userDefined: Routing.UserDefined) -> Routing.ISegment:
        ...
    def CreateSegment(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint) -> Routing.ISegment:
        ...
    def SetFollowCurve(self, segment: Routing.ISegment, followCurve: Curve) -> Routing.ISegment:
        ...
    def SimplifySegments(self, segments: typing.List[Routing.ISegment], doUpdate: bool, newSegments: typing.List[Routing.ISegment]) -> None:
        ...
    def Subdivide(self, segment: Routing.ISegment, subdivideOption: Routing.SegmentManager.SubdivideOption, subdivideSegments: typing.List[Routing.ISegment]) -> None:
        ...
    def CreateConstrainedSegment(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint) -> Routing.ISegment:
        ...
    def CreateHealSpline(self, startObject: DisplayableObject, endObject: DisplayableObject, healPath: Routing.HealPath) -> Routing.ISegment:
        ...
    def CreateHealPath(self) -> Routing.HealPath:
        ...
    def ModelTerminals(self, multiPort: Routing.Port, cutBackLength: float, extensionString: str, overrideCharx: bool, terminalPorts: typing.List[Routing.Port]) -> None:
        ...
    def UnmodelTerminals(self, multiPort: Routing.Port, terminalPorts: typing.List[Routing.Port]) -> None:
        ...
    def ProcessBuiltInPaths(self, partOcc: Assemblies.Component) -> None:
        ...
    def GetShortestPathBetweenControlPoints(self, controlPoint1: Routing.ControlPoint, controlPoint2: Routing.ControlPoint) -> typing.List[Routing.ISegment]:
        ...
    def CreateSplineData(self, splineSegment: Routing.ISegment) -> Routing.SplineData:
        ...
    def CreateSplineData(self, positions: typing.List[Point3d]) -> Routing.SplineData:
        ...
    def Tag(self) -> Tag: ...

    Segments: Routing.ISegmentCollection
    LineSegments: Routing.LineSegmentCollection
    ArcSegments: Routing.ArcSegmentCollection
    SplineSegments: Routing.SplineSegmentCollection


    class SubdivideSpacing(enum.Enum):
        ScreenPoint = 0
        EqualArcLength = 1
        EqualParameter = 2
        IncrementalArcLength = 3
        GeometricRatio = 4
        ChordalTolerance = 5
        NumberOfOptions = 6
    

    class SegmentManagerSubdivideOption():
        SpacingOption: Routing.SegmentManager.SubdivideSpacing
        StartPercent: float
        EndPercent: float
        ScreenPointPercentage: float
        Direction: int
        NumberOfSegments: int
        GeometricRatio: float
        IncrementalArcLength: float
        ChordalTolerance: float
        Dcm3CreateTangency: bool
        Dcm3AddPoints: bool
        Dcm3AddFixConstraint: bool
        def ToString(self) -> str:
            ...
    

class SBendCornerCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.SBendCorner]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateCornerBySegBendRadius(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint, segment: Routing.SplineSegment, sbendType: int, bendRadius: float) -> Routing.SBendCorner:
        ...
    def CreateCornerBySegBendRatio(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint, segment: Routing.SplineSegment, sbendType: int, bendRatio: float) -> Routing.SBendCorner:
        ...
    def CreateCornerByBendRatio(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint, bendRatio: float, sbendType: int) -> Routing.SBendCorner:
        ...
    def CreateCornerByBendRadius(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint, bendRadius: float, sbendType: int) -> Routing.SBendCorner:
        ...
    def IsRcpAssociatedToSBend(self, rcp: Routing.ControlPoint) -> bool:
        ...
    def GetSBendAssociatedToSegment(self, segment: Routing.SplineSegment) -> Routing.SBendCorner:
        ...
    def GetSBendAssociatedToRcp(self, rcp: Routing.ControlPoint) -> typing.List[Routing.SBendCorner]:
        ...
    def GetRcpSBendRadius(self, rcp: Routing.ControlPoint) -> float:
        ...
    def GetSegmentSBendRadius(self, segment: Routing.SplineSegment) -> float:
        ...
    def ComputeSBend(self, startPnt: Point3d, endPnt: Point3d, lineVec1: Vector3d, lineVec2: Vector3d, radius: float, sbendType: int, bendCurve: Spline) -> bool:
        ...
    def ComputeSBendData(self, startPnt: Point3d, endPnt: Point3d, lineVec1: Vector3d, lineVec2: Vector3d, radius: float, sbendType: int, extensionPt1: Point3d, extensionPt2: Point3d, arc1StartPt: Point3d, arc1EndPt: Point3d, arc2StartPt: Point3d, arc2EndPt: Point3d) -> bool:
        ...
    def EditCornerByBendRadius(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint, bendRadius: float, sbendType: int, sbend: Routing.SBendCorner) -> None:
        ...
    def EditCornerByBendRatio(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint, bendRatio: float, sbendType: int, sbend: Routing.SBendCorner) -> None:
        ...
    def Tag(self) -> Tag: ...



class SBendCorner(NXObject):
    def __init__(self) -> None: ...
    def GetSegment(self) -> Routing.SplineSegment:
        ...
    def GetSBendRadius(self) -> float:
        ...
    def GetSBendStocks(self) -> typing.List[Routing.Stock]:
        ...
    def GetSBendData(self, sbendType: int, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint, segment: Routing.SplineSegment, radiusOrRatio: float) -> bool:
        ...
    def SetSBendData(self, sbendType: int, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint, segment: Routing.SplineSegment, radiusOrRatio: float, useBendRatio: bool) -> None:
        ...


class RunItemsBuilderList(TaggedObject):
    def __init__(self) -> None: ...
    def Append(self, objects: typing.List[Routing.RunItemsBuilder]) -> None:
        ...
    def Append(self, object: Routing.RunItemsBuilder) -> None:
        ...
    def ClearIndex(self, deleteIdx: int) -> None:
        ...
    def FindIndex(self, obj: Routing.RunItemsBuilder) -> int:
        ...
    def FindItem(self, index: int) -> Routing.RunItemsBuilder:
        ...
    def Erase(self, index: int) -> None:
        ...
    def Erase(self, index: int, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Erase(self, obj: Routing.RunItemsBuilder) -> None:
        ...
    def Erase(self, obj: Routing.RunItemsBuilder, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Clear(self) -> None:
        ...
    def Clear(self, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def GetContents(self) -> typing.List[Routing.RunItemsBuilder]:
        ...
    def SetContents(self, objects: typing.List[Routing.RunItemsBuilder]) -> None:
        ...
    def Swap(self, index1: int, index2: int) -> None:
        ...
    def Swap(self, object1: Routing.RunItemsBuilder, object2: Routing.RunItemsBuilder) -> None:
        ...
    def Insert(self, location: int, object: Routing.RunItemsBuilder) -> None:
        ...
    def MoveToTop(self, index: int) -> None:
        ...
    def MoveToBottom(self, index: int) -> None:
        ...
    Length: int


class RunItemsBuilder(Builder):
    def __init__(self) -> None: ...
    def SetSelectedItemData(self, scopedObject: TaggedObject, referenceId: str, portName: str, availablePorts: typing.List[TaggedObject]) -> None:
        ...
    def GetVirtualStubItem(self, virtualReferenceId: str) -> TaggedObject:
        ...
    CurrentSelectedPort: TaggedObject
    RunItems: SelectNXObjectList
    VirtualReferenceId: str


class RunItem(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    Attributes: Routing.CharacteristicList
    ItemType: Routing.RunItem.Type
    ReferenceId: str


    class Type(enum.Enum):
        From = 0
        To = 1
        Member = 2
    

class RunCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Run]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateRun(self, runId: str, runType: str, from: typing.List[NXObject], to: typing.List[NXObject], member: typing.List[NXObject]) -> Routing.Run:
        ...
    def CreateRun(self, runId: str, runType: str, attributes: Routing.CharacteristicList, fromItems: typing.List[Routing.RunItem], toItems: typing.List[Routing.RunItem], memberItems: typing.List[Routing.RunItem]) -> Routing.Run:
        ...
    def CreateRun(self, runId: str, runType: str, attributes: Routing.CharacteristicList) -> Routing.Run:
        ...
    def FindPath(self, source: typing.List[NXObject], target: typing.List[NXObject]) -> typing.List[NXObject]:
        ...
    def Tag(self) -> Tag: ...



class Run(NXObject):
    def __init__(self) -> None: ...
    def GetRunId(self) -> str:
        ...
    def GetRunType(self) -> str:
        ...
    def GetFromItems(self) -> typing.List[NXObject]:
        ...
    def GetFromItemData(self) -> typing.List[Routing.RunItem]:
        ...
    def GetToItems(self) -> typing.List[NXObject]:
        ...
    def GetToItemData(self) -> typing.List[Routing.RunItem]:
        ...
    def GetMemberItemData(self) -> typing.List[Routing.RunItem]:
        ...
    def Edit(self, runId: str, runType: str, from: typing.List[NXObject], to: typing.List[NXObject], member: typing.List[NXObject]) -> Routing.Run.Status:
        ...
    def Edit(self, runId: str, runType: str, fromItems: typing.List[Routing.RunItem], toItems: typing.List[Routing.RunItem], memberItems: typing.List[Routing.RunItem]) -> None:
        ...
    def GetRunStatus(self) -> Routing.Run.Status:
        ...
    def GetRoutingSystem(self) -> Routing.RoutingSystem:
        ...
    def GetRunCompareStatus(self) -> Routing.Run.CompareStatus:
        ...
    def RunSegmentGetFlowDirection(self, segment: Routing.ISegment) -> int:
        ...
    def RunSegmentSetFlowDirection(self, segment: Routing.ISegment, flowState: int) -> None:
        ...
    def RunSegmentReverseFlowDirection(self, segment: Routing.ISegment) -> None:
        ...
    def DetectRunSpools(self) -> typing.List[ObjectList]:
        ...
    def DeleteRunPath(self) -> None:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        ...
    def FlipComponent(self, component: Assemblies.Component) -> Routing.Run.FlipStatus:
        ...
    def MakeActive(self) -> None:
        ...
    def MakeInactive(self) -> None:
        ...
    def GetActiveStatus(self) -> bool:
        ...
    def GetMembers(self) -> typing.List[NXObject]:
        ...
    def GetCharacteristicsWithId(self) -> Routing.CharacteristicList:
        ...


    class Status(enum.Enum):
        Valid = 0
        Broken = 1
        Incomplete = 2
    

    class FlipStatus(enum.Enum):
        Success = 0
        NotTwoPorts = 1
        UnequalConstraints = 2
        PortPositionMismatch = 3
        FlowTypeMismatch = 4
        FollowsFlow = 5
        RunFlowNotDefined = 6
        CannotFlip = 7
    

    class CompareStatus(enum.Enum):
        None = 0
        Ok = 1
        MissingRun = 2
        ExtraRun = 3
        MissingItem = 4
        ExtraItem = 5
        Discrepancy = 6
    

class RoutingSystemCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.RoutingSystem]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateRouting(self, name: str) -> Routing.RoutingSystem:
        ...
    def Tag(self) -> Tag: ...



class RoutingSystem(NXObject):
    def __init__(self) -> None: ...
    def GetId(self) -> str:
        ...
    def SetId(self, name: str) -> None:
        ...
    def GetRuns(self) -> typing.List[Routing.Run]:
        ...
    def AddRuns(self, runs: typing.List[Routing.Run]) -> None:
        ...
    def RemoveRuns(self, runs: typing.List[Routing.Run]) -> None:
        ...


class RoutingMeasureDistanceBuilder(MeasureDistanceBuilder):
    def __init__(self) -> None: ...
    def GetRoutingObjects(self) -> typing.List[NXObject]:
        ...
    def SetRoutingObjects(self, routingObjects: typing.List[NXObject]) -> None:
        ...
    RoutingSelection: Routing.RouteObjectCollector


class RoutingBulkReplacementBuilderRetainReasonType(enum.Enum):
    Unspecified = 0
    Explicit = 1
    BlockUnify = 2
    NonClassification = 3
    Equipment = 4
    NonPartLibrary = 5
    ReferenceStock = 6
    UnloadedConnectedComponents = 7
    SpaceReservationNotSupported = 8
    PtsPartNotSupported = 9
    PtsStockNotSupported = 10


class RoutingBulkReplacementBuilderReplacementMethodType(enum.Enum):
    AttributeValues = 0
    LibrarySelect = 1
    Retain = 2


class RoutingBulkReplacementBuilderLibrarySelectSourceType(enum.Enum):
    Unspecified = 0
    Classification = 1
    SpecificPart = 2


class RoutingAttributeIdentifierType(enum.Enum):
    String = 0
    Classification = 1


class RouteSweptTwistBuilder(Builder):
    def __init__(self) -> None: ...
    def CreateSpinePoint(self) -> GeometricUtilities.OnPathDimWithValueBuilder:
        ...
    def CreateSpine(self) -> None:
        ...
    def AskExistingTwistData(self, locations: float, angles: float) -> None:
        ...
    Spine: Curve
    Stock: SelectNXObject
    TwistPoint: Point
    TwistPointList: TaggedObjectList


class RouteSweptFoldBuilder(Builder):
    def __init__(self) -> None: ...
    def SetStock(self, stock: Routing.Stock) -> None:
        ...
    BendAngle: Expression
    BendRadius: Expression
    FoldLocation: GeometricUtilities.OnPathDimensionBuilder
    FoldRotationAngle: Expression
    FoldStartRotationAngle: Expression
    LengthAdjustment: Expression
    ReverseBendAngle: bool
    ReverseFixedSegment: bool
    ReverseFoldRotationAngle: bool
    Spline: Curve
    StockSelection: SelectBody


class RouteSegmentFontElement(NXObject):
    def __init__(self) -> None: ...


class RouteSegmentFont(NXObject):
    def __init__(self) -> None: ...
    Segment: Line


class RoutePartDescriptorCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.RoutePartDescriptor]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreatePartDescriptor(self, descriptorSourceType: Routing.RoutePartDescriptor.SourceType, descriptorCharxType: Routing.RoutePartDescriptor.CharxType, title: str, expression: str) -> Routing.RoutePartDescriptor:
        ...
    def Tag(self) -> Tag: ...



class RoutePartDescriptor(TaggedObject):
    def __init__(self) -> None: ...
    DescriptorCharxType: Routing.RoutePartDescriptor.CharxType
    DescriptorSourceType: Routing.RoutePartDescriptor.SourceType
    Expression: str
    Title: str


    class SourceType(enum.Enum):
        Null = 0
        PartAttribute = 1
        Expression = 2
        DumbCopy = 3
    

    class CharxType(enum.Enum):
        Int = 0
        Real = 1
        Sting = 4
        Any = 6
        Ref = 10
        AnyRef = 12
    

class RouteObjectCollectorList(TaggedObject):
    def __init__(self) -> None: ...
    def Append(self, objects: typing.List[Routing.RouteObjectCollector]) -> None:
        ...
    def Append(self, object: Routing.RouteObjectCollector) -> None:
        ...
    def ClearIndex(self, deleteIdx: int) -> None:
        ...
    def FindIndex(self, obj: Routing.RouteObjectCollector) -> int:
        ...
    def FindItem(self, index: int) -> Routing.RouteObjectCollector:
        ...
    def Erase(self, index: int) -> None:
        ...
    def Erase(self, index: int, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Erase(self, obj: Routing.RouteObjectCollector) -> None:
        ...
    def Erase(self, obj: Routing.RouteObjectCollector, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Clear(self) -> None:
        ...
    def Clear(self, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def GetContents(self) -> typing.List[Routing.RouteObjectCollector]:
        ...
    def SetContents(self, objects: typing.List[Routing.RouteObjectCollector]) -> None:
        ...
    def Swap(self, index1: int, index2: int) -> None:
        ...
    def Swap(self, object1: Routing.RouteObjectCollector, object2: Routing.RouteObjectCollector) -> None:
        ...
    def Insert(self, location: int, object: Routing.RouteObjectCollector) -> None:
        ...
    def MoveToTop(self, index: int) -> None:
        ...
    def MoveToBottom(self, index: int) -> None:
        ...
    Length: int


class RouteObjectCollector(TaggedObject):
    def __init__(self) -> None: ...
    def Validate(self) -> bool:
        ...
    RoutingObjects: SelectNXObjectList


class RouteObject(Routing.RootObject):
    def __init__(self) -> None: ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...


class RouteManager(Utilities.NXRemotableObject):
    def __init__(self, owner: Part) -> None: ...
    def GetLengthTolerance(self) -> float:
        ...
    def CreateNewDownDirection(self) -> Direction:
        ...
    def InsertIntoStock(self, component: Assemblies.Component) -> None:
        ...
    def LiftFromStock(self, component: Assemblies.Component) -> None:
        ...
    def LoadPart(self, partEntry: Routing.CharacteristicList) -> Part:
        ...
    def LogConcurrent(self, objects: typing.List[NXObject]) -> None:
        ...
    def GetConcurrent(self) -> typing.List[NXObject]:
        ...
    def ExportPlmxml(self, plmxmlFilename: str) -> None:
        ...
    def ImportPlmxml(self, plmxmlFilename: str, importOperation: Routing.RouteManager.ImportMode) -> None:
        ...
    def ImportLegacyComponentFile(self, importFilename: str, importOperation: Routing.RouteManager.ImportMode, importFormatName: str) -> None:
        ...
    def ExportLegacyComponentFile(self, exportFilename: str, exportFormatName: str) -> None:
        ...
    def ImportLegacyHarnessFile(self, importFilename: str, importOperation: Routing.RouteManager.ImportMode, importFormatName: str) -> None:
        ...
    def ExportLegacyHarnessFile(self, exportFilename: str, exportFormatName: str) -> None:
        ...
    def ImportXmlFile(self, importFilename: str, importOperation: Routing.RouteManager.ImportMode) -> None:
        ...
    def ExportXmlFile(self, exportFilename: str) -> None:
        ...
    def ViewNetlistHistory(self) -> None:
        ...
    def EraseNetlistHistory(self) -> None:
        ...
    def CheckDesignRules(self, mode: Routing.DesignRuleViolationCollection.Mode, reason: Routing.DesignRuleViolationCollection.Reason, objects: typing.List[NXObject], violations: typing.List[Routing.DesignRuleViolation]) -> None:
        """[Obsolete("Deprecated in NX1847.0.0.  Use NXOpen.Routing.RouteManager.CheckDesignRules instead.")"""
        ...
    def CheckDesignRules(self, mode: Routing.DesignRuleViolationCollection.Mode, reason: Routing.CustomManager.DesignRuleReason, objects: typing.List[NXObject], violations: typing.List[Routing.DesignRuleViolation]) -> None:
        ...
    def PlaceCutElbow(self, loadCharx: Routing.CharacteristicList, applyCharx: Routing.CharacteristicList, rcp: Routing.ControlPoint) -> None:
        ...
    def DeletePath(self, objects: typing.List[NXObject]) -> typing.List[NXObject]:
        ...
    def UnifyPath(self, inputObject: TaggedObject, newCharxList: Routing.CharacteristicList) -> None:
        ...
    def RepositionPartOccurrence(self, partOcc: Assemblies.Component, position: Point3d, transform: Matrix3x3) -> None:
        ...
    def RouteReplacePart(self, oldOcc: Assemblies.Component, newPart: Part, compName: str, refset: str, occLayer: int) -> Assemblies.Component:
        ...
    def ReplaceComponents(self, oldOcc: Assemblies.Component, newOcc: Assemblies.Component, refsetName: str) -> None:
        ...
    def ReplaceComponents(self, oldOcc: Assemblies.Component, newOcc: Assemblies.Component, refsetName: str, fixPosition: Routing.RouteManager.FixPosition) -> None:
        ...
    def TransformObjects(self, allStock: bool, specifiedStocks: typing.List[Routing.Stock], objects: typing.List[NXObject], position: Point3d, transform: Matrix3x3, copyOperation: bool) -> typing.List[NXObject]:
        ...
    def MergeDuplicateRcps(self, tolerance: float, rcps: typing.List[Routing.ControlPoint]) -> bool:
        ...
    def RemoveComponents(self, components: typing.List[Assemblies.Component]) -> None:
        ...
    def ConnectPartPorts(self, component: Assemblies.Component) -> None:
        ...
    def BuildFabrication(self, filename: str, objects: typing.List[NXObject], charxData: Routing.CharacteristicList) -> Part:
        ...
    def BuildFabrication(self, filename: str, objects: typing.List[NXObject], optionalCharxData: Routing.CharacteristicList, requiredCharxData: Routing.CharacteristicList) -> Part:
        """[Obsolete("Deprecated in NX1847.0.0.  Use NXOpen.Routing.RouteManager.BuildFabricationWithFileNewBuilder instead.")"""
        ...
    def BuildFabricationWithFileNewBuilder(self, builder: FileNew, objects: typing.List[NXObject], optionalCharxData: Routing.CharacteristicList, requiredCharxData: Routing.CharacteristicList) -> Part:
        ...
    def CreateBom(self, level: Routing.RouteManager.BomLevel, length: Routing.RouteManager.BomStockLength, fabNumbering: Routing.RouteManager.BomFabrication, blankLines: Routing.RouteManager.BomBlankLines, formatFilePart: Part) -> None:
        ...
    def ImportPartListFormatFile(self, fileName: str) -> Part:
        ...
    def CreateLinearPathBuilder(self) -> Routing.LinearPathBuilder:
        ...
    def CreateElbowSnapSettings(self) -> Routing.ElbowSnapSettings:
        ...
    def CreatePathStockBuilder(self) -> Routing.PathStockBuilder:
        ...
    def CreateLinearPathSettings(self) -> Routing.LinearPathSettings:
        ...
    def CreateQuickPathBuilder(self) -> Routing.QuickPathBuilder:
        ...
    def CreateDesignRuleViolationViewer(self, violations: typing.List[NXObject]) -> Routing.DesignRuleViolationViewer:
        ...
    def CreateDesignRuleViolationViewer(self) -> Routing.DesignRuleViolationViewer:
        ...
    def CreateDeleteObjectsBuilder(self, objects: typing.List[NXObject]) -> Routing.DeleteObjectsBuilder:
        ...
    def CreateInfoObjectsBuilder(self, objects: typing.List[NXObject]) -> Routing.InfoObjectsBuilder:
        ...
    def CreateConnectedCurvesBuilder(self) -> Routing.ConnectedCurvesBuilder:
        ...
    def CreateSimplifyPathBuilder(self, segments: typing.List[Routing.ISegment]) -> Routing.SimplifyPathBuilder:
        ...
    def CreateSimplifyPathBuilder2(self, workOcc: Assemblies.Component, segments: typing.List[Routing.ISegment]) -> Routing.SimplifyPathBuilder:
        ...
    def CreateEditLineSegmentBuilder(self, line: Routing.LineSegment) -> Routing.EditLineSegmentBuilder:
        ...
    def CreateSubdivideSegmentBuilder(self, segment: NXObject, pickPoint: Point3d) -> Routing.SubdivideSegmentBuilder:
        ...
    def CreateSplinePathBuilder(self, spline: Curve) -> Routing.SplinePathBuilder:
        ...
    def CreateStockOffsetPointBuilder(self, pointOrRcp: NXObject) -> Routing.StockOffsetPointBuilder:
        ...
    def CreateTransformPathBuilder(self, objs: typing.List[NXObject]) -> Routing.TransformPathBuilder:
        ...
    def CreateAssignCornerBuilder(self) -> Routing.AssignCornerBuilder:
        ...
    def CreateAssignCornerBuilder(self, selectedObject: NXObject) -> Routing.AssignCornerBuilder:
        ...
    def CreateSpaceReservationBuilder(self, objects: typing.List[NXObject]) -> Routing.SpaceReservationBuilder:
        ...
    def CreateOverstockBuilder(self, overstock: Routing.Overstock) -> Routing.OverstockBuilder:
        ...
    def CreateFillerStockBuilder(self, objects: typing.List[NXObject]) -> Routing.FillerStockBuilder:
        ...
    def CreateStockStyleBuilder(self, objects: typing.List[NXObject]) -> Routing.StockStyleBuilder:
        ...
    def CreateStockBuilder(self, objects: typing.List[NXObject]) -> Routing.StockBuilder:
        ...
    def CreateStockBrowserBuilder(self) -> Routing.StockBrowserBuilder:
        ...
    def CopyOverstock(self) -> str:
        ...
    def CreateRouteSweptTwistBuilder(self, objects: NXObject) -> Routing.RouteSweptTwistBuilder:
        ...
    def CreateRouteSweptFoldBuilder(self, selectedStock: NXObject, editFoldObj: NXObject) -> Routing.RouteSweptFoldBuilder:
        ...
    def CreateStockColorBuilder(self) -> Routing.StockColorBuilder:
        ...
    def CreateRemoveDiscontinuityBuilder(self, objects: typing.List[NXObject]) -> Routing.RemoveDiscontinuityBuilder:
        ...
    def CreateUnifyPathBuilder(self, objects: typing.List[NXObject]) -> Routing.UnifyPathBuilder:
        ...
    def CreateClockPartBuilder(self, selectedPort: NXObject) -> Routing.ClockPartBuilder:
        ...
    def CreateConnectPathBuilder(self) -> Routing.ConnectPathBuilder:
        ...
    def CreateOverstockFacesBuilder(self) -> Routing.OverstockFacesBuilder:
        ...
    def CreateCablewaysBuilder(self) -> Routing.Electrical.CablewaysBuilder:
        ...
    def CreateCablewaysBuilderWithObjects(self, objects: typing.List[NXObject]) -> Routing.Electrical.CablewaysBuilder:
        ...
    def CreateCablewaysLayoutBuilder(self) -> Routing.Electrical.CablewaysLayoutBuilder:
        ...
    def CreateEditCharacteristicsBuilder(self, objects: typing.List[NXObject]) -> Routing.EditCharacteristicsBuilder:
        ...
    def CreateRoutingPlacePartBuilder(self, partCharx: Routing.CharacteristicList, placementPos: Point3d, placementObj: TaggedObject) -> Routing.PlacePartBuilder:
        ...
    def CreatePlacePartBuilder(self, nodeIdentifier: str, filteredPtbRowIndex: int, placementPos: Point3d, placementObj: TaggedObject) -> Routing.PlacePartBuilder:
        ...
    def CreatePlacePartBuilderFS(self, nodeIdentifier: str, fileSelectCharx: Routing.CharacteristicList, placementPos: Point3d, placementObj: TaggedObject, replacePartOp: bool) -> Routing.PlacePartBuilder:
        ...
    def CreatePlacePartBuilderPTS(self, ptsPart: TaggedObject, ptsInstance: TaggedObject, placementPos: Point3d, placementObj: TaggedObject) -> Routing.PlacePartBuilder:
        ...
    def CreateEditPlacePartBuilder(self, partOcc: Assemblies.Component) -> Routing.EditPlacePartBuilder:
        ...
    def CreatePlacementSolutionsBuilder(self) -> Routing.PlacementSolutionsBuilder:
        ...
    def CreateStockTransitionBuilder(self, objects: typing.List[NXObject]) -> Routing.StockTransitionBuilder:
        ...
    def CreateFittingOverstockBuilder(self, overstock: Routing.FittingOverstock) -> Routing.FittingOverstockBuilder:
        ...
    def ModelTerminalsBuilder(self) -> Routing.ModelTerminalsBuilder:
        ...
    def TerminalPortBuilder(self) -> Routing.TerminalPortBuilder:
        ...
    def CreateAssignDiscontinuityBuilder(self, selectedPoint: NXObject) -> Routing.AssignDiscontinuityBuilder:
        ...
    def CreateManualRouteBuilder(self, routeLevel: Routing.Electrical.ElectricalStockDevice.RouteLevel, elecStockDevice: Routing.Electrical.ElectricalStockDevice) -> Routing.ManualRouteBuilder:
        ...
    def CreateSplitDuctBuilder(self) -> Routing.SplitDuctBuilder:
        ...
    def CreateHandrailBuilder(self) -> Routing.HandrailBuilder:
        ...
    def CreateDivisionsBuilder(self, selectedPort: NXObject, isAbsoluteFlow: bool) -> Routing.DivisionsBuilder:
        ...
    def CreateEditBendAngleBuilder(self, bendRcp: NXObject) -> Routing.EditBendAngleBuilder:
        ...
    def GenerateCablewaysLayoutData(self, segment: Curve, xform: Xform, width: float, height: float, gridFactor: int, points: typing.List[Point], cables: typing.List[Routing.Electrical.CableDevice]) -> None:
        ...
    def GetAllBIPComponents(self, components: typing.List[Assemblies.Component]) -> None:
        ...
    def ComponentHasBIPGeometry(self, bipComponent: Assemblies.Component) -> bool:
        ...
    def PromoteBIPGeometry(self, bipComponent: Assemblies.Component) -> None:
        ...
    def CreateFabricationBuilder(self, objects: typing.List[NXObject]) -> Routing.CreateFabricationBuilder:
        ...
    def SplitRunBuilder(self, run: Routing.Run) -> Routing.SplitRunBuilder:
        ...
    def CreateInstanceNameLookupBuilder(self) -> Routing.InstanceNameLookupBuilder:
        ...
    def CreateWatertightFittingsBuilder(self) -> Routing.WatertightFittingsBuilder:
        ...
    def IntegrateRunsBuilder(self, firstRun: Routing.Run, secondRun: Routing.Run) -> Routing.IntegrateRunsBuilder:
        ...
    def CreateDuctSizeCalculatorBuilder(self, objects: typing.List[NXObject]) -> Routing.DuctSizeCalculatorBuilder:
        ...
    def CreateAssignProxyBuilder(self, objects: typing.List[NXObject]) -> Routing.Electrical.AssignProxyBuilder:
        ...
    def AssembleConnectionsImportedFromSubAssemblies(self) -> None:
        ...
    def CreateRunItem(self, referenceID: str, itemType: Routing.RunItem.Type, attributes: Routing.CharacteristicList) -> Routing.RunItem:
        ...
    def CreateFindByAttributesBuilder(self) -> Routing.FindByAttributesBuilder:
        ...
    def CreateDuctReinforcementBuilder(self, ductReinforcement: Routing.DuctReinforcement) -> Routing.DuctReinforcementBuilder:
        """[Obsolete("Deprecated in NX1980.0.0.  Use NXOpen.Routing.RouteManager.CreateDuctReinforcementBuilderForStock instead.")"""
        ...
    def CreateDuctReinforcementBuilderForStock(self, ductReinforcement: NXObject) -> Routing.DuctReinforcementBuilder:
        ...
    def CreateWindCatcherBuilder(self, windCatcher: Routing.WindCatcher) -> Routing.WindCatcherBuilder:
        ...
    def CreatePlatformCreatorBuilder(self) -> Routing.PlatformCreatorBuilder:
        ...
    def CreatePlatformCreatorBuilder(self, platformFeature: Routing.PlatformFeature) -> Routing.PlatformCreatorBuilder:
        ...
    def CreateAssignPathBuilder(self, run: Routing.Run) -> Routing.AssignPathBuilder:
        ...
    def CreateAttributeHolder(self) -> Routing.AttributeHolder:
        ...
    def CreateDefineRunBuilder(self, selectedRun: Routing.Run) -> Routing.DefineRunBuilder:
        ...
    def CreateGapDisplayBuilder(self) -> Routing.GapDisplayBuilder:
        ...
    def CreateAddFontBuilder(self) -> Routing.AddFontBuilder:
        ...
    def CreateDeleteFontsBuilder(self, objects: typing.List[NXObject]) -> Routing.DeleteFontsBuilder:
        ...
    def CreateDeleteGapsBuilder(self, objects: typing.List[NXObject]) -> Routing.DeleteGapsBuilder:
        ...
    def ImportRunsNative(self, path: str) -> None:
        ...
    def ImportRunsManaged(self, itemPartNumber: str, itemRevision: str) -> None:
        ...
    def CreateCompareRunsBuilder(self, run: Routing.Run) -> Routing.CompareRunsBuilder:
        ...
    def HasAllReferencingStockComponentsLoaded(self, objectToValidate: TaggedObject) -> bool:
        ...
    def CreateBranchPathNumberingBuilder(self) -> Routing.BranchPathNumberingBuilder:
        ...
    def PlacePostPlacementParts(self, placedPart: Assemblies.Component, postPartCharx: Routing.CharacteristicList, postParts: typing.List[Assemblies.Component]) -> None:
        ...
    def CreateMergeStocksBuilder(self) -> Routing.MergeStocksBuilder:
        ...
    def CreateStockDataRefreshBuilder(self) -> Routing.StockDataRefreshBuilder:
        ...
    def CreateStockPartConverterBuilder(self) -> Routing.StockPartConverterBuilder:
        ...
    def RecreateStockComponents(self) -> str:
        ...
    def ConvertSplineSegments(self, splineSegments: typing.List[Routing.ISegment], originalSplineLengths: float, newSplineLengths: float) -> None:
        ...
    def ModelConnectionPostPlacementGasket(self, placedPart: Assemblies.Component, connection: Routing.PortConnection, reportInBOM: Routing.ReuseLibrary.ReportInBom, gasketCharx: Routing.CharacteristicList, connectionOne: Routing.PortConnection, connectionTwo: Routing.PortConnection) -> None:
        ...
    def ModelConnectionPostPlacementGasketBetweenFlanges(self, placedPart: Assemblies.Component, connection: Routing.PortConnection, reportInBOM: Routing.ReuseLibrary.ReportInBom, gasketCharx: Routing.CharacteristicList, connectionOne: Routing.PortConnection, connectionTwo: Routing.PortConnection, modeledGasket: Assemblies.Component) -> None:
        ...
    def ModelConnectionPostPlacementWeldGap(self, placedPart: Assemblies.Component, connection: Routing.PortConnection, gapValue: float) -> None:
        ...
    def CreateConnectionPostPlacementUdo(self, udoType: Routing.ReuseLibrary.PartType, numberOfItems: int, reportInBOM: Routing.ReuseLibrary.ReportInBom, udoCharx: Routing.CharacteristicList, connectionsToLink: typing.List[Routing.PortConnection]) -> None:
        ...
    def GetReferencingRuns(self, object: NXObject) -> typing.List[Routing.Run]:
        ...
    def CreateAlignStockBuilder(self) -> Routing.AlignStockBuilder:
        ...
    def DesignateFormboardPlacementCSys(self, csys: CoordinateSystem) -> None:
        ...
    def RemoveFormboardPlacementCSysDesignation(self) -> None:
        ...
    def CreatePathArrangementBuilder(self) -> Routing.Electrical.PathArrangementBuilder:
        ...
    def IsStockComponent(self, inputComponent: Assemblies.Component) -> bool:
        ...
    def FindRoutingObject(self, searchCriteria: Routing.RouteManager.SearchCriteria) -> Routing.RootObject:
        ...
    def FindRoutingSegments(self, guid: str) -> typing.List[Routing.ISegment]:
        ...
    def FindRoutingControlPoint(self, guid: str) -> Routing.ControlPoint:
        ...
    def DeselectAllObjectsInNavigators(self) -> None:
        ...
    def SelectObjectInNavigator(self, objectToSelect: Routing.RootObject) -> None:
        ...
    def SelectObjectsInNavigator(self, objectsToSelect: typing.List[Routing.RootObject]) -> None:
        ...
    def GetSelectedObjectsInNavigators(self, selectedObjects: typing.List[Routing.RootObject]) -> None:
        ...
    def GetStockFromBody(self, body: Body) -> Routing.Stock:
        ...
    def IsConnectionNavigatorOpen(self) -> bool:
        ...
    def OpenConnectionNavigator(self) -> None:
        ...
    def IsComponentNavigatorOpen(self) -> bool:
        ...
    def OpenComponentNavigator(self) -> None:
        ...
    def CreateRoutingPlaceElbowsBuilder(self) -> Routing.PlaceElbowsBuilder:
        ...
    def CreateAdoptionBuilder(self) -> Routing.AdoptionBuilder:
        ...
    def CreateBuiltInPathBuilder(self, bipObject: Routing.BuiltInPath) -> Routing.BuiltInPathBuilder:
        ...
    def CreateCablewayNetworkBuilder(self, cablewayObject: Routing.CablewayNetwork) -> Routing.CablewayNetworkBuilder:
        ...
    def CreateAnchorBuilder(self, anchorObject: Routing.Anchor) -> Routing.AnchorBuilder:
        ...
    def CreateCrossSectionBuilder(self, crossSectionObject: Routing.CrossSection) -> Routing.CrossSectionBuilder:
        ...
    def CreateFormboardPlacementCoordinateSystemBuilder(self, csysObject: CoordinateSystem) -> Routing.FormboardPlacementCoordinateSystemBuilder:
        ...
    def CreateRoutingEndFormBuilder(self) -> Routing.EndFormBuilder:
        ...
    def CreateQualifyPortBuilder(self, port: Routing.Port) -> Routing.QualifyPortBuilder:
        ...
    def CreateAssignTerminalsBuilder(self, port: Routing.Port) -> Routing.AssignTerminalsBuilder:
        ...
    def CreateAssignTerminalsItemBuilder(self, port: Routing.Port) -> Routing.AssignTerminalsItemBuilder:
        ...
    def CreateNamingPatternBuilder(self) -> Routing.NamingPatternBuilder:
        ...
    def CreatePortArraysBuilder(self, port: Routing.Port) -> Routing.PortArraysBuilder:
        ...
    def CreatePortArrayListItemBuilder(self) -> Routing.PortArrayListItemBuilder:
        ...
    def ImportFromCapital(self) -> None:
        ...
    def IsDirectIntegrationwithCapitalEnabled(self) -> bool:
        ...
    def CreateSplicePositionBuilder(self, splicePoint: Point) -> Routing.Electrical.SplicePositionBuilder:
        ...
    def UnlinkContextDiagram(self) -> None:
        ...
    def DeleteBundleSolids(self) -> None:
        ...
    def HighLightPathandBundleSolids(self, controlPoint1: Routing.ControlPoint, controlPoint2: Routing.ControlPoint, bundleId: str) -> None:
        ...
    def ExportSpliceObjects(self, jsonFilename: str) -> None:
        ...
    def IsRoutingPart(self) -> bool:
        ...
    def RemoveIdentifierFromNonRoutingParts(self) -> None:
        ...
    def ExportJson(self, infoType: Routing.RouteManager.JsonInformation, jsonFileName: str) -> None:
        ...
    def ExportZipFile(self, zipFilename: str) -> None:
        ...
    def ImportZipFile(self, zipFilename: str, importOperation: Routing.RouteManager.ImportMode) -> None:
        ...
    def ExportJsonFromHarnessDevice(self, harnessDeviceTag: Routing.Electrical.HarnessDevice, infoType: Routing.RouteManager.JsonInformation, jsonFileName: str) -> None:
        ...
    def CreateAdvanceToRsdBuilder(self) -> Routing.AdvanceToRsdBuilder:
        ...
    def Tag(self) -> Tag: ...

    BuiltInPaths: Routing.BuiltInPathCollection
    CablewayNetworks: Routing.CablewayNetworkCollection
    ControlPoints: Routing.ControlPointCollection
    Ports: Routing.PortCollection
    PortConnections: Routing.PortConnectionCollection
    FixturePorts: Routing.FixturePortCollection
    FittingPorts: Routing.FittingPortCollection
    MultiPorts: Routing.MultiPortCollection
    TerminalPorts: Routing.TerminalPortCollection
    ProxyPorts: Routing.ProxyPortCollection
    StockOffsetPorts: Routing.StockOffsetPortCollection
    OffsetPaths: Routing.OffsetPathCollection
    Runs: Routing.RunCollection
    RoutingSystems: Routing.RoutingSystemCollection
    RouteLogicalAssociations: Routing.RouteLogicalAssociationCollection
    Corners: Routing.CornerCollection
    BendCorners: Routing.BendCornerCollection
    CopeCorners: Routing.CopeCornerCollection
    DiscontinuityCorners: Routing.DiscontinuityCornerCollection
    MiterCorners: Routing.MiterCornerCollection
    SBendCorners: Routing.SBendCornerCollection
    MiteredBendCorners: Routing.MiteredBendCornerCollection
    RoutePartDescriptors: Routing.RoutePartDescriptorCollection
    Anchors: Routing.AnchorCollection
    Stocks: Routing.StockCollection
    StockDatas: Routing.StockDataCollection
    CrossSections: Routing.CrossSectionCollection
    Wires: Routing.WireCollection
    OverstockApplications: Routing.OverstockApplicationCollection
    Fillers: Routing.FillerCollection
    CableConnections: Routing.Electrical.CableConnectionCollection
    NonPathConnections: Routing.Electrical.NonPathConnectionCollection
    ConnectorDevices: Routing.Electrical.ConnectorDeviceCollection
    HarnessDevices: Routing.Electrical.HarnessDeviceCollection
    SystemDevices: Routing.Electrical.SystemDeviceCollection
    ElectricalStockDevice: Routing.Electrical.ElectricalStockDeviceCollection
    PathConnections: Routing.Electrical.PathConnectionCollection
    InterfaceTerminalRelationships: Routing.InterfaceTerminalRelationshipCollection
    JumperConnections: Routing.Electrical.JumperConnectionCollection
    ElectricalDeviceRelationships: Routing.Electrical.ElectricalDeviceRelationshipCollection
    DesignRules: Routing.DesignRuleCollection
    DesignRulesViolation: Routing.DesignRuleViolationCollection
    DesignRuleViolationLocation: Routing.DesignRuleViolationLocationCollection
    ElectricalConnections: Routing.Electrical.ConnectionCollection
    ElectricalFormats: Routing.Electrical.ElectricalFormatCollection
    ElectricalNavigatorFilters: Routing.Electrical.ElectricalNavigatorFilterCollection
    FormboardManager: Formboard.FormboardManager
    CablewaysLayoutViews: Routing.Electrical.CablewaysLayoutViewCollection
    FittingOverstock: Routing.FittingOverstockCollection
    ReuseLibrary: Routing.ReuseLibrary
    BendReportManager: Routing.BendReportManager
    DownDirection: Direction
    PartTypeFlag: Routing.RouteManager.PartType


    class RouteManagerSearchCriteria():
        ObjectType: Routing.RouteManager.FindObjectType
        OwningHarness: Routing.Electrical.HarnessDevice
        ApplicationName: str
        UniqueID: str
        def ToString(self) -> str:
            ...
    

    class RootType(enum.Enum):
        Top = 0
        Stock = 1
        Wire = 2
        Part = 3
    

    class PartType(enum.Enum):
        Part = 0
        Stock = 1
        Fabrication = 2
        StockComponent = 3
        WireComponent = 4
        Overstock = 5
        Logical = 6
        TemplateAssy = 7
        Connector = 8
        Splice = 9
        Device = 10
        Filler = 11
        Unknown = -1
    

    class JsonInformation(enum.Enum):
        Splice = 0
        Clocking = 1
        Twist = 2
        All = 3
    

    class ImportMode(enum.Enum):
        Update = 700
        Merge = 701
        Append = 702
    

    class FixPosition(enum.Enum):
        Off = 0
        On = 1
    

    class FindObjectType(enum.Enum):
        Harness = 0
        Cable = 1
        Shield = 2
        Connector = 3
        Device = 4
        Connection = 5
        Wire = 6
        Unknown = -1
    

    class ColumnStatus(enum.Enum):
        NotHidden = 0
        Hidden = 1
    

    class BomStockLength(enum.Enum):
        SingleSum = 0
        ListEach = 1
    

    class BomLevel(enum.Enum):
        Summery = 0
        Itemized = 1
    

    class BomFabrication(enum.Enum):
        Off = 0
        On = 1
    

    class BomBlankLines(enum.Enum):
        Off = 0
        On = 1
    

    class RouteManager_SearchCriteria():
        objectType: Routing.RouteManager.FindObjectType
        owningHarness: Tag
        applicationName: int
        uniqueID: int
    

class RouteLogicalAssociationCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.RouteLogicalAssociation]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateLogicalAssociation(self, name: str, control: NXObject, targets: typing.List[NXObject], includeStocks: bool) -> Routing.RouteLogicalAssociation:
        ...
    def PerformLogicalAssociation(self, logicalAssociations: typing.List[Routing.RouteLogicalAssociation]) -> None:
        ...
    def GetLogicalAssociations(self) -> typing.List[Routing.RouteLogicalAssociation]:
        ...
    def Tag(self) -> Tag: ...



class RouteLogicalAssociation(NXObject):
    def __init__(self) -> None: ...
    def Perform(self) -> None:
        ...
    def Remove(self) -> None:
        ...
    def GetControl(self) -> NXObject:
        ...
    def SetControl(self, control: NXObject) -> None:
        ...
    def GetTargets(self) -> typing.List[NXObject]:
        ...
    def AddTarget(self, target: NXObject) -> None:
        ...
    def RemoveTarget(self, target: NXObject) -> None:
        ...
    def GetRoutedCondition(self) -> bool:
        ...
    def SetRoutedCondition(self, condition: bool) -> None:
        ...
    def EnableLogicalAssociation(self, enable: bool) -> None:
        ...


class RootObject(NXObject):
    def __init__(self) -> None: ...
    Guid: str


class ReuseLibrary(Utilities.NXRemotableObject):
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def Reload(self) -> None:
        ...
    def PartLibraryGetDisciplineRoots(self, identifiers: str, names: str) -> None:
        ...
    def PartLibraryGetChildNodes(self, nodeIdentifier: str, childIdentifiers: str, names: str) -> None:
        ...
    def PartLibraryGetPartsAtNode(self, nodeIdentifier: str) -> Routing.CharacteristicList:
        ...
    def GetMatchingParts(self, startingIdentifier: str, searchCriteria: Routing.CharacteristicList) -> typing.List[Routing.CharacteristicList]:
        ...
    def SpecificationsGetDisciplineSpecifications(self, specs: str) -> None:
        ...
    def SpecificationsGetCurrent(self) -> str:
        ...
    def AddNewSpecification(self, specName: str) -> None:
        ...
    def SpecificationsSetDescription(self, specName: str, description: str) -> None:
        ...
    def SpecificationsGetDescription(self, specName: str) -> str:
        ...
    def SpecificationsSetAttributeRelationships(self, specName: str, nodeIdentifier: str, attributeFilter: Routing.CharacteristicList) -> None:
        ...
    def SpecificationsGetAttributeRelationships(self, specName: str, nodeIdentifier: str, numFilters: int) -> Routing.CharacteristicList:
        ...
    def SpecificationsGetBranchTable(self, specName: str, npsValues: float, npsBranchValues: float) -> None:
        ...
    def SpecificationsSetBranchCompatibility(self, specName: str, nps: float, npsBranch: float) -> None:
        ...
    def SpecificationsRemoveBranchCompatibility(self, specName: str, nps: float, npsBranch: float) -> None:
        ...
    def SpecificationsAddConnectionCompatibility(self, specName: str, connectionTypeOne: str, connectionTypeTwo: str) -> None:
        ...
    def SpecificationsRemoveConnectionCompatibility(self, specName: str, connectionTypeOne: str, connectionTypeTwo: str) -> None:
        ...
    def SpecificationsGetConnectionCompatibilities(self, specName: str, connectionTypesOne: str, connectionTypesTwo: str) -> None:
        ...
    def SpecificationsSetConnectionPostPlacement(self, specName: str, connectionTypeOne: str, connectionTypeTwo: str, gasket: bool, bolt: bool, stud: bool, nut: bool, washers: bool, weldRing: bool, ringJoints: bool) -> None:
        ...
    def SpecificationsGetConnectionPostPlacement(self, specName: str, connectionTypeOne: str, connectionTypeTwo: str, gasket: bool, bolt: bool, stud: bool, nut: bool, washers: bool, weldRing: bool, ringJoints: bool) -> None:
        ...
    def SpecificationsDefinePostPlacementRules(self, specName: str, partType: Routing.ReuseLibrary.PartType, startingIdentifier: str, searchAttributes: str) -> None:
        ...
    def SpecificationsGetPostPlacementRules(self, specName: str, partType: Routing.ReuseLibrary.PartType, startingIdentifier: str, searchAttributes: str) -> None:
        ...
    def SpecificationsSetReportInBom(self, specName: str, gasket: bool, bolt: bool, stud: bool, nut: bool, washers: bool, weldRing: bool, ringJoints: bool, weldGap: bool) -> None:
        """[Obsolete("Deprecated in NX1847.0.0.  Use Routing.ReuseLibrary.SpecificationsSetPostPlacementReportInBom instead.")"""
        ...
    def SpecificationsGetReportInBom(self, specName: str, gasket: bool, bolt: bool, stud: bool, nut: bool, washers: bool, weldRing: bool, ringJoints: bool, weldGap: bool) -> None:
        ...
    def SpecificationsSetGeneralConnectionOptions(self, specName: str, modelGaskets: bool, modelWeldGaps: bool, additionalBoltLength: float, additionalStudLength: float, weldGapValue: float) -> None:
        """[Obsolete("Deprecated in NX1847.0.0.  Use Routing.ReuseLibrary.SpecificationsSetAdditionalConnectionOptions instead.")"""
        ...
    def SpecificationsGetGeneralConnectionOptions(self, specName: str, modelGaskets: bool, modelWeldGaps: bool, additionalBoltLength: float, additionalStudLength: float, weldGapValue: float) -> None:
        ...
    def SpecificationsAddGenericPostPlacement(self, specName: str, placedPartIdentifier: str, postPlacementIdentifier: str, searchAttributes: str) -> None:
        ...
    def SpecificationsRemoveGenericPostPlacement(self, specName: str, placedPartIdentifier: str, postPlacementIdentifier: str) -> None:
        ...
    def SpecificationsGetGenericPostPlacements(self, specName: str, placedPartIdentifier: str, postPlacementIdentifier: str) -> None:
        ...
    def SpecificationsGetGenericPostPlacementSearchAttributes(self, specName: str, placedPartIdentifier: str, postPlacementIdentifier: str, searchAttributes: str) -> None:
        ...
    def ReloadSpecifications(self, forceReload: bool) -> None:
        ...
    def ReloadSpecification(self, specName: str) -> None:
        ...
    def DeleteSpecification(self, specName: str) -> None:
        ...
    def SpecificationsUpdateAttributeRelationship(self, specificationName: str, nodeIdentifier: str, index: int, title: str, value: str) -> None:
        ...
    def SpecificationsRemoveAttributeRelationships(self, specificationName: str, index: int) -> None:
        ...
    def SpecificationsClearGenericPostPlacements(self, specificationName: str) -> None:
        ...
    def SpecificationsSetDiscipline(self, specificationName: str, discipline: str) -> None:
        ...
    def SpecificationsTogglePostPlacementOption(self, specificationName: str, connectionTypeOne: str, connectionTypeTwo: str, partType: Routing.ReuseLibrary.PartType) -> None:
        ...
    def SpecificationsRemoveAttribute(self, specificationName: str, connectionTypeOne: str) -> None:
        ...
    def SpecificationsDestroyManager(self) -> None:
        ...
    def SpecificationInitializeManager(self, specName: str, isEditFlag: bool) -> None:
        ...
    def SpecificationsSetAdditionalConnectionOptions(self, specName: str, modelGaskets: bool, additionalBoltLength: float, additionalStudLength: float) -> None:
        ...
    def SpecificationsSetPostPlacementReportInBom(self, specName: str, gasket: bool, bolt: bool, stud: bool, nut: bool, washers: bool, ringJoints: bool) -> None:
        ...
    def Tag(self) -> Tag: ...



    class ReportInBom(enum.Enum):
        DoNotReport = 0
        Report = 1
    

    class PartType(enum.Enum):
        Gasket = 0
        Bolt = 1
        Stud = 2
        Nut = 3
        Washer = 4
        Weldring = 5
        Ringjoint = 6
        Unknown = -1
    

class RemoveDiscontinuityBuilder(Builder):
    def __init__(self) -> None: ...
    DiscontinuityCorner: Routing.RouteObjectCollector


class QuickPathBuilder(Builder):
    def __init__(self) -> None: ...
    def SetListOfPointsToDraw(self, index: int, point: Point3d) -> None:
        ...
    def SetListOfPointsToDrawCount(self, count: int) -> None:
        ...
    PathErrors: ErrorList
    PathSettings: Routing.LinearPathSettings
    PointList: PointList
    RouteSegment: Curve
    StockSettings: Routing.PathStockBuilder


class QualifyPortBuilder(Builder):
    def __init__(self) -> None: ...
    AlignVector: Direction
    AlignVectorUserDefined: bool
    AllowMultiConnections: bool
    AllowPortEngagement: bool
    BackExtension: Expression
    ClockingAngle: Expression
    CutbackLength: Expression
    Face: SelectFace
    FlowDirection: Routing.Port.FlowDirectionType
    LengthAddition: Expression
    Line1: SelectICurve
    Line2: SelectICurve
    OffsetExpression: str
    OffsetVector: Direction
    OffsetVectorUserDefined: bool
    OriginPoint: Point
    PortEngagement: Expression
    PortExtension: Expression
    PortNameString: str
    PortType: Routing.QualifyPortBuilder.CreatePortType
    PositioningMethod: Routing.QualifyPortBuilder.PositioningMethodType
    ReverseVector: bool
    RotationVector: Direction
    SpoolDelimiter: bool
    StockOffset: bool


    class PositioningMethodType(enum.Enum):
        PointAndVector = 0
        MidpointOnFace = 1
        BetweenTwoLines = 2
    

    class CreatePortType(enum.Enum):
        Fitting = 0
        Fixture = 1
        Multi = 2
    

class ProxyPortCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.ProxyPort]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateProxyPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float) -> Routing.ProxyPort:
        ...
    def CreateProxyPort(self, origin: Point3d, alignmentVector: Vector3d) -> Routing.ProxyPort:
        ...
    def CreateProxyPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, point: Point) -> Routing.ProxyPort:
        ...
    def CreateProxyPort(self, origin: Point3d, alignmentVector: Vector3d, point: Point) -> Routing.ProxyPort:
        ...
    def CreateProxyPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, axis: Axis) -> Routing.ProxyPort:
        ...
    def CreateProxyPort(self, origin: Point3d, alignmentVector: Vector3d, derivationObject: Axis) -> Routing.ProxyPort:
        ...
    def CreateProxyPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, allowMultipleConnections: bool) -> Routing.ProxyPort:
        ...
    def CreateProxyPort(self, origin: Point3d, alignmentVector: Vector3d, allowMultipleConnections: bool) -> Routing.ProxyPort:
        ...
    def CreateProxyPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, point: Point, allowMultipleConnections: bool) -> Routing.ProxyPort:
        ...
    def CreateProxyPort(self, origin: Point3d, alignmentVector: Vector3d, point: Point, allowMultipleConnections: bool) -> Routing.ProxyPort:
        ...
    def CreateProxyPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, axis: Axis, allowMultipleConnections: bool) -> Routing.ProxyPort:
        ...
    def CreateProxyPort(self, origin: Point3d, alignmentVector: Vector3d, derivationObject: Axis, allowMultipleConnections: bool) -> Routing.ProxyPort:
        ...
    def Tag(self) -> Tag: ...



class ProxyPort(Routing.Port):
    def __init__(self) -> None: ...
    def SetAlignVector(self, vector: Vector3d) -> None:
        ...
    def SetRotationVector(self, vector: Vector3d) -> None:
        ...
    def SetRotationObject(self, rotationObject: DisplayableObject) -> None:
        ...
    def SetForwardExtension(self, forwardExtension: float) -> None:
        ...
    def SetEngagement(self, engagement: float) -> None:
        ...
    def SetCutbackLength(self, cutbackLength: float) -> None:
        ...
    Axis: Axis
    CutbackLengthObject: Expression
    EngagementObject: Expression
    ForwardExtensionObject: Expression


class ProfileFrom(enum.Enum):
    Start = 0
    End = 1


class PortConnectionCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.PortConnection]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreatePortConnection(self, port1: Routing.Port, port2: Routing.Port) -> Routing.PortConnection:
        ...
    def CanPortsConnect(self, port1: Routing.Port, port2: Routing.Port) -> Routing.PortConnectionCollection.PortsStatus:
        ...
    def GetConnectionFromPort(self, port: Routing.Port) -> Routing.PortConnection:
        ...
    def Tag(self) -> Tag: ...



    class PortsStatus(enum.Enum):
        CanConnect = 0
        CannotConnect = 1
    

class PortConnection(NXObject):
    def __init__(self) -> None: ...
    def GetPorts(self, port1: Routing.Port, port2: Routing.Port) -> None:
        ...
    def SetPorts(self, port1: Routing.Port, port2: Routing.Port) -> None:
        ...
    def GetEngagement(self) -> float:
        ...
    def SetEngagement(self, engagement: float) -> None:
        ...
    def IsValid(self) -> bool:
        ...
    def ArePortsAligned(self) -> bool:
        ...
    def OverrideValidity(self, overriddenValidity: Routing.PortConnection.OverriddenValidity) -> None:
        ...
    def GetOverrideReason(self) -> str:
        ...
    def SetOverrideReason(self, reason: str) -> None:
        ...
    def GetOverriddenValidity(self) -> Routing.PortConnection.OverriddenValidity:
        ...
    def ForceValid(self, reason: str) -> None:
        ...
    def RemoveForcedValidity(self) -> None:
        ...
    def IsForcedValid(self) -> bool:
        ...


    class OverriddenValidity(enum.Enum):
        None = 0
        Valid = 1
        Invalid = 2
    

class PortCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Port]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateExtractPort(self, port: Routing.Port) -> Routing.ExtractPort:
        ...
    def CreateExtractPort(self, port: Routing.Port, allowMultipleConnections: bool) -> Routing.ExtractPort:
        ...
    def ConvertToFeatures(self) -> None:
        ...
    def GetComponentPorts(self, component: Assemblies.Component) -> typing.List[Routing.Port]:
        ...
    def GetObjectPorts(self, entity: NXObject) -> typing.List[Routing.Port]:
        ...
    def UpdatePortObjectLocations(self) -> None:
        ...
    def FindPortFromPoint(self, point: Point) -> Routing.Port:
        ...
    def Tag(self) -> Tag: ...



class PortArraysBuilder(Builder):
    def __init__(self) -> None: ...
    ArrayPatternList: Routing.PortArrayListItemBuilderList
    ArrayType: Routing.PortArraysBuilder.ArrayTypes
    NamingMethod: Routing.PortArraysBuilder.NamingMethods
    PatternCol: Routing.NamingPatternBuilder
    PatternRow: Routing.NamingPatternBuilder
    ReuseSuppressedNames: bool
    StartingCorner: Routing.PortArraysBuilder.StartingCorners
    StartingDirection: Routing.PortArraysBuilder.StartingDirections


    class StartingDirections(enum.Enum):
        Horizontal = 0
        Vertical = 1
    

    class StartingCorners(enum.Enum):
        BottomLeft = 0
        BottomRight = 1
        UpperLeft = 2
        UpperRight = 3
    

    class NamingMethods(enum.Enum):
        Clockwise = 0
        Counterclockwise = 1
        Across = 2
        Continuous = 3
        RowCol = 4
    

    class ArrayTypes(enum.Enum):
        Rectangular = 0
        Circular = 1
    

class PortArrayListItemBuilderList(TaggedObject):
    def __init__(self) -> None: ...
    def Append(self, objects: typing.List[Routing.PortArrayListItemBuilder]) -> None:
        ...
    def Append(self, object: Routing.PortArrayListItemBuilder) -> None:
        ...
    def ClearIndex(self, deleteIdx: int) -> None:
        ...
    def FindIndex(self, obj: Routing.PortArrayListItemBuilder) -> int:
        ...
    def FindItem(self, index: int) -> Routing.PortArrayListItemBuilder:
        ...
    def Erase(self, index: int) -> None:
        ...
    def Erase(self, index: int, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Erase(self, obj: Routing.PortArrayListItemBuilder) -> None:
        ...
    def Erase(self, obj: Routing.PortArrayListItemBuilder, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def Clear(self) -> None:
        ...
    def Clear(self, deleteOption: ObjectList.DeleteOption) -> None:
        ...
    def GetContents(self) -> typing.List[Routing.PortArrayListItemBuilder]:
        ...
    def SetContents(self, objects: typing.List[Routing.PortArrayListItemBuilder]) -> None:
        ...
    def Swap(self, index1: int, index2: int) -> None:
        ...
    def Swap(self, object1: Routing.PortArrayListItemBuilder, object2: Routing.PortArrayListItemBuilder) -> None:
        ...
    def Insert(self, location: int, object: Routing.PortArrayListItemBuilder) -> None:
        ...
    def MoveToTop(self, index: int) -> None:
        ...
    def MoveToBottom(self, index: int) -> None:
        ...
    Length: int


class PortArrayListItemBuilder(Builder):
    def __init__(self) -> None: ...
    MasterInstance: Point
    PatternFeature: Features.SelectFeature
    StartingLocation: Features.SelectFeature


class Port(SmartObject):
    def __init__(self) -> None: ...
    def GetPortType(self) -> Routing.Port.PortType:
        ...
    def GetAlignmentVector(self) -> Vector3d:
        ...
    def GetClockIncrement(self) -> float:
        ...
    def SetClockIncrement(self, increment: float) -> None:
        ...
    def GetFlowDirection(self) -> Routing.Port.FlowDirectionType:
        ...
    def SetFlowDirection(self, flowDirection: Routing.Port.FlowDirectionType) -> None:
        ...
    def GetRotationVector(self) -> Vector3d:
        ...
    def GetRotationObject(self) -> DisplayableObject:
        ...
    def GetSegment(self) -> Routing.ISegment:
        ...
    def GetForwardExtension(self) -> float:
        ...
    def GetForwardExtensionObject(self) -> Expression:
        ...
    def GetEngagement(self) -> float:
        ...
    def GetEngagementPosition(self) -> Point3d:
        ...
    def GetCutbackLength(self) -> float:
        ...
    def FindPortIntegerCharacteristic(self, name: str) -> int:
        ...
    def FindPortRealCharacteristic(self, name: str) -> float:
        ...
    def FindPortStringCharacteristic(self, name: str) -> str:
        ...
    def GetReferenceCharacteristic(self, name: str) -> str:
        ...
    def SetReferenceCharacteristic(self, name: str, value: str) -> None:
        ...
    def Connect(self) -> Routing.PortConnection:
        ...
    def Disconnect(self) -> None:
        ...
    def LockEngagement(self, portToLock: Routing.Port) -> typing.List[Positioning.Constraint]:
        ...
    def LockRotation(self, portToLock: Routing.Port) -> typing.List[Positioning.Constraint]:
        ...
    def UnlockEngagement(self, portToUnlock: Routing.Port) -> None:
        ...
    def UnlockRotation(self, portToUnlock: Routing.Port) -> None:
        ...
    def IsRotationLocked(self, portToCheck: Routing.Port) -> bool:
        ...
    def IsEngagementLocked(self, portToCheck: Routing.Port) -> bool:
        ...
    def AskFeature(self) -> Routing.FeaturePort:
        ...
    def AskWaveFeature(self) -> Features.WaveRouting:
        ...
    def ReorderFeature(self) -> None:
        ...
    def GetComponent(self) -> Assemblies.Component:
        ...
    def GetConnectedPorts(self, connectedPort1: Routing.Port, connectedPort2: Routing.Port) -> None:
        ...
    def GetPortConnection(self) -> Routing.PortConnection:
        ...
    def GetOccurrence(self) -> NXObject:
        ...
    def GetControlPoint(self) -> Routing.ControlPoint:
        ...
    def GetStockOfPort(self) -> Routing.Stock:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...
    AllowMultipleConnections: bool
    BackwardExtension: float
    BackwardExtensionObject: Expression
    ClockIncrementObject: Expression
    Point: Point
    Position: Point3d


    class PortType(enum.Enum):
        UnknownPort = 0
        FittingPort = 1
        FixturePort = 2
        MultiPort = 3
        TerminalPort = 4
        StockPort = 5
        StockOffsetPort = 6
    

    class FlowDirectionType(enum.Enum):
        RouteFlowEither = 0
        RouteFlowIn = 1
        RouteFlowOut = 2
        FlowNone = 3
    

    class CreateRotationVector(enum.Enum):
        No = 0
        Yes = 1
    

class PointDefinition(enum.Enum):
    Start = 0
    Middle = 1
    End = 2


class PlatformFeature(Features.BodyFeature):
    def __init__(self) -> None: ...


class PlatformCreatorBuilder(Builder):
    def __init__(self) -> None: ...
    def SpecifyPlate(self) -> None:
        ...
    def GetPlatePart(self) -> Routing.CharacteristicList:
        ...
    def SetPlatePart(self, platePart: Routing.CharacteristicList) -> None:
        ...
    def GetPlateAppliedCharx(self) -> Routing.CharacteristicList:
        ...
    def SetPlateAppliedCharx(self, appliedCharx: Routing.CharacteristicList) -> None:
        ...
    ExternalFrameAnchorName: str
    ExternalStockSettings: Routing.PathStockBuilder
    GrateOrientationReference: Routing.PlatformCreatorBuilder.ReferenceType
    GrateOrientationSymbolDisplay: bool
    GrateOrientationSymbolRefSelection: SelectNXObject
    InternalFrameAnchorName: str
    InternalStockSettings: Routing.PathStockBuilder
    PlateBoundariesSelection: Section
    SelectOuterBoundary: Section
    ThickenDirection: bool
    UseSameStock: bool


    class ReferenceType(enum.Enum):
        Horizontal = 0
        Vertical = 1
    

class Platform(NXObject):
    def __init__(self) -> None: ...


class PlacePartBuilder(Builder):
    def __init__(self) -> None: ...
    def LoadPart(self, partNumber: str) -> None:
        ...
    def LoadPart(self) -> None:
        ...
    def SetActiveRefSet(self, refSet: str) -> None:
        ...
    def GetActiveRefSet(self) -> str:
        ...
    def SetActiveLayer(self, layerOption: int, layer: int) -> None:
        ...
    def SetScrewSeatPlacement(self, startLocation: TaggedObject, endLocation: TaggedObject, startPoint: Point3d, endPoint: Point3d, length: Expression, angle: Expression) -> None:
        ...
    def FinalizePlacement(self, optionalCharx: Routing.CharacteristicList, requiredCharx: Routing.CharacteristicList, name: str, layerOption: int, layer: int, dfaultOStock: bool) -> None:
        ...
    def UpdatePlacementObj(self, placementObj: TaggedObject, placementPos: Point3d) -> None:
        ...
    def UnloadPart(self) -> None:
        ...
    def GetLoadedPartInfo(self, loadedPart: TaggedObject, loadedInst: TaggedObject) -> None:
        ...
    def SetLoadedPartInfo(self, loadedPart: TaggedObject, loadedInst: TaggedObject) -> None:
        ...
    def ReplaceLoadedInstance(self, partInst: TaggedObject) -> None:
        ...
    def SetPlacePartOperation(self, replacePart: bool) -> None:
        ...
    def SetScrewSeatIntersectionPoint(self, intersectionPoint: Point3d) -> None:
        ...
    def GetScrewSeatIntersectionPoint(self) -> Point3d:
        ...
    def SetScrewSeatAlignmentVector(self, alignVector: Vector3d) -> None:
        ...
    def GetScrewSeatAlignmentVector(self) -> Vector3d:
        ...
    def SetScrewSeatEnd(self, point: Point3d) -> None:
        ...
    def GetScrewSeatEnd(self) -> Point3d:
        ...
    def SetAttributeHolder(self, attributeHolder: Routing.AttributeHolder) -> None:
        ...
    def GetAttributeHolder(self) -> Routing.AttributeHolder:
        ...
    def GetAddPartToActiveRunFlag(self) -> bool:
        ...
    def SetAddPartToActiveRunFlag(self, addPartToActiveRun: bool) -> None:
        ...
    def GetScrewSeatLength(self) -> Expression:
        ...
    def GetScrewSeatAngle(self) -> Expression:
        ...
    def SetItemSelection(self, itemSelectionMethod: int, selectedPartOcc: TaggedObject) -> None:
        ...
    def UpdateRoutingTemplateAttributes(self) -> None:
        ...
    def SetConsiderPorts(self, considerPorts: bool) -> None:
        ...
    def GetNumberOfPlacedOccurrences(self) -> int:
        ...
    def GetPlacedOccurrence(self, index: int) -> TaggedObject:
        ...
    def AddPlacedOccurrence(self, occTag: TaggedObject) -> None:
        ...


class PlacementSolutionsBuilder(Builder):
    def __init__(self) -> None: ...
    def InitializePlacementData(self, part: TaggedObject, placementPos: Point3d, partToPlace: TaggedObject) -> None:
        ...
    def GetNumberOfSolutions(self) -> int:
        ...
    def GetSolutionIndex(self) -> int:
        ...
    def NextSolution(self) -> None:
        ...
    def FirstSolution(self) -> None:
        ...
    def PreviousSolution(self) -> None:
        ...
    def ApplyConstraintsAndClear(self) -> None:
        ...
    def ApplyConstraintsAndClear(self, lockEngagement: bool, lockRotation: bool) -> None:
        ...
    def ApplyPortRotation(self, angle: float) -> None:
        ...
    def ApplyConstraintsAndClear(self, lockEngagement: bool, lockRotation: bool, fixPart: bool) -> None:
        ...
    def GetConsiderPorts(self) -> bool:
        ...
    def SetConsiderPorts(self, considerPorts: bool) -> None:
        ...
    def GetOnlyPrimaryPlacementSolutions(self) -> bool:
        ...
    def SetOnlyPrimaryPlacementSolutions(self, onlyPrimaryPlacementSolutions: bool) -> None:
        ...
    def GetLookForAdditionalPlacementSolutions(self) -> bool:
        ...
    def SetLookForAdditionalPlacementSolutions(self, lookForAdditionalPlacementSolutions: bool) -> None:
        ...


class PlaceElbowsBuilder(Builder):
    def __init__(self) -> None: ...
    def SetAttributeHolder(self, attributeHolder: Routing.AttributeHolder) -> None:
        ...
    def PlaceMultipleElbows(self, jaCharx: Routing.CharacteristicList, refSet: str, layer: int, layerOption: int, overstockFlag: bool, optionalCharx: Routing.CharacteristicList, requiredCharx: Routing.CharacteristicList) -> None:
        ...
    AttributeHolder: Routing.AttributeHolder
    SelectRoutingObjects: Routing.RouteObjectCollector


class PathStockBuilder(Builder):
    def __init__(self) -> None: ...
    def AssignStock(self, segments: typing.List[Routing.ISegment]) -> None:
        ...
    def UpdateExistingStock(self, existingStock: Routing.Stock) -> None:
        ...
    def GetSpecifiedStock(self) -> Routing.CharacteristicList:
        ...
    def GetSpecifiedStock(self, stockPart: Routing.CharacteristicList, appliedCharx: Routing.CharacteristicList) -> None:
        ...
    def SetSpecifiedStock(self, stockPart: Routing.CharacteristicList) -> None:
        ...
    def SetSpecifiedStock(self, stockPart: Routing.CharacteristicList, appliedCharx: Routing.CharacteristicList) -> None:
        ...
    def GetParts(self) -> typing.List[Assemblies.Component]:
        ...
    def SetParts(self, parts: typing.List[Assemblies.Component]) -> None:
        ...
    def SettingsChanged(self) -> None:
        ...
    def GetRectangularDimensions(self, height: float, width: float) -> None:
        ...
    def SetRectangularDimensions(self, height: float, width: float) -> None:
        ...
    def GetFlatOvalDimensions(self, height: float, width: float) -> None:
        ...
    def SetFlatOvalDimensions(self, height: float, width: float) -> None:
        ...
    def SetSelectedStock(self, stock: Routing.Stock) -> None:
        ...
    def IsRotationOverriden(self) -> bool:
        ...
    def OverrideRotation(self, overrideRotation: bool) -> None:
        ...
    def DefaultOrientationAlignmentEnabled(self) -> bool:
        ...
    def EnableDefaultOrientationAlignment(self, suggestRotationAngle: bool) -> None:
        ...
    AssignStockMethod: Routing.PathStockBuilder.AssignMethod
    DiameterValue: float
    FlatOvalHeight: Expression
    FlatOvalRotation: Expression
    FlatOvalWidth: Expression
    RectangularHeight: Expression
    RectangularRotation: Expression
    RectangularWidth: Expression
    StartObject: NXObject
    StockRotation: Expression
    StockType: Routing.PathStockBuilder.AssignStockType


    class AssignStockType(enum.Enum):
        Stock = 0
        Overstock = 1
        Filler = 2
        SpaceReservation = 3
    

    class AssignMethod(enum.Enum):
        None = 0
        DefaultStock = 1
        FromStartObject = 2
        DiameterValue = 3
        Rectangular = 4
        FlatOval = 5
        SpecifiedStock = 6
        FromParts = 7
    

class Path(NXObject):
    def __init__(self) -> None: ...
    def GetLength(self) -> float:
        ...
    def GetSegmentList(self) -> typing.List[Routing.ISegment]:
        ...
    def AddSegmentsToList(self, objs: typing.List[Routing.ISegment]) -> None:
        ...
    def DelSegmentsFromList(self, objs: typing.List[Routing.ISegment]) -> None:
        ...
    ControlPointEnd: Routing.ControlPoint
    ControlPointStart: Routing.ControlPoint


class PartDefinitionShadow(Routing.ItemDefinition):
    def __init__(self) -> None: ...
    def GetInterfaceTerminalShadows(self) -> typing.List[Routing.InterfaceTerminalShadow]:
        ...


class PartDefinitionBase(Routing.ItemDefinition):
    def __init__(self) -> None: ...


class OverstockFacesBuilder(Builder):
    def __init__(self) -> None: ...
    Faces: SelectFaceList


class OverstockBuilder(Builder):
    def __init__(self) -> None: ...
    def UpdatePathCurve(self) -> None:
        ...
    def GetCoveredStocks(self) -> typing.List[Routing.Stock]:
        ...
    def SetCoveredStocks(self, stocks: typing.List[Routing.Stock]) -> None:
        ...
    def GetNumberOfLayers(self) -> Expression:
        ...
    def SetNumberOfLayers(self, numberOfLayers: Expression) -> None:
        ...
    def IsOverlapDefinedByNumberOfLayers(self) -> bool:
        ...
    def SetOverlapDefinedByNumberOfLayers(self, isOverlapDefinedByNumberOfLayers: bool) -> None:
        ...
    ApplicationMethod: Routing.OverstockBuilder.ApplicationType
    DefiningPoint: GeometricUtilities.OnPathDimensionBuilder
    Distance: Expression
    DistanceLock: bool
    EndOffset: GeometricUtilities.OnPathDimensionBuilder
    EndOffsetLock: bool
    EndPoint: GeometricUtilities.OnPathDimensionBuilder
    FlipStock: bool
    Gap: Expression
    GapDistance: Expression
    GapLock: bool
    IntervalPieceLength: Expression
    NumberOfPieces: Expression
    NumberOfPiecesLock: bool
    NumberOfWraps: Expression
    OverlapPercentage: Expression
    PathCurve: Curve
    PieceLength: Expression
    PieceLengthLock: bool
    PointDefines: Routing.OverstockBuilder.PointType
    RotationValue: Expression
    SegmentCollector: Routing.RouteObjectCollector
    StartOffset: GeometricUtilities.OnPathDimensionBuilder
    StartOffsetLock: bool
    StartPoint: GeometricUtilities.OnPathDimensionBuilder
    StockAnchor: str
    StockSettings: Routing.PathStockBuilder
    SwapProfile: bool
    SwitchStartEnd: bool
    WrapMethod: Routing.OverstockBuilder.WrapType


    class WrapType(enum.Enum):
        OverlapSpiral = 0
        Spot = 1
        StripedSpiral = 2
        Unknown = 3
    

    class PointType(enum.Enum):
        Start = 0
        Middle = 1
        End = 2
    

    class ApplicationType(enum.Enum):
        EntireSegments = 0
        Interval = 1
        PointToPoint = 2
        PointAndLength = 3
    

class OverstockApplicationCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.OverstockApplication]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateOverstockApplication(self, startControlPoint: Routing.ControlPoint, segments: typing.List[Routing.ISegment], stocks: typing.List[Routing.Stock], overstockPart: Routing.CharacteristicList, stockWrapType: Routing.WrapApplicationType, wrapValue: Expression) -> Routing.OverstockApplication:
        ...
    def CreateOverstockApplication(self, startControlPoint: Routing.ControlPoint, segments: typing.List[Routing.ISegment], stocks: typing.List[Routing.Stock], startOffset: Expression, endOffset: Expression, pieceLength: Expression, gap: Expression, numberOfPieces: Expression, startPoint: Point, overstockPart: Routing.CharacteristicList, stockWrapType: Routing.WrapApplicationType, wrapValue: Expression) -> Routing.OverstockApplication:
        ...
    def CreateOverstockApplication(self, startControlPoint: Routing.ControlPoint, segments: typing.List[Routing.ISegment], stocks: typing.List[Routing.Stock], startPoint: Point, endPoint: Point, overstockPart: Routing.CharacteristicList, stockType: Routing.WrapApplicationType, wrapValue: Expression) -> Routing.OverstockApplication:
        ...
    def CreateOverstockApplication(self, startControlPoint: Routing.ControlPoint, segments: typing.List[Routing.ISegment], stocks: typing.List[Routing.Stock], definingPoint: Point, definingDirection: Routing.PointDefinition, pieceLength: Expression, overstockPart: Routing.CharacteristicList, stockWrapType: Routing.WrapApplicationType, wrapValue: Expression) -> Routing.OverstockApplication:
        ...
    def ConvertOverstockApplication(self, startControlPoint: Routing.ControlPoint, segments: typing.List[Routing.ISegment], stocks: typing.List[Routing.Stock], overstockPart: Routing.CharacteristicList, reqOptCharxList: Routing.CharacteristicList, wrapValue: Expression, overstocks: typing.List[Routing.Overstock]) -> Routing.OverstockApplication:
        ...
    def ConvertOverstockApplication(self, startControlPoint: Routing.ControlPoint, segments: typing.List[Routing.ISegment], stocks: typing.List[Routing.Stock], startOffset: Expression, endOffset: Expression, pieceLength: Expression, gap: Expression, numberOfPieces: Expression, startPoint: Point, overstockPart: Routing.CharacteristicList, reqOptCharxList: Routing.CharacteristicList, wrapValue: Expression, overstocks: typing.List[Routing.Overstock]) -> Routing.OverstockApplication:
        ...
    def ConvertOverstockApplication(self, startControlPoint: Routing.ControlPoint, segments: typing.List[Routing.ISegment], stocks: typing.List[Routing.Stock], startPoint: Point, endPoint: Point, overstockPart: Routing.CharacteristicList, reqOptCharxList: Routing.CharacteristicList, wrapValue: Expression, overstocks: typing.List[Routing.Overstock]) -> Routing.OverstockApplication:
        ...
    def ConvertOverstockApplication(self, startControlPoint: Routing.ControlPoint, segments: typing.List[Routing.ISegment], stocks: typing.List[Routing.Stock], definingPoint: Point, definingDirection: Routing.PointDefinition, pieceLength: Expression, overstockPart: Routing.CharacteristicList, reqOptCharxList: Routing.CharacteristicList, wrapValue: Expression, overstocks: typing.List[Routing.Overstock]) -> Routing.OverstockApplication:
        ...
    def ReplaceOverstockApplication(self, charxMap: Routing.CharacteristicList, overstock: Routing.Overstock) -> None:
        ...
    def Tag(self) -> Tag: ...



class OverstockApplication(NXObject):
    def __init__(self) -> None: ...
    def GetSegments(self) -> typing.List[Routing.ISegment]:
        ...
    def GetCrossSections(self) -> typing.List[Curve]:
        ...
    def GetCoveredStocks(self) -> typing.List[Routing.Stock]:
        ...
    def SetCoveredStocks(self, coveredStocks: typing.List[Routing.Stock]) -> None:
        ...
    def GetOverstocks(self) -> typing.List[Routing.Overstock]:
        ...
    Definition: Routing.Method
    EndPointOfOverstock: Point
    MidPointOfOverstock: Point
    StartOfPath: Routing.ControlPoint
    StartPointOfOverstock: Point


class Overstock(Routing.Stock):
    def __init__(self) -> None: ...
    def GetOverstockSegments(self) -> typing.List[Curve]:
        ...
    def GetOverstockType(self) -> Routing.Type:
        ...
    def GetOverstockCreationMethod(self) -> Routing.CreationMethod:
        ...
    def GetNumberOfWraps(self) -> Scalar:
        ...
    def GetPercentageOverlap(self) -> Scalar:
        ...
    def GetGapDistance(self) -> Scalar:
        ...
    def GetWidth(self) -> Scalar:
        ...
    def GetThickness(self) -> Scalar:
        ...
    def GetCoveredStocks(self) -> typing.List[Routing.Stock]:
        ...


class Operation(enum.Enum):
    Create = 0
    Edit = 1


class OffsetPathCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.OffsetPath]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateCircularOffsetPath(self, segments: typing.List[Routing.ISegment], allStock: bool, specStocks: typing.List[Routing.Stock], maintainStock: bool, copyBendCorners: bool, maintain: Routing.OffsetPathCollection.BendType, useMinimumBendRatio: bool, minimumBendRatio: float, minimumBendRadius: float, deleteAllDuplicates: bool, createAssociativePaths: bool, patternXVector: Vector3d, patternYVector: Vector3d, patternAxisEndPoint: Point3d, patternStartAngle: float, radialOffset: float, nPaths: int, totalAngle: float, slavePathsCreated: typing.List[Routing.OffsetPath]) -> Routing.OffsetPath:
        ...
    def CreateRectangularOffsetPath(self, segments: typing.List[Routing.ISegment], allStock: bool, specStocks: typing.List[Routing.Stock], maintainStock: bool, copyBendCorners: bool, maintain: Routing.OffsetPathCollection.BendType, useMinimumBendRatio: bool, minimumBendRatio: float, minimumBendRadius: float, deleteAllDuplicates: bool, createAssociativePaths: bool, patternXVector: Vector3d, patternYVector: Vector3d, patternAxisEndPoint: Point3d, patternStartAngle: float, rowOffset: float, columnOffset: float, nRows: int, nColumns: int, masterRow: int, masterColumn: int, slavePathsCreated: typing.List[Routing.OffsetPath]) -> Routing.OffsetPath:
        ...
    def ConvertOffsetPaths(self, masterOffsetPath: Routing.OffsetPath) -> None:
        ...
    def Tag(self) -> Tag: ...



    class BendType(enum.Enum):
        MaintainRadius = 0
        MaintainCenter = 1
        MaximumBendTypes = 2
    

class OffsetPath(NXObject):
    def __init__(self) -> None: ...
    def GetOffsetPathSegments(self) -> typing.List[Routing.ISegment]:
        ...
    def SetOffsetPathSegments(self, segments: typing.List[Routing.ISegment]) -> None:
        ...
    def GetOffsetReferenceAxes(self, orgin: Point3d, xVector: Vector3d, yVector: Vector3d) -> None:
        ...
    def SetOffsetReferenceAxes(self, orgin: Point3d, xVector: Vector3d, yVector: Vector3d) -> None:
        ...
    def GetOffsetPaths(self) -> typing.List[Routing.IPath]:
        ...
    def GetMasterPath(self) -> Routing.IPath:
        ...
    def SetMasterPath(self, masterPath: Routing.IPath) -> None:
        ...
    def RemovePathAssociativityToImmediateChildren(self) -> None:
        ...
    def RemovePathAssociativityFromParent(self) -> None:
        ...
    def GetSegmentList(self) -> typing.List[Routing.ISegment]:
        ...
    def AddSegmentsToList(self, objs: typing.List[Routing.ISegment]) -> None:
        ...
    def DelSegmentsFromList(self, objs: typing.List[Routing.ISegment]) -> None:
        ...
    BendRadius: float
    BendRatio: float
    CopyCornerFlag: bool
    IsMaster: bool
    IsSlave: bool
    MaintainStockFlag: bool
    OffsetVector: Vector3d
    UseBendRatio: bool
    ControlPointEnd: Routing.ControlPoint
    ControlPointStart: Routing.ControlPoint


class ObjectRelationship(Routing.RootObject):
    def __init__(self) -> None: ...


class NamingPatternBuilder(Builder):
    def __init__(self) -> None: ...
    EndString: str
    PatternType: Routing.NamingPatternBuilder.PatternTypes
    Prefix: str
    StartString: str
    Suffix: str


    class PatternTypes(enum.Enum):
        Number = 0
        UpperChar = 1
        LowerChar = 2
    

class NamespaceDoc(System.Object):
    def __init__(self) -> None: ...


class MultiPortCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.MultiPort]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateMultiPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float) -> Routing.MultiPort:
        ...
    def CreateMultiPort(self, origin: Point3d, alignmentVector: Vector3d) -> Routing.MultiPort:
        ...
    def CreateMultiPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, point: Point) -> Routing.MultiPort:
        ...
    def CreateMultiPort(self, origin: Point3d, alignmentVector: Vector3d, point: Point) -> Routing.MultiPort:
        ...
    def CreateMultiPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, axis: Axis) -> Routing.MultiPort:
        ...
    def CreateMultiPort(self, origin: Point3d, alignmentVector: Vector3d, derivationObject: Axis) -> Routing.MultiPort:
        ...
    def CreateMultiPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, allowMultipleConnections: bool) -> Routing.MultiPort:
        ...
    def CreateMultiPort(self, origin: Point3d, alignmentVector: Vector3d, allowMultipleConnections: bool) -> Routing.MultiPort:
        ...
    def CreateMultiPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, point: Point, allowMultipleConnections: bool) -> Routing.MultiPort:
        ...
    def CreateMultiPort(self, origin: Point3d, alignmentVector: Vector3d, point: Point, allowMultipleConnections: bool) -> Routing.MultiPort:
        ...
    def CreateMultiPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, axis: Axis, allowMultipleConnections: bool) -> Routing.MultiPort:
        ...
    def CreateMultiPort(self, origin: Point3d, alignmentVector: Vector3d, derivationObject: Axis, allowMultipleConnections: bool) -> Routing.MultiPort:
        ...
    def Tag(self) -> Tag: ...



class MultiPort(Routing.Port):
    def __init__(self) -> None: ...
    def GetTerminalPorts(self) -> typing.List[Routing.TerminalPort]:
        ...
    def GetVirtualPorts(self) -> str:
        ...
    def SetVirtualPorts(self, virtualPorts: str) -> None:
        ...
    def RemoveVirtualPorts(self, virtualPorts: str) -> None:
        ...
    def AddVirtualPorts(self, virtualPorts: str) -> None:
        ...
    def RemoveTerminalPorts(self, terminalPorts: typing.List[Routing.TerminalPort]) -> None:
        ...
    def AddTerminalPorts(self, terminalPorts: typing.List[Routing.TerminalPort]) -> None:
        ...
    def SetAlignVector(self, vector: Vector3d) -> None:
        ...
    def SetRotationVector(self, vector: Vector3d) -> None:
        ...
    def SetRotationObject(self, rotationObject: DisplayableObject) -> None:
        ...
    def SetForwardExtension(self, forwardExtension: float) -> None:
        ...
    def SetEngagement(self, engagement: float) -> None:
        ...
    def SetCutbackLength(self, cutbackLength: float) -> None:
        ...
    Axis: Axis
    CutbackLengthObject: Expression
    EngagementObject: Expression
    ForwardExtensionObject: Expression


class ModelTerminalsBuilder(Builder):
    def __init__(self) -> None: ...
    def Model(self) -> None:
        ...
    def UnModel(self) -> None:
        ...
    def ModelAll(self) -> None:
        ...
    def UnModelAll(self) -> None:
        ...
    CutbackOption: Routing.ModelTerminalsBuilder.CutBackLocationOption
    ExtensionOption: Routing.ModelTerminalsBuilder.ExtensionValueOption
    List: TaggedObjectList
    MultiPort: NXObject
    PortSelection: Routing.SelectPort
    PreviewToggle: bool


    class ExtensionValueOption(enum.Enum):
        FromCharacteristic = 0
        UniformValue = 1
        IndividualExtensions = 2
    

    class CutBackLocationOption(enum.Enum):
        FromCharacteristic = 0
        UniformValue = 1
        IndividualCutbacks = 2
    

class MiteredBendCornerCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.MiteredBendCorner]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateCorner(self, rcp: Routing.ControlPoint, bendRadius: float, numberOfMiters: int) -> Routing.MiteredBendCorner:
        ...
    def GetBendAssociatedToSegment(self, segment: Routing.ISegment) -> Routing.BendCorner:
        ...
    def Tag(self) -> Tag: ...



class MiteredBendCorner(Routing.Corner):
    def __init__(self) -> None: ...
    def GetSegment(self) -> Routing.ISegment:
        ...
    def FindSideSegments(self) -> typing.List[Curve]:
        ...
    BendRadius: float
    NumberOfMiters: int


class MiterCornerCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.MiterCorner]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def AssignCorner(self, rcp: Routing.ControlPoint) -> Routing.MiterCorner:
        ...
    def GetMitersAssociatedToStock(self, stock: Routing.Stock) -> typing.List[Routing.MiterCorner]:
        ...
    def Tag(self) -> Tag: ...



class MiterCorner(Routing.Corner):
    def __init__(self) -> None: ...
    def GetSegments(self) -> typing.List[Routing.ISegment]:
        ...


class Method(enum.Enum):
    EntireSegments = 0
    Interval = 1
    PointToPoint = 2
    PointAndLength = 3


class MergeStocksBuilder(Builder):
    def __init__(self) -> None: ...
    CandidateStockCollector: Routing.RouteObjectCollector
    TargetStockCollector: Routing.RouteObjectCollector


class ManualRouteBuilder(Builder):
    def __init__(self) -> None: ...
    def CyclePaths(self) -> None:
        ...
    def GetFilterPaths(self) -> typing.List[Routing.Path]:
        ...
    def SetFilterPaths(self, filterPaths: typing.List[Routing.Path]) -> None:
        ...
    def GetPaths(self) -> typing.List[Routing.Path]:
        ...
    def UpdateFilterPaths(self, point: Point) -> bool:
        ...
    def FindPathsFromMultiplePoints(self, points: typing.List[Point], foundPath: bool) -> typing.List[Routing.Path]:
        ...
    def GetHighlightPath(self) -> Routing.Path:
        ...
    def SetHighlightPath(self, path: Routing.Path) -> None:
        ...
    def CreateValidPointsOnPaths(self, pointLocs: typing.List[Point3d], validPoints: typing.List[Point]) -> typing.List[Routing.Path]:
        ...
    PointList: PointList


class LogicalTerminal(Routing.RouteObject):
    def __init__(self) -> None: ...
    def GetPorts(self) -> typing.List[Routing.Port]:
        ...
    def AddPort(self, port: Routing.Port) -> None:
        ...
    def RemovePort(self, port: Routing.Port) -> None:
        ...
    def ClearAllPorts(self) -> None:
        ...
    def GetParentConnector(self) -> Routing.SingleDevice:
        ...
    InterfaceTerminalShadow: Routing.InterfaceTerminalShadow
    Port: Routing.Port


class LogicalConnection(Routing.ConnectivityDefinition):
    def __init__(self) -> None: ...
    def GetFromTerminals(self) -> typing.List[Routing.LogicalTerminal]:
        ...
    def GetToTerminals(self) -> typing.List[Routing.LogicalTerminal]:
        ...
    def ReplaceFromTerminals(self, fromTerminals: typing.List[Routing.LogicalTerminal]) -> None:
        ...
    def ReplaceToTerminals(self, toTerminals: typing.List[Routing.LogicalTerminal]) -> None:
        ...
    def AddFromTerminal(self, fromTerminal: Routing.LogicalTerminal) -> bool:
        ...
    def RemoveFromTerminal(self, fromTerminal: Routing.LogicalTerminal) -> bool:
        ...
    def AddToTerminal(self, toTerminal: Routing.LogicalTerminal) -> bool:
        ...
    def RemoveToTerminal(self, toTerminal: Routing.LogicalTerminal) -> bool:
        ...


class LineSegmentCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.LineSegment]:
        ...
    def __init__(self, owner: Routing.SegmentManager) -> None: ...
    def __init__(self) -> None: ...
    def Tag(self) -> Tag: ...



class LineSegment(Line):
    def __init__(self) -> None: ...
    def LockLength(self) -> Positioning.Constraint:
        ...
    def UnlockLength(self) -> None:
        ...
    def IsLengthLocked(self) -> bool:
        ...
    def LockAngle(self, object: NXObject, logicalConsOnly: bool) -> Positioning.Constraint:
        ...
    def UnlockAngle(self, object: NXObject) -> None:
        ...
    def IsAngleLocked(self, object: NXObject) -> bool:
        ...
    def GetGuid(self) -> str:
        """[Obsolete("Deprecated in NX2007.0.0.  Use NXOpen.Routing.ISegment.Guid instead.")"""
        ...
    def GenerateNewSegmentGuid(self) -> None:
        """[Obsolete("Deprecated in NX2007.0.0.  Use NXOpen.Routing.ISegment.GenerateNewGuid instead.")"""
        ...
    def GetEndRcps(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint) -> None:
        ...
    def SetEndRcps(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint) -> None:
        ...
    def GetEndPoints(self, startPoint: Point3d, endPoint: Point3d) -> None:
        ...
    def SetEndPoints(self, startPoint: Point3d, endPoint: Point3d) -> None:
        ...
    def GetIsTerminalSegment(self) -> Routing.Terminal:
        ...
    def SetIsTerminalSegment(self, isTerminal: Routing.Terminal) -> None:
        ...
    def GetIsSegmentInterior(self) -> Routing.Interior:
        ...
    def SetSegmentInteriorPart(self, interiorPart: Assemblies.Component) -> None:
        ...
    def GetSegmentStock(self) -> typing.List[Routing.Stock]:
        ...
    def GetSegmentAllStocks(self) -> typing.List[Routing.Stock]:
        ...
    def GetCablewaysLayoutViews(self) -> typing.List[Routing.Electrical.CablewaysLayoutView]:
        ...
    def GetCableDevices(self) -> typing.List[Routing.Electrical.CableDevice]:
        ...
    def GetIsEccentricSegment(self) -> Routing.Eccentric:
        ...
    def ConvertLinearToEccentricLinear(self) -> Routing.ConvertLinearToEccentricLinear:
        ...
    def ConvertEccentricLinearToLinear(self) -> Routing.ConvertEccentricLinearToLinear:
        ...
    def GenerateNewGuid(self) -> None:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...
    FollowCurve: Curve
    Guid: str
    Length: float


class LinearPathSettings(Builder):
    def __init__(self) -> None: ...
    AllowCutElbow: bool
    AssignDefaultCorner: bool
    AssignDefaultElbow: bool
    LockAngle: bool
    LockLength: bool
    LockToSelectedObject: bool


class LinearPathBuilder(Builder):
    def __init__(self) -> None: ...
    def AddPreviewControlPoint(self, location: Point3d) -> Routing.ControlPoint:
        ...
    def SetControlPointDefiningPoint(self, previewRcp: Routing.ControlPoint, point: Point) -> None:
        ...
    def SetControlPointDefiningObject(self, previewRcp: Routing.ControlPoint, position: Point3d, object: NXObject) -> None:
        ...
    def RemoveLastNonPreviewControlPoint(self) -> None:
        ...
    def SettingChanged(self) -> None:
        ...
    def GetLastControlPoint(self) -> Routing.ControlPoint:
        ...
    def SetIsNewControlPointRequired(self, isNewControlPointRequired: bool) -> None:
        ...
    def SetIsEccentricModeSelected(self, isEccentricModeSelected: bool) -> None:
        ...
    def GetParentSegmentOfEccentricSegment(self) -> Routing.ISegment:
        ...
    def SetParentSegmentOfEccentricSegment(self, parentSegment: Routing.ISegment) -> None:
        ...
    ElbowSnapSettings: Routing.ElbowSnapSettings
    LinearPathSettings: Routing.LinearPathSettings
    PathStockBuilder: Routing.PathStockBuilder


class ItemDefinition(Routing.RouteObject):
    def __init__(self) -> None: ...
    DefiningNxObject: Part


class ISegmentCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.ISegment]:
        ...
    def __init__(self, owner: Routing.SegmentManager) -> None: ...
    def __init__(self) -> None: ...
    def Tag(self) -> Tag: ...



class ISegment():
    def GetEndRcps(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint) -> None:
        ...
    def SetEndRcps(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint) -> None:
        ...
    def GetEndPoints(self, startPoint: Point3d, endPoint: Point3d) -> None:
        ...
    def SetEndPoints(self, startPoint: Point3d, endPoint: Point3d) -> None:
        ...
    def GetIsTerminalSegment(self) -> Routing.Terminal:
        ...
    def SetIsTerminalSegment(self, isTerminal: Routing.Terminal) -> None:
        ...
    def GetIsSegmentInterior(self) -> Routing.Interior:
        ...
    def SetSegmentInteriorPart(self, interiorPart: Assemblies.Component) -> None:
        ...
    def GetSegmentStock(self) -> typing.List[Routing.Stock]:
        ...
    def GetSegmentAllStocks(self) -> typing.List[Routing.Stock]:
        ...
    def GetCablewaysLayoutViews(self) -> typing.List[Routing.Electrical.CablewaysLayoutView]:
        ...
    def GetCableDevices(self) -> typing.List[Routing.Electrical.CableDevice]:
        ...
    def GetIsEccentricSegment(self) -> Routing.Eccentric:
        ...
    def ConvertLinearToEccentricLinear(self) -> Routing.ConvertLinearToEccentricLinear:
        ...
    def ConvertEccentricLinearToLinear(self) -> Routing.ConvertEccentricLinearToLinear:
        ...
    def GenerateNewGuid(self) -> None:
        ...
    FollowCurve: Curve
    Guid: str
    Length: float


class IRoutePosition():
    Point: Point
    Position: Point3d


class IPath():
    def GetSegmentList(self) -> typing.List[Routing.ISegment]:
        ...
    def AddSegmentsToList(self, objs: typing.List[Routing.ISegment]) -> None:
        ...
    def DelSegmentsFromList(self, objs: typing.List[Routing.ISegment]) -> None:
        ...
    ControlPointEnd: Routing.ControlPoint
    ControlPointStart: Routing.ControlPoint


class Interior(enum.Enum):
    NotInteriorToPart = 0
    InteriorToPart = 1


class InterfaceTerminalShadow(Routing.InterfaceTerminalBase):
    def __init__(self) -> None: ...


class InterfaceTerminalRelationshipShadow(Routing.InterfaceTerminalRelationshipBase):
    def __init__(self) -> None: ...


class InterfaceTerminalRelationshipCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.InterfaceTerminalRelationshipShadow]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateElectricalInterfaceTerminalRelationship(self) -> Routing.InterfaceTerminalRelationshipShadow:
        ...
    def CreateElectricalInterfaceTerminalRelationship(self, guid: str) -> Routing.InterfaceTerminalRelationshipShadow:
        ...
    def CreateMechanicalInterfaceTerminalRelationship(self) -> Routing.InterfaceTerminalRelationshipShadow:
        ...
    def CreateMechanicalInterfaceTerminalRelationship(self, guid: str) -> Routing.InterfaceTerminalRelationshipShadow:
        ...
    def Tag(self) -> Tag: ...



class InterfaceTerminalRelationshipBase(Routing.ObjectRelationship):
    def __init__(self) -> None: ...
    def GetRelatingInterfaceTerminal(self) -> Routing.InterfaceTerminalShadow:
        ...
    def SetRelatingInterfaceTerminal(self, relatingInterfaceTerminal: Routing.InterfaceTerminalShadow) -> None:
        ...
    def GetRelatedInterfaceTerminals(self) -> typing.List[Routing.InterfaceTerminalShadow]:
        ...
    def AddRelatedInterfaceTerminal(self, relatedInterfaceTerminal: Routing.InterfaceTerminalShadow) -> None:
        ...
    def RemoveRelatedInterfaceTerminal(self, relatedInterfaceTerminal: Routing.InterfaceTerminalShadow) -> None:
        ...
    def ReplaceRelatedInterfaceTerminals(self, relatedInterfaceTerminals: typing.List[Routing.InterfaceTerminalShadow]) -> None:
        ...
    RelationshipType: Routing.InterfaceTerminalRelationshipBase.RelationType


    class RelationType(enum.Enum):
        Decomposition = 0
    

class InterfaceTerminalBase(Routing.RouteObject):
    def __init__(self) -> None: ...
    def GetPorts(self) -> typing.List[Routing.Port]:
        ...
    Port: Routing.Port


class IntegrateRunsBuilder(Builder):
    def __init__(self) -> None: ...
    def ModifyItemsButton(self, objects: typing.List[NXObject], buttonType: Routing.IntegrateRunsBuilder.Button) -> None:
        ...
    FirstRun: SelectNXObject
    RunAttributes: Routing.IntegrateRunsBuilder.Enum
    RunName: str
    SecondRun: SelectNXObject


    class Enum(enum.Enum):
        FirstRun = 0
        SecondRun = 1
    

    class Button(enum.Enum):
        FromItems = 0
        ToItems = 1
        MemberItems = 2
        Unknown = -1
    

class InstanceNameLookupBuilder(Builder):
    def __init__(self) -> None: ...
    InstanceNameCombo: str


class InfoObjectsBuilder(Builder):
    def __init__(self) -> None: ...
    ObjectCollector: Routing.RouteObjectCollector


class ICharacteristic():
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...


class IAxisPort():
    def SetAlignVector(self, vector: Vector3d) -> None:
        ...
    def SetRotationVector(self, vector: Vector3d) -> None:
        ...
    def SetRotationObject(self, rotationObject: DisplayableObject) -> None:
        ...
    def SetForwardExtension(self, forwardExtension: float) -> None:
        ...
    def SetEngagement(self, engagement: float) -> None:
        ...
    def SetCutbackLength(self, cutbackLength: float) -> None:
        ...
    Axis: Axis
    CutbackLengthObject: Expression
    EngagementObject: Expression
    ForwardExtensionObject: Expression


class HealPath(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def GetStartPoint(self) -> Point3d:
        ...
    def SetStartPoint(self, startPoint: Point3d) -> None:
        ...
    def GetEndPoint(self) -> Point3d:
        ...
    def SetEndPoint(self, endPoint: Point3d) -> None:
        ...
    def GetStartVector(self) -> Vector3d:
        ...
    def SetStartVector(self, startVector: Vector3d) -> None:
        ...
    def GetEndVector(self) -> Vector3d:
        ...
    def SetEndVector(self, endVector: Vector3d) -> None:
        ...
    def GetStartParms(self) -> float:
        ...
    def SetStartParms(self, startParms: float) -> None:
        ...
    def GetEndParms(self) -> float:
        ...
    def SetEndParms(self, endParms: float) -> None:
        ...
    def GetStartExtension(self) -> float:
        ...
    def SetStartExtension(self, startExtension: float) -> None:
        ...
    def GetEndExtension(self) -> float:
        ...
    def SetEndExtension(self, endExtension: float) -> None:
        ...
    def SetReverseStart(self, reverse: bool) -> None:
        ...
    def SetReverseEnd(self, reverse: bool) -> None:
        ...
    def GetHealMethod(self) -> Routing.HealMethod:
        ...
    def SetHealMethod(self, healMethod: Routing.HealMethod) -> None:
        ...
    def GetSplineOptions(self) -> Routing.SplineOptions:
        ...
    def SetSplineOptions(self, splineOptions: Routing.SplineOptions) -> None:
        ...
    def GetAllData(self, startPoint: Point3d, endPoint: Point3d, startVector: Vector3d, endVector: Vector3d, startParms: float, endParms: float, startExtension: float, endExtension: float, reverseStart: bool, reverseEnd: bool, healMethod: Routing.HealMethod, splineOptions: Routing.SplineOptions) -> None:
        ...
    def SetAllData(self, startPoint: Point3d, endPoint: Point3d, startVector: Vector3d, endVector: Vector3d, startParm: float, endParm: float, startExtension: float, endExtension: float, reverseStart: bool, reverseEnd: bool, healMethod: Routing.HealMethod, splineOptions: Routing.SplineOptions) -> None:
        ...
    def FreeResource(self) -> None:
        ...
    ReverseEnd: bool
    ReverseStart: bool


class HealMethod(enum.Enum):
    Direct = 0
    Intersect = 1
    Xyz = 2
    Xzy = 3
    Yxz = 4
    Yzx = 5
    Zxy = 6
    Zyx = 7
    Max = 8


class HandrailBuilder(Builder):
    def __init__(self) -> None: ...
    def SetHandrailPartCharx(self, partCharx: Routing.CharacteristicList) -> None:
        ...
    def PlaceHandrail(self, postLocation: Point3d) -> None:
        ...
    def ReverseLastPost(self) -> None:
        ...
    AutoCloseOption: bool
    HasHorizontalRails: bool
    PostType: Routing.HandrailBuilder.PostTypes


    class PostTypes(enum.Enum):
        Start = 0
        Intermediate = 1
        None = 2
        End = 3
    

class GapDisplayBuilder(Builder):
    def __init__(self) -> None: ...
    def CreateBuilder(self, selLine: Line, crossLine: Line, gapWidth: float, gapStartPoint: Point3d, gapEndPoint: Point3d, bridgeOverGap: bool, arcOrientation: bool) -> None:
        ...
    def SetBuilderData(self, selLine: Line, crossLine: Line, gapWidth: float, gapStartPoint: Point3d, gapEndPoint: Point3d, bridgeOverGap: bool, arcOrientation: bool) -> None:
        ...


class GapArcSegment(Arc):
    def __init__(self) -> None: ...
    def GetEndRcps(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint) -> None:
        ...
    def SetEndRcps(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint) -> None:
        ...
    def GetEndPoints(self, startPoint: Point3d, endPoint: Point3d) -> None:
        ...
    def SetEndPoints(self, startPoint: Point3d, endPoint: Point3d) -> None:
        ...
    def GetIsTerminalSegment(self) -> Routing.Terminal:
        ...
    def SetIsTerminalSegment(self, isTerminal: Routing.Terminal) -> None:
        ...
    def GetIsSegmentInterior(self) -> Routing.Interior:
        ...
    def SetSegmentInteriorPart(self, interiorPart: Assemblies.Component) -> None:
        ...
    def GetSegmentStock(self) -> typing.List[Routing.Stock]:
        ...
    def GetSegmentAllStocks(self) -> typing.List[Routing.Stock]:
        ...
    def GetCablewaysLayoutViews(self) -> typing.List[Routing.Electrical.CablewaysLayoutView]:
        ...
    def GetCableDevices(self) -> typing.List[Routing.Electrical.CableDevice]:
        ...
    def GetIsEccentricSegment(self) -> Routing.Eccentric:
        ...
    def ConvertLinearToEccentricLinear(self) -> Routing.ConvertLinearToEccentricLinear:
        ...
    def ConvertEccentricLinearToLinear(self) -> Routing.ConvertEccentricLinearToLinear:
        ...
    def GenerateNewGuid(self) -> None:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...
    IsArcOpensDown: bool
    FollowCurve: Curve
    Guid: str
    Length: float


class FormboardPlacementCoordinateSystemBuilder(Builder):
    def __init__(self) -> None: ...
    QualifyMethod: Routing.FormboardPlacementCoordinateSystemBuilder.Method
    SelectedCSYS: SelectNXObjectList
    SpecifiedCSYS: CoordinateSystem


    class Method(enum.Enum):
        Specify = 0
        Select = 1
    

class Flip(enum.Enum):
    NotFlipped = 0
    Flipped = 1


class FixturePortCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.FixturePort]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateFixturePort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float) -> Routing.FixturePort:
        ...
    def CreateFixturePort(self, origin: Point3d, alignmentVector: Vector3d) -> Routing.FixturePort:
        ...
    def CreateFixturePort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, point: Point) -> Routing.FixturePort:
        ...
    def CreateFixturePort(self, origin: Point3d, alignmentVector: Vector3d, point: Point) -> Routing.FixturePort:
        ...
    def CreateFixturePort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, axis: Axis) -> Routing.FixturePort:
        ...
    def CreateFixturePort(self, origin: Point3d, alignmentVector: Vector3d, derivationObject: Axis) -> Routing.FixturePort:
        ...
    def CreateFixturePort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, allowMultipleConnections: bool) -> Routing.FixturePort:
        ...
    def CreateFixturePort(self, origin: Point3d, alignmentVector: Vector3d, allowMultipleConnections: bool) -> Routing.FixturePort:
        ...
    def CreateFixturePort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, point: Point, allowMultipleConnections: bool) -> Routing.FixturePort:
        ...
    def CreateFixturePort(self, origin: Point3d, alignmentVector: Vector3d, point: Point, allowMultipleConnections: bool) -> Routing.FixturePort:
        ...
    def CreateFixturePort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, axis: Axis, allowMultipleConnections: bool) -> Routing.FixturePort:
        ...
    def CreateFixturePort(self, origin: Point3d, alignmentVector: Vector3d, derivationObject: Axis, allowMultipleConnections: bool) -> Routing.FixturePort:
        ...
    def CreateFromAxis(self, axis: Axis) -> Routing.FixturePort:
        ...
    def CreateFromCsys(self, csys: CartesianCoordinateSystem, createRotationVector: Routing.Port.CreateRotationVector) -> Routing.FixturePort:
        ...
    def Tag(self) -> Tag: ...



class FixturePort(Routing.Port):
    def __init__(self) -> None: ...
    def SetAlignVector(self, vector: Vector3d) -> None:
        ...
    def SetRotationVector(self, vector: Vector3d) -> None:
        ...
    def SetRotationObject(self, rotationObject: DisplayableObject) -> None:
        ...
    def SetForwardExtension(self, forwardExtension: float) -> None:
        ...
    def SetEngagement(self, engagement: float) -> None:
        ...
    def SetCutbackLength(self, cutbackLength: float) -> None:
        ...
    Axis: Axis
    CutbackLengthObject: Expression
    EngagementObject: Expression
    ForwardExtensionObject: Expression


class FittingPortCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.FittingPort]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateFittingPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float) -> Routing.FittingPort:
        ...
    def CreateFittingPort(self, origin: Point3d, alignmentVector: Vector3d) -> Routing.FittingPort:
        ...
    def CreateFittingPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, point: Point) -> Routing.FittingPort:
        ...
    def CreateFittingPort(self, origin: Point3d, alignmentVector: Vector3d, point: Point) -> Routing.FittingPort:
        ...
    def CreateFittingPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, axis: Axis) -> Routing.FittingPort:
        ...
    def CreateFittingPort(self, origin: Point3d, alignmentVector: Vector3d, derivationObject: Axis) -> Routing.FittingPort:
        ...
    def CreateFittingPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, allowMultipleConnections: bool) -> Routing.FittingPort:
        ...
    def CreateFittingPort(self, origin: Point3d, alignmentVector: Vector3d, allowMultipleConnections: bool) -> Routing.FittingPort:
        ...
    def CreateFittingPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, point: Point, allowMultipleConnections: bool) -> Routing.FittingPort:
        ...
    def CreateFittingPort(self, origin: Point3d, alignmentVector: Vector3d, point: Point, allowMultipleConnections: bool) -> Routing.FittingPort:
        ...
    def CreateFittingPort(self, origin: Point3d, alignmentVector: Vector3d, rotationVector: Vector3d, rotationObject: DisplayableObject, clockAngle: float, axis: Axis, allowMultipleConnections: bool) -> Routing.FittingPort:
        ...
    def CreateFittingPort(self, origin: Point3d, alignmentVector: Vector3d, derivationObject: Axis, allowMultipleConnections: bool) -> Routing.FittingPort:
        ...
    def CreateFromAxis(self, axis: Axis) -> Routing.FittingPort:
        ...
    def CreateFromCsys(self, csys: CartesianCoordinateSystem, createRotationVector: Routing.Port.CreateRotationVector) -> Routing.FittingPort:
        ...
    def Tag(self) -> Tag: ...



class FittingPort(Routing.Port):
    def __init__(self) -> None: ...
    def SetAlignVector(self, vector: Vector3d) -> None:
        ...
    def SetRotationVector(self, vector: Vector3d) -> None:
        ...
    def SetRotationObject(self, rotationObject: DisplayableObject) -> None:
        ...
    def SetForwardExtension(self, forwardExtension: float) -> None:
        ...
    def SetEngagement(self, engagement: float) -> None:
        ...
    def SetCutbackLength(self, cutbackLength: float) -> None:
        ...
    Axis: Axis
    CutbackLengthObject: Expression
    EngagementObject: Expression
    ForwardExtensionObject: Expression


class FittingOverstockCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.FittingOverstock]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def Tag(self) -> Tag: ...



class FittingOverstockBuilder(Builder):
    def __init__(self) -> None: ...
    FaceTrimMethod: Routing.FittingOverstockBuilder.TrimMethod
    Faces: SelectFaceList
    FirstPlane: Plane
    OverstockSettings: Routing.PathStockBuilder
    RoutingParts: Assemblies.SelectComponentList
    SecondPlane: Plane
    Type: Routing.FittingOverstockBuilder.Types


    class Types(enum.Enum):
        EntirePart = 0
        EntireFace = 1
        PartialFace = 2
    

    class TrimMethod(enum.Enum):
        TrimPlane = 0
        BetweenPlanes = 1
    

class FittingOverstock(NXObject):
    def __init__(self) -> None: ...
    def GetStockData(self) -> Routing.StockData:
        ...
    def RenameFittingOverstockComponent(self, partName: str) -> None:
        ...
    def GetComponent(self) -> Assemblies.Component:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...


class FindByAttributesBuilder(Builder):
    def __init__(self) -> None: ...
    def AttributeMembersBuilder(self) -> Routing.AttributeMembersBuilder:
        ...
    def HighlightRunNavItems(self, objects: typing.List[NXObject], highLight: bool) -> None:
        ...
    AttribList: TaggedObjectList
    AttributeName: str
    AttributeValue: str


class FillerStockBuilder(Builder):
    def __init__(self) -> None: ...
    RemoveExistingStock: bool
    RouteSelection: Routing.RouteObjectCollector
    StockSettings: Routing.PathStockBuilder


class FillerCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Filler]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateStock(self, stockData: Routing.StockData, anchor: Routing.Anchor, crossSection: Routing.CrossSection, segments: typing.List[Routing.ISegment]) -> typing.List[Routing.Stock]:
        ...
    def Tag(self) -> Tag: ...



class Filler(Routing.Stock):
    def __init__(self) -> None: ...


class FeaturePort(Features.Feature):
    def __init__(self) -> None: ...


class ExtractPort(Routing.Port):
    def __init__(self) -> None: ...
    def GetStockOffsetPoint(self) -> Point:
        ...
    def GetPrototypePort(self) -> Routing.Port:
        ...


class EndFormBuilder(Builder):
    def __init__(self) -> None: ...
    def CreateRouteControlPointListItem(self) -> Routing.RouteObjectCollector:
        ...
    def SpecifyEndForm(self, jaCharx: Routing.CharacteristicList) -> None:
        ...
    def PlaceEndForm(self) -> None:
        ...
    def EditEndForm(self) -> None:
        ...
    def RemoveEndForm(self) -> None:
        ...
    RouteControlPointList: Routing.RouteObjectCollectorList
    RouteObjectCollector: Routing.RouteObjectCollector


class ElbowSnapSettings(Builder):
    def __init__(self) -> None: ...
    AngleTolerance: float
    SnapToElbowAngles: bool


class EditPlacePartBuilder(Builder):
    def __init__(self) -> None: ...
    def FinalizePlacementForScrewSeat(self, startPointId: TaggedObject, endPointId: TaggedObject, alignStartPoint: Point3d, alignEndPoint: Point3d, length: Expression, angle: Expression, alignVector: Vector3d, screwSeatInstance: TaggedObject, target: TaggedObject) -> None:
        ...
    def GetScrewSeatLength(self) -> Expression:
        ...
    def GetScrewSeatAngle(self) -> Expression:
        ...
    SelectedPart: SelectTaggedObjectList


class EditLineSegmentBuilder(Builder):
    def __init__(self) -> None: ...
    def GetOrientation(self, startPoint: Point3d, direction: Vector3d) -> bool:
        ...
    def InitializeFromLine(self, line: Routing.LineSegment) -> None:
        ...
    def DragLineLength(self) -> None:
        ...
    def ModifiedLineLength(self) -> None:
        ...
    def StopDrag(self) -> None:
        ...
    def RestartDrag(self) -> None:
        ...
    def GetActiveRcpPositon(self) -> Point3d:
        ...
    def DetachActiveRcp(self) -> None:
        ...
    def AddLineToSetOfAllEditedSegments(self) -> None:
        ...
    ConvertEccentricSegment: bool
    Length: Expression
    LineSelection: Routing.SelectLineSegment
    LockLength: bool
    ReverseDirection: bool


class EditCharacteristicsBuilder(Builder):
    def __init__(self) -> None: ...
    def ResetValues(self) -> None:
        ...
    def ClearValues(self) -> None:
        ...
    def ApplyReferenceObjectCharx(self, refObject: NXObject) -> None:
        ...
    def GetRequiredCharacteristicsToEdit(self) -> Routing.CharacteristicList:
        ...
    def GetOptionalCharacteristicsToEdit(self) -> Routing.CharacteristicList:
        ...
    ReferenceObject: SelectNXObject
    RouteObjectCollector: Routing.RouteObjectCollector
    RoutingLevel: str


class EditBendAngleBuilder(Builder):
    def __init__(self) -> None: ...
    def SetRCP(self, bendRcp: TaggedObject) -> None:
        ...
    def UpdateAngle(self, angle: float) -> None:
        ...
    def SetMoveAttachedFlag(self, moveAttached: bool) -> None:
        ...
    def SwapAnchorSegment(self) -> None:
        ...
    def GetSelectedBendData(self, anchorSegDir: Vector3d, rcpPos: Point3d, planeNormal: Vector3d) -> float:
        ...
    def CommitCurrentEdit(self) -> None:
        ...


class Eccentric(enum.Enum):
    NotEccentricSeg = 0
    EccentricSeg = 1


class DuctSizeCalculatorBuilder(Builder):
    def __init__(self) -> None: ...
    DuctAreaExp: Expression
    DuctAspectRatioExp: Expression
    DuctDiameterExp: Expression
    DuctEqvalentDiameterExp: Expression
    DuctHeightExp: Expression
    DuctShape: Routing.DuctSizeCalculatorBuilder.DuctShapeType
    DuctWidthExp: Expression
    IsCreateSpaceReservationEnabled: bool
    IsDisplayFlowParamsEnabled: bool
    RouteObjectCollector: Routing.RouteObjectCollector
    VelocityExp: Expression
    VolumeFlowRateExp: Expression


    class DuctShapeType(enum.Enum):
        Rectangular = 0
        Circular = 1
        FlatOval = 2
    

class DuctReinforcementBuilder(Builder):
    def __init__(self) -> None: ...
    def UpdatePathCurve(self) -> None:
        ...
    IntervalExpression: Expression
    MinimumClearance: GeometricUtilities.OnPathDimensionBuilder
    NumberOfPairs: int
    ParallelReinforcement: Routing.PathStockBuilder
    ParentDuct: Routing.SelectStock
    PathCurve: Curve
    PerpendicularReinforcement: Routing.PathStockBuilder
    ReinforcementType: Routing.DuctReinforcementBuilder.ReinforcementTypes
    SpacingExpression: Expression


    class ReinforcementTypes(enum.Enum):
        None = 0
        Inside = 1
        Outside = 2
    

class DuctReinforcement(Features.BodyFeature):
    def __init__(self) -> None: ...


class DivisionsBuilder(Builder):
    def __init__(self) -> None: ...
    def CreateDivisions(self) -> Routing.Division:
        ...
    def GetDivision(self) -> Routing.Division:
        ...
    LeftChildFlow: Expression
    RightChildFlow: Expression
    SelectedPort: SelectNXObject
    SplitDirection: Routing.DivisionsBuilder.SplitDirectionType


    class SplitDirectionType(enum.Enum):
        SplitVertically = 0
        SplitHorizontally = 1
    

class Division(NXObject):
    def __init__(self) -> None: ...
    def CreateSplitterCurve(self) -> None:
        ...
    def UpdateFlow(self, leftChildFlow: float, rightChildFlow: float, isAbsoluteFlow: bool) -> None:
        ...
    def DeleteAllChildren(self) -> None:
        ...
    SplitDirection: Routing.Division.SplitDirectionType


    class SplitDirectionType(enum.Enum):
        SplitVertically = 0
        SplitHorizontally = 1
    

class DiscontinuityCornerCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.DiscontinuityCorner]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def Create(self, rcp: Routing.ControlPoint, firstSegment: Routing.ISegment, secondSegment: Routing.ISegment) -> Routing.DiscontinuityCorner:
        ...
    def GetDiscontinuityCorners(self, rcp: Routing.ControlPoint) -> typing.List[Routing.DiscontinuityCorner]:
        ...
    def AreSegmentsDisconnected(self, segment1: Routing.SplineSegment, segment2: Routing.SplineSegment, rcp: Routing.ControlPoint) -> bool:
        ...
    def Tag(self) -> Tag: ...



class DiscontinuityCorner(Routing.Corner):
    def __init__(self) -> None: ...
    def Remove(self) -> None:
        ...
    FirstSegment: Routing.ISegment
    SecondSegment: Routing.ISegment


class DeviceRelationship(Routing.ObjectRelationship):
    def __init__(self) -> None: ...
    def GetRelatingSingleDevice(self) -> Routing.SingleDevice:
        ...
    def SetRelatingSingleDevice(self, relatingDevice: Routing.SingleDevice) -> None:
        ...
    def GetRelatedSingleDevices(self) -> typing.List[Routing.SingleDevice]:
        ...
    def AddRelatedSingleDevice(self, relatedDevice: Routing.SingleDevice) -> None:
        ...
    def RemoveRelatedSingleDevice(self, relatedDevice: Routing.SingleDevice) -> None:
        ...
    def ReplaceRelatedSingleDevices(self, relatedDevices: typing.List[Routing.SingleDevice]) -> None:
        ...
    RelationshipType: Routing.DeviceRelationship.RelationType


    class RelationType(enum.Enum):
        AssociatedEquipment = 0
    

class DesignRuleViolationViewer(Builder):
    def __init__(self) -> None: ...
    def GetOverrideText(self) -> str:
        ...
    def SetOverrideText(self, overrideText: str) -> None:
        ...
    DialogViolationId: int
    FilterOptionValue: Routing.DesignRuleViolationViewer.FilterOption
    NavigateViolationLocationOption: bool
    OverrideOptionValue: Routing.DesignRuleViolationViewer.OverrideOption
    Username: str


    class OverrideOption(enum.Enum):
        Yes = 0
        No = 1
    

    class FilterOption(enum.Enum):
        AllViolations = 0
        SkipOverrides = 1
        OverridesOnly = 2
    

class DesignRuleViolationLocationCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.DesignRuleViolationLocation]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateDesignRuleViolationLocation(self, deleteLocationObjects: Routing.DesignRuleViolationLocationCollection.DeleteOption, locationObjects: typing.List[NXObject]) -> Routing.DesignRuleViolationLocation:
        ...
    def Tag(self) -> Tag: ...



    class DeleteOption(enum.Enum):
        DoDelete = 0
        DontDelete = 1
    

class DesignRuleViolationLocation(NXObject):
    def __init__(self) -> None: ...
    def GetLocationObjects(self) -> typing.List[NXObject]:
        ...
    def SetLocationObjects(self, locationObjects: typing.List[NXObject]) -> None:
        ...
    DeleteLocationObjects: Routing.DesignRuleViolationLocationCollection.DeleteOption


class DesignRuleViolationCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.DesignRuleViolation]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateDesignRuleViolation(self, shortDescription: str, longDescription: str, objects: typing.List[NXObject]) -> Routing.DesignRuleViolation:
        """[Obsolete("Deprecated in NX11.0.0.  Use Routing.DesignRule.CreateViolation instead.")"""
        ...
    def ReasonExecuteRule(self, mode: Routing.DesignRuleViolationCollection.Mode, reason: Routing.DesignRuleViolationCollection.Reason, objs: typing.List[NXObject]) -> typing.List[Routing.DesignRuleViolation]:
        ...
    def Tag(self) -> Tag: ...



    class Reason(enum.Enum):
        Unknown = 0
        CreatePath = 1
        HealPath = 2
        AssignCorner = 3
        AssignStock = 4
        RemoveStock = 5
        StockStyle = 6
        PlacePart = 7
        CreateFab = 8
        QualifyPart = 9
        MovePath = 10
        CopyPath = 11
        DeletePath = 12
        SubdivideSeg = 13
        SimplifyPath = 14
        RemovePart = 15
        MovePart = 16
        EditCharx = 17
        Interactive = 18
        Batch = 19
        OrientStock = 20
        UnifyPath = 21
        TransformPath = 22
        OffsetPath = 23
        AutoRoutePin = 24
        ManualRoutePin = 25
        AutoRouteComp = 26
        ManualRouteComp = 27
        Import = 28
        PartialAutoRouteComp = 29
        EditPlacePart = 30
        BulkReplacement = 31
    

    class Mode(enum.Enum):
        Concurrent = 0
        Interactive = 1
        Batch = 2
    

class DesignRuleViolation(NXObject):
    def __init__(self) -> None: ...
    def GetObjects(self) -> typing.List[NXObject]:
        ...
    def SetObjects(self, objects: typing.List[NXObject]) -> None:
        ...
    def AddObjects(self, objects: typing.List[Routing.DesignRuleViolation]) -> None:
        ...
    def SetViolationOverride(self, user: str, reason: str, timestamp: int) -> None:
        ...
    def RemoveViolationOverride(self) -> None:
        ...
    def IsRuleOverridden(self) -> bool:
        ...
    def DeleteRuleOverride(self, deleteObject: Routing.DesignRuleOverride) -> None:
        ...
    def SetLocations(self, violationLocations: typing.List[Routing.DesignRuleViolationLocation]) -> None:
        ...
    def GetLocations(self) -> typing.List[Routing.DesignRuleViolationLocation]:
        ...
    def AddViolationLocations(self, locationObjects: typing.List[Routing.DesignRuleViolationLocation]) -> None:
        ...
    def BlankLocationObjectsOfViolation(self, blankOption: Routing.DesignRuleViolation.BlankOption) -> None:
        ...
    def GetViolationLocation(self, arrayPosition: int) -> Routing.DesignRuleViolationLocation:
        """[Obsolete("Deprecated in NX8.0.3.  Use NXOpen.Routing.DesignRuleViolation.GetLocations instead.")"""
        ...
    def SetViolationLocation(self, arrayPosition: int, locationObject: Routing.DesignRuleViolationLocation) -> None:
        """[Obsolete("Deprecated in NX8.0.3.  Use NXOpen.Routing.DesignRuleViolation.AddViolationLocations instead.")"""
        ...
    def GetOwningDesignRule(self) -> Routing.DesignRule:
        ...
    LongDescription: str
    Override: Routing.DesignRuleOverride
    ShortDescription: str
    TimeStamp: int


    class BlankOption(enum.Enum):
        Blank = 0
        Unblank = 1
    

class DesignRuleOverride(NXObject):
    def __init__(self) -> None: ...
    def GetViolation(self) -> Routing.DesignRuleViolation:
        ...
    Reason: str
    TimeStamp: int
    User: str


class DesignRuleManager(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def LogConcurrent(self, objectToLog: NXObject) -> None:
        ...
    def UnlogConcurrent(self, objectToUnlog: NXObject) -> None:
        ...
    def GetConcurrentObjects(self, objects: typing.List[NXObject]) -> None:
        ...
    def ExpandConcurrent(self) -> None:
        ...
    def ClearConcurrent(self) -> None:
        ...
    def GetObjectViolations(self, nxObject: NXObject) -> typing.List[Routing.DesignRuleViolation]:
        ...
    def Tag(self) -> Tag: ...



class DesignRuleCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.DesignRule]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def Tag(self) -> Tag: ...



class DesignRule(NXObject):
    def __init__(self) -> None: ...
    def GetViolations(self) -> typing.List[Routing.DesignRuleViolation]:
        ...
    def AddViolations(self, violations: typing.List[Routing.DesignRuleViolation]) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use Routing.DesignRule.CreateViolation instead.")"""
        ...
    def CreateViolation(self, shortDescription: str, longDescription: str, objects: typing.List[NXObject]) -> Routing.DesignRuleViolation:
        ...
    def ClearViolationOnObject(self, objectToCheck: NXObject) -> None:
        ...
    Application: str
    Description: str
    Drname: str


class DeleteObjectsBuilder(Builder):
    def __init__(self) -> None: ...
    ObjectCollector: Routing.RouteObjectCollector


class DeleteGapsBuilder(Builder):
    def __init__(self) -> None: ...
    ObjectCollector: Routing.RouteObjectCollector


class DeleteFontsBuilder(Builder):
    def __init__(self) -> None: ...
    ObjectCollector: Routing.RouteObjectCollector


class DefiningPoint(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def IsConstrained(self) -> bool:
        ...
    def FreeResource(self) -> None:
        ...
    BackwardExtension: float
    Direction: Vector3d
    ForwardExtension: float
    Position: Point3d


class DefineRunBuilder(Builder):
    def __init__(self) -> None: ...
    def UnifyPath(self) -> None:
        ...
    def CreateRunItemsBuilder(self) -> Routing.RunItemsBuilder:
        ...
    def AddMemberItems(self, memberItem: TaggedObject) -> None:
        ...
    def RemoveMemberItems(self, memberItems: typing.List[TaggedObject]) -> None:
        ...
    FromItemsList: Routing.RunItemsBuilderList
    MemberItems: Routing.RouteObjectCollector
    RunIdentifier: str
    RunType: str
    SpecificationOption: str
    ToItemsList: Routing.RunItemsBuilderList


class CustomManager(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def AddCallback(self, reason: Routing.CustomManager.CallbackReason, callbackMethod: Routing.CustomManager.Callback) -> int:
        ...
    def RemoveCallback(self, callbackMethodId: int) -> None:
        ...
    def RemoveAllCallbacksForReason(self, reason: Routing.CustomManager.CallbackReason) -> None:
        ...
    def RemoveAllCallbacks(self) -> None:
        ...
    def GetCallbacksRegisteredForReason(self, reason: Routing.CustomManager.CallbackReason, registeredCallbackIds: int) -> None:
        ...
    def AddDesignRule(self, reason: Routing.CustomManager.DesignRuleReason, name: str, description: str, designRuleMethod: Routing.CustomManager.DesignRule) -> int:
        ...
    def RemoveDesignRule(self, designRuleMethodId: int) -> None:
        ...
    def RemoveAllDesignRulesForReason(self, reason: Routing.CustomManager.DesignRuleReason) -> None:
        ...
    def RemoveAllDesignRules(self) -> None:
        ...
    def GetDesignRulesRegisteredForReason(self, reason: Routing.CustomManager.DesignRuleReason, registeredDesignRuleIds: int) -> None:
        ...
    def GetViolationsForReason(self, reason: Routing.CustomManager.DesignRuleReason) -> typing.List[Routing.DesignRuleViolation]:
        ...
    def GetViolationsOfRule(self, designRuleName: str) -> typing.List[Routing.DesignRuleViolation]:
        ...
    def CreateViolationForReason(self, designRuleName: str, reason: Routing.CustomManager.DesignRuleReason, shortDescription: str, longDescription: str, objects: typing.List[NXObject]) -> Routing.DesignRuleViolation:
        ...
    def DeleteViolationsOnObjectForReason(self, reason: Routing.CustomManager.DesignRuleReason, nxObject: NXObject) -> None:
        ...
    def DeleteViolationsOfRuleOnObject(self, designRuleName: str, nxObject: NXObject) -> None:
        ...
    def RemoveAllPlugins(self) -> None:
        ...
    def SetHrnPreImportPlugin(self, hrnPreImportPlugin: Routing.CustomManager.ImportExportPlugin) -> None:
        ...
    def RemoveHrnPreImportPlugin(self) -> None:
        ...
    def SetHrnPostExportPlugin(self, hrnPostExportPlugin: Routing.CustomManager.ImportExportPlugin) -> None:
        ...
    def RemoveHrnPostExportPlugin(self) -> None:
        ...
    def SetCmpPreImportPlugin(self, cmpPreImportPlugin: Routing.CustomManager.ImportExportPlugin) -> None:
        ...
    def RemoveCmpPreImportPlugin(self) -> None:
        ...
    def SetCmpPostExportPlugin(self, cmpPostExportPlugin: Routing.CustomManager.ImportExportPlugin) -> None:
        ...
    def RemoveCmpPostExportPlugin(self) -> None:
        ...
    def SetPlmXmlPreImportPlugin(self, plmXmlPreImportPlugin: Routing.CustomManager.ImportExportPlugin) -> None:
        ...
    def RemovePlmXmlPreImportPlugin(self) -> None:
        ...
    def SetPlmXmlPostExportPlugin(self, plmXmlPostExportPlugin: Routing.CustomManager.ImportExportPlugin) -> None:
        ...
    def RemovePlmXmlPostExportPlugin(self) -> None:
        ...
    def SetPlmXmlRouteNodeNamePlugin(self, plmXmlRouteNodeNamePlugin: Routing.CustomManager.PlmxmlObjectNamePlugin) -> None:
        ...
    def RemovePlmXmlRouteNodeNamePlugin(self) -> None:
        ...
    def SetPlmXmlRouteSectionNamePlugin(self, plmXmlRouteSectionNamePlugin: Routing.CustomManager.PlmxmlObjectNamePlugin) -> None:
        ...
    def RemovePlmXmlRouteSectionNamePlugin(self) -> None:
        ...
    def SetWrappedOverstockLengthCalculationPlugin(self, lengthCalculationPlugin: Routing.CustomManager.WrappedOverstockLengthCalculationPlugin) -> None:
        ...
    def RemoveWrappedOverstockLengthCalculationPlugin(self) -> None:
        ...
    def SetFilterBlankingPlugin(self, filterBlankingPlugin: Routing.CustomManager.FilterBlankingPlugin) -> None:
        ...
    def RemoveFilterBlankingPlugin(self) -> None:
        ...
    def SetBomPlugin(self, bomPlugin: Routing.CustomManager.BomPlugin) -> None:
        ...
    def RemoveBomPlugin(self) -> None:
        ...
    def SetAutoRoutePlugin(self, autoRoutePlugin: Routing.CustomManager.AutoroutePlugin) -> None:
        ...
    def RemoveAutoRoutePlugin(self) -> None:
        ...
    def SetManualRoutePlugin(self, manualRoutePlugin: Routing.CustomManager.AutoroutePlugin) -> None:
        ...
    def RemoveManualRoutePlugin(self) -> None:
        ...
    def SetUnroutePlugin(self, unroutePlugin: Routing.CustomManager.AutoroutePlugin) -> None:
        ...
    def RemoveUnroutePlugin(self) -> None:
        ...
    def SetSortConnectionsPlugin(self, sortConnectionsPlugin: Routing.CustomManager.SortConnectionsPlugin) -> None:
        ...
    def RemoveSortConnectionsPlugin(self) -> None:
        ...
    def SetNavigatorObjectSelectedPlugin(self, navigatorObjectSelectedPlugin: Routing.CustomManager.NavigatorObjectSelectedPlugin) -> None:
        ...
    def RemoveNavigatorObjectSelectedPlugin(self) -> None:
        ...
    def SetBundlePlugin(self, bundlePlugin: Routing.CustomManager.BundlePlugin) -> None:
        ...
    def RemoveBundlePlugin(self) -> None:
        ...
    def SetValidateFormboardPlugin(self, validateFormboardPlugin: Routing.CustomManager.ValidateFormboardPlugin) -> None:
        ...
    def RemoveValidateFormboardPlugin(self) -> None:
        ...
    def SetStockComponentLockedPlugin(self, stockComponentLockedPlugin: Routing.CustomManager.StockComponentLockedPlugin) -> None:
        ...
    def RemoveStockComponentLockedPlugin(self) -> None:
        ...
    def SetUnifyPathPlugin(self, unifyPathPlugin: Routing.CustomManager.UnifyPathPlugin) -> None:
        ...
    def RemoveUnifyPathPlugin(self) -> None:
        ...
    def SetPipingComponentFilePlugin(self, pipingComponentFilePlugin: Routing.CustomManager.PipingComponentFilePlugin) -> None:
        ...
    def RemovePipingComponentFilePlugin(self) -> None:
        ...
    def SetDuctSizeCalculatorCreateStockPlugin(self, createStockPlugin: Routing.CustomManager.DuctSizeCalculatorCreateStockPlugin) -> None:
        ...
    def RemoveDuctSizeCalculatorCreateStockPlugin(self) -> None:
        ...
    def SetDuctSizeCalculatorDisplayNotePlugin(self, displayNotePlugin: Routing.CustomManager.DuctSizeCalculatorDisplayNotePlugin) -> None:
        ...
    def RemoveDuctSizeCalculatorDisplayNotePlugin(self) -> None:
        ...
    def SetDisciplineChangedPlugin(self, disciplineChangedPlugin: Routing.CustomManager.DisciplineChangedPlugin) -> None:
        ...
    def RemoveDisciplineChangedPlugin(self) -> None:
        ...
    def SetSpecificationChangedPlugin(self, specificationChangedPlugin: Routing.CustomManager.SpecificationChangedPlugin) -> None:
        ...
    def RemoveSpecificationChangedPlugin(self) -> None:
        ...
    def SetChoosePartPlugin(self, choosePartPlugin: Routing.CustomManager.ChoosePartPlugin) -> None:
        ...
    def RemoveChoosePartPlugin(self) -> None:
        ...
    def SetStockComponentNamePlugin(self, stockComponentNamePlugin: Routing.CustomManager.ComponentNamePlugin) -> None:
        ...
    def RemoveStockComponentNamePlugin(self) -> None:
        ...
    def SetTemporaryStockComponentNamePlugin(self, stockComponentNamePlugin: Routing.CustomManager.ComponentNamePlugin) -> None:
        ...
    def RemoveTemporaryStockComponentNamePlugin(self) -> None:
        ...
    def SetCutElbowComponentNamePlugin(self, cutElbowComponentNamePlugin: Routing.CustomManager.ComponentNamePlugin) -> None:
        ...
    def RemoveCutElbowComponentNamePlugin(self) -> None:
        ...
    def SetGenerateStockComponentNamePlugin(self, generateStockComponentNamePlugin: Routing.CustomManager.GenerateStockComponentNameplugin) -> None:
        ...
    def RemoveGenerateStockComponentNamePlugin(self) -> None:
        ...
    def SetGeneratePLMXMLFileNamePluginForBulkExport(self, partName: Routing.CustomManager.GeneratePLMXMLFileNamePluginForBulkExport) -> None:
        ...
    def RemoveGeneratePLMXMLFileNamePluginForBulkExport(self) -> None:
        ...
    def Tag(self) -> Tag: ...



    

    

    

    

    

    

    class SelectionType(enum.Enum):
        Deselected = 0
        Selected = 1
    

    

    

    class PipingComponentFileOptions(enum.Enum):
        AskToOverwriteFile = 0
        NeverOverwriteFile = 1
        AlwaysOverwriteFile = 2
    

    class NavigatorType(enum.Enum):
        Component = 0
        Connection = 1
    

    

    

    

    

    

    class DuctSizeCalculatorDuctShape(enum.Enum):
        Rectangular = 0
        Circular = 1
        FlatOval = 2
    

    

    class DuctSizeCalculatorDisplayNoteFlag(enum.Enum):
        AddNote = 0
        RemoveNote = 1
    

    

    

    class DesignRuleReason(enum.Enum):
        Unknown = -1
        CreatePath = 0
        HealPath = 1
        AssignCorner = 2
        AssignStock = 3
        RemoveStock = 4
        StockStyle = 5
        PlacePart = 6
        CreateFabrication = 7
        QualifyPart = 8
        MovePath = 9
        CopyPath = 10
        DeletePath = 11
        SubdivideSegment = 12
        SimplifyPath = 13
        RemovePart = 14
        MovePart = 15
        EditCharacteristic = 16
        Interactive = 17
        Batch = 18
        OrientStock = 19
        UnifyPath = 20
        TransformPath = 21
        OffsetPath = 22
        AutoRoutePinLevel = 23
        ManualRoutePinLevel = 24
        AutoRouteComponentLevel = 25
        ManualRouteComponentLevel = 26
        Import = 27
        SpaceReservation = 28
        PartialAutoRoute = 29
        PartialManualRoute = 30
        WindCatcher = 31
        CreatePlatform = 32
        EditPlacePart = 33
        BulkReplacement = 34
        ReparentParts = 35
        CablewayValidation = 36
        Count = 37
    

    

    

    

    class CallbackReason(enum.Enum):
        Unknown = -1
        PlacePart = 0
        MovePart = 1
        RemovePart = 2
        MovePath = 3
        CopyPath = 4
        DeletePath = 5
        TransformPath = 6
        OffsetPath = 7
        AssignStock = 8
        WireRouteManual = 9
        WireRouteAuto = 10
        WireCompManual = 11
        WireCompAuto = 12
        WireUnroute = 13
        WireUncomp = 14
        WireTerminals = 15
        ChoosePart = 16
        CreateConnection = 17
        EditConnection = 18
        UnassignStock = 19
        CreateRun = 20
        RunPreDelete = 21
        ReplaceStock = 22
        CreatePortConnection = 23
        WireCompProxy = 24
        ReplacePart = 25
        BrokenConnection = 26
        EditReplacePart = 27
        AttrDiscrepancy = 28
        AttributeCopyReplacePart = 29
        Count = 30
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

class CrossSectionCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.CrossSection]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateCrossSection(self, crossCurves: typing.List[Curve], offset: Expression, secondOffset: Expression, style: Routing.StockStyle) -> Routing.CrossSection:
        ...
    def Tag(self) -> Tag: ...



class CrossSectionBuilder(Builder):
    def __init__(self) -> None: ...
    CurveSelection: SelectNXObjectList
    Offset01: Expression
    Offset02: Expression
    SpecifyOffset: bool
    StockStyle: Routing.StockStyle


class CrossSection(NXObject):
    def __init__(self) -> None: ...
    def GetCrossCurves(self) -> typing.List[Curve]:
        ...
    def SetCrossCurves(self, curves: typing.List[Curve]) -> None:
        ...
    def GetStockData(self) -> Routing.StockData:
        ...
    def GetMaximumRadius(self) -> float:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...
    Offset: Expression
    SecondOffset: Expression
    Style: Routing.StockStyle


class CreationMethod(enum.Enum):
    Unknown = -1
    EntireSegments = 0
    Interval = 1
    PointToPoint = 2
    PointAndLength = 3


class CreateFabricationBuilder(Builder):
    def __init__(self) -> None: ...
    RouteSelectionStock: Routing.RouteObjectCollector


class CornerTypeBuilder(TaggedObject):
    def __init__(self) -> None: ...
    def RouteCornerSpecifyElbow(self) -> None:
        ...
    def RouteCornerAlternateSolution(self) -> None:
        ...
    def RouteCornerBendRadiusInfo(self) -> None:
        ...
    def GetElbowPart(self) -> Routing.CharacteristicList:
        ...
    def SetElbowPart(self, elbowPart: Routing.CharacteristicList) -> None:
        ...
    def GetElbowAppliedCharx(self) -> Routing.CharacteristicList:
        ...
    def SetElbowAppliedCharx(self, elbowPart: Routing.CharacteristicList) -> None:
        ...
    def Validate(self) -> bool:
        ...
    RouteCornerBendMethods: Routing.CornerTypeBuilder.BendMethods
    RouteCornerNumberOfMiters: int
    RouteCornerRadius: Expression
    RouteCornerRatioToAttribute: Expression
    RouteCornerRatioToAttributeName: str
    RouteCornerRatioToDiameter: Expression
    RouteCornerRequireLinearSolution: bool
    RouteCornerTypeOptions: Routing.CornerTypeBuilder.Type


    class Type(enum.Enum):
        None = 0
        Miter = 1
        Bend = 2
        SBend = 3
        SElbow = 4
        UBend = 5
        UElbow = 6
        Cope = 7
        MiteredBend = 8
    

    class BendMethods(enum.Enum):
        Radius = 0
        RatioToDiameter = 1
        BendRadiusTable = 2
        InnerRadius = 3
        RatioToAttribute = 4
    

class CornerCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Corner]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def GetRcpCornerInfo(self, rcp: Routing.ControlPoint, cornerType: Routing.Corner.Type) -> Routing.Corner:
        ...
    def Tag(self) -> Tag: ...



class Corner(NXObject):
    def __init__(self) -> None: ...
    def GetStocks(self) -> typing.List[Routing.Stock]:
        ...
    Rcp: Routing.ControlPoint


    class Type(enum.Enum):
        Bend = 0
        Miter = 1
        Cope = 2
        Discontinuity = 3
        None = 4
    

class CopeCornerCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.CopeCorner]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def AssignCopeCorner(self, rcp: Routing.ControlPoint, copeStocks: typing.List[Routing.Stock]) -> Routing.CopeCorner:
        ...
    def Tag(self) -> Tag: ...



class CopeCorner(Routing.Corner):
    def __init__(self) -> None: ...
    def GetFeatures(self) -> typing.List[Features.Feature]:
        ...
    def GetStockCopeFeature(self, stock: Routing.Stock) -> Features.Feature:
        ...
    def SetCopeStocks(self, copeStocks: typing.List[Routing.Stock]) -> None:
        ...
    def GetCopeStocks(self) -> typing.List[Routing.Stock]:
        ...


class ConvertLinearToEccentricLinear(enum.Enum):
    NotConverted = 0
    Converted = 1


class ConvertEccentricLinearToLinear(enum.Enum):
    NotConverted = 0
    Converted = 1


class ControlPointCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.ControlPoint]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def FindControlPoint(self, position: Point3d, tolerance: float) -> Routing.ControlPoint:
        ...
    def CreateControlPoint(self, position: Point3d, checkExisting: Routing.ControlPointCollection.CheckExisting, foundExisting: Routing.ControlPointCollection.FoundExisting) -> Routing.ControlPoint:
        ...
    def CreateControlPoint(self, port: Routing.Port, checkExisting: Routing.ControlPointCollection.CheckExisting, foundExisting: Routing.ControlPointCollection.FoundExisting) -> Routing.ControlPoint:
        ...
    def CreateControlPoint(self, object: TaggedObject, objectParm: float, checkExisting: Routing.ControlPointCollection.CheckExisting, foundExisting: Routing.ControlPointCollection.FoundExisting) -> Routing.ControlPoint:
        ...
    def CreateControlPoint(self, point: Point, checkExisting: Routing.ControlPointCollection.CheckExisting, foundExisting: Routing.ControlPointCollection.FoundExisting) -> Routing.ControlPoint:
        ...
    def CreateControlPoint(self, conic: IBaseCurve, checkExisting: Routing.ControlPointCollection.CheckExisting, foundExisting: Routing.ControlPointCollection.FoundExisting) -> Routing.ControlPoint:
        ...
    def CreateControlPoint(self, startObject: Routing.IRoutePosition, offset: Vector3d, checkExisting: Routing.ControlPointCollection.CheckExisting, foundExisting: Routing.ControlPointCollection.FoundExisting) -> Routing.ControlPoint:
        ...
    def CreateControlPoint(self, cpOcc: Routing.ControlPoint, checkExisting: Routing.ControlPointCollection.CheckExisting, foundExisting: Routing.ControlPointCollection.FoundExisting) -> Routing.ControlPoint:
        ...
    def Tag(self) -> Tag: ...



    class FoundExisting(enum.Enum):
        BrandNew = 0
        Existing = 1
    

    class CheckExisting(enum.Enum):
        DontSearch = 0
        Search = 1
    

class ControlPoint(SmartObject):
    def __init__(self) -> None: ...
    def GetIsUserDefined(self) -> Routing.ControlPoint.DefinedStatus:
        ...
    def GetRcpSegments(self) -> typing.List[Routing.ISegment]:
        ...
    def RemoveCorner(self) -> None:
        ...
    def AssignDefaultElbow(self) -> Assemblies.Component:
        ...
    def LockToObject(self, object: NXObject) -> Positioning.Constraint:
        ...
    def UnlockFromObject(self, object: NXObject) -> None:
        ...
    def IsLockedToObject(self, object: NXObject) -> bool:
        ...
    def GetDefiningObject(self) -> NXObject:
        ...
    def GenerateNewGuid(self) -> None:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...
    Guid: str
    Point: Point
    Position: Point3d


    class DefinedStatus(enum.Enum):
        System = 0
        User = 1
    

class ConnectPathBuilder(Builder):
    def __init__(self) -> None: ...
    Selection: SelectNXObjectList
    Tolerance: float


class ConnectivityDefinition(Routing.RouteObject):
    def __init__(self) -> None: ...
    ImplementedBy: Routing.RouteObject


class ConnectedCurvesBuilder(Builder):
    def __init__(self) -> None: ...
    def ChainSelectedCurves(self) -> typing.List[Curve]:
        ...
    AllowArcs: bool
    AllowLines: bool
    AllowOccs: bool
    AllowSplines: bool
    CurveSelection: SelectCurveList


class ComponentNamePluginData(TaggedObject):
    def __init__(self) -> None: ...
    ComponentName: str
    ManagedModeFolderName: str
    ManagedModeItemName: str
    ManagedModeItemRevision: str
    ManagedModeItemType: str
    NativeFileName: str
    NativePath: str
    RenameComponentPartFlag: bool
    TemplateObject: NXObject


class ComponentName(enum.Enum):
    Temporary = 0
    Permanent = 1


class CompareRunsBuilder(Builder):
    def __init__(self) -> None: ...
    CompareTypesEnum: Routing.CompareRunsBuilder.CompareTypes
    FilterString: str
    InputPathString: str
    ReportDiscrepancies: bool


    class CompareTypes(enum.Enum):
        Xml = 0
        Part = 1
    

class ClockPartBuilder(Builder):
    def __init__(self) -> None: ...
    def StartDrag(self) -> None:
        ...
    def DragByTransform(self, translation: Vector3d, rotation: Matrix3x3) -> None:
        ...
    def StopDrag(self) -> None:
        ...
    def SuppressPortConstraint(self, portTag: Routing.Port, suppress: bool) -> None:
        ...
    def UpdateRotationAngle(self, angle: float) -> None:
        ...
    def InitializeFromPort(self, port: Routing.Port) -> None:
        ...
    def SetLockRotation(self, lockRotation: bool) -> None:
        ...
    def SetLockEngagement(self, lockEngagement: bool) -> None:
        ...
    PortSelection: SelectNXObject
    RotationAngle: Expression


class ChoosePartPluginData(TaggedObject):
    def __init__(self) -> None: ...
    def SetPartName(self, partName: str) -> None:
        ...
    def SetPartNumber(self, partNumber: str) -> None:
        ...
    def SetMemberName(self, memberName: str) -> None:
        ...
    def SetCharacteristics(self, characteristics: Routing.CharacteristicList) -> None:
        ...


class CharacteristicList(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        ...
    def SetCharacteristic(self, name: str, value: str, type: NXObject.AttributeType) -> None:
        ...
    def GetCharacteristicTitlesByType(self, type: NXObject.AttributeType) -> typing.List[Routing.CharacteristicList.CharacteristicInformation]:
        ...
    def DeleteCharacteristic(self, name: str, type: NXObject.AttributeType) -> None:
        ...


    class CharacteristicListCharacteristicInformation():
        Type: NXObject.AttributeType
        Name: str
        def ToString(self) -> str:
            ...
        def __init__(self, Type: NXObject.AttributeType, Name: str) -> None: ...
    

    class CharacteristicList_CharacteristicInformation():
        type: NXObject.AttributeType
        name: int
    

class CablewayNetworkCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.CablewayNetwork]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateCablewayNetwork(self, curves: typing.List[Curve]) -> Routing.CablewayNetwork:
        ...
    def Tag(self) -> Tag: ...



class CablewayNetworkBuilder(Builder):
    def __init__(self) -> None: ...
    Selectedpath: SelectNXObjectList


class CablewayNetwork(NXObject):
    def __init__(self) -> None: ...
    def GetCurves(self) -> typing.List[Curve]:
        ...
    def SetCurves(self, curves: typing.List[Curve]) -> None:
        ...
    def GetCurveEndPoints(self) -> typing.List[Point]:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...


class BulkReplacementBuilder(Builder):
    def __init__(self) -> None: ...
    def SetReplacementMethodForObject(self, objectTag: NXObject, method: Routing.RoutingBulkReplacementBuilderReplacementMethodType) -> None:
        ...
    def SetReplacementMethodForAllObjects(self, method: Routing.RoutingBulkReplacementBuilderReplacementMethodType) -> None:
        ...
    def GetReplacementMethodForObject(self, objectTag: NXObject) -> Routing.RoutingBulkReplacementBuilderReplacementMethodType:
        ...
    def GetRetainReasonForObject(self, objectTag: NXObject) -> Routing.RoutingBulkReplacementBuilderRetainReasonType:
        ...
    def SetReplacementObjectIdentifierForObject(self, objectTag: NXObject, objectIdentifier: str) -> None:
        ...
    def SetReplacementClassificationObjectForObject(self, objectTag: NXObject, classificationClassId: str, classificationInstanceId: str) -> None:
        ...
    def SetReplacementObjectPartNumberForObject(self, objectTag: NXObject, partNumber: str) -> None:
        ...
    def SetReplacementPartSpecificationForObject(self, objectTag: NXObject, partSpecification: str) -> None:
        ...
    def GetReplacementObjectIdentifierForObject(self, objectTag: NXObject) -> str:
        ...
    def GetReplacementObjectIdentifiersFromSearchResultsForObject(self, objectTag: NXObject) -> str:
        ...
    def SetAttributeForObject(self, objectTag: NXObject, attributeIdType: Routing.RoutingAttributeIdentifierType, attributeId: str, value: str) -> None:
        ...
    def SetAttributeForAllObjects(self, attributeIdType: Routing.RoutingAttributeIdentifierType, attributeId: str, value: str) -> None:
        ...
    def GetAttributeForObject(self, objectTag: NXObject, attributeIdType: Routing.RoutingAttributeIdentifierType, attributeId: str) -> str:
        ...
    def ClearAttributeForObject(self, objectTag: NXObject, attributeIdType: Routing.RoutingAttributeIdentifierType, attributeId: str) -> None:
        ...
    def ClearAttributeForAllObjects(self, attributeIdType: Routing.RoutingAttributeIdentifierType, attributeId: str) -> None:
        ...
    def GetSelectedObjectValuesForAttribute(self, attributeIdType: Routing.RoutingAttributeIdentifierType, attributeId: str) -> str:
        ...
    def GetPartLibraryValuesForAttributeForObject(self, objectTag: NXObject, attributeIdType: Routing.RoutingAttributeIdentifierType, attributeId: str) -> str:
        ...
    def SearchForReplacementForObject(self, objectTag: NXObject) -> None:
        ...
    def SearchForReplacementForObjectOnAttributes(self, objectTag: NXObject, attributeIdTypes: typing.List[Routing.RoutingAttributeIdentifierType], attributeIds: str) -> None:
        ...
    def CopySearchResultsToObject(self, fromObjectTag: NXObject, toObjectTag: NXObject) -> None:
        ...
    def GetValueForAttributeFromReferenceObject(self, attributeIdType: Routing.RoutingAttributeIdentifierType, attributeId: str) -> str:
        ...
    def SetAttributeValueForObjectFromReferenceObject(self, objectTag: NXObject, attributeIdType: Routing.RoutingAttributeIdentifierType, attributeId: str) -> None:
        ...
    def SetPartReferenceSet(self, referenceSetName: str) -> None:
        ...
    def GetPartReferenceSet(self) -> str:
        ...
    def SetPartLayer(self, layer: int) -> None:
        ...
    def GetPartLayer(self) -> int:
        ...
    def SetSequenceOfObjectReplacement(self, objects: typing.List[NXObject]) -> None:
        ...
    ReferenceObject: SelectNXObject
    RouteObjectCollector: Routing.RouteObjectCollector


class BuiltInPathCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.BuiltInPath]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateBuiltInPath(self, curves: typing.List[Curve]) -> Routing.BuiltInPath:
        ...
    def Tag(self) -> Tag: ...



class BuiltInPathBuilder(Builder):
    def __init__(self) -> None: ...
    Selectedpath: SelectNXObjectList


class BuiltInPath(NXObject):
    def __init__(self) -> None: ...
    def GetCurves(self) -> typing.List[Curve]:
        ...
    def SetCurves(self, curves: typing.List[Curve]) -> None:
        ...
    def CreateSegments(self, partOcc: Assemblies.Component) -> typing.List[Curve]:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...


class BranchPathNumberingBuilder(Builder):
    def __init__(self) -> None: ...
    def SetControlPoint(self, controlPoint: Routing.ControlPoint) -> None:
        ...
    def SetControlPointFromSegment(self, controlPoint: Routing.ISegment) -> None:
        ...
    DisplayOnSegments: bool
    FirstBranchID: str
    NextBranchID: str
    Prefix: str
    ReassignOnSegments: bool
    SequenceMethod: Routing.BranchPathNumberingBuilder.Sequence
    StartValueForLowerCase: str
    StartValueForNumbers: str
    StartValueForUpperCase: str
    Suffix: str


    class Sequence(enum.Enum):
        Numbers = 0
        UpperCase = 1
        LowerCase = 2
    

class BendReportManager(Utilities.NXRemotableObject):
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def GetSegmentInformation(self, stock: TaggedObject) -> typing.List[Routing.BendReportManager.SegmentInformation]:
        ...
    def ReverseDirection(self, segmentInformation: typing.List[Routing.BendReportManager.SegmentInformation]) -> typing.List[Routing.BendReportManager.SegmentInformation]:
        ...
    def GetNumberOfBends(self, segmentInformation: typing.List[Routing.BendReportManager.SegmentInformation]) -> int:
        ...
    def GenerateXyzReport(self, segmentInformation: typing.List[Routing.BendReportManager.SegmentInformation], totalLength: float) -> typing.List[Routing.BendReportManager.XyzReport]:
        ...
    def GenerateYbcReport(self, segmentInformation: typing.List[Routing.BendReportManager.SegmentInformation], totalLength: float) -> typing.List[Routing.BendReportManager.YbcReport]:
        ...
    def GenerateMil98Report(self, segmentInformation: typing.List[Routing.BendReportManager.SegmentInformation], totalLength: float) -> typing.List[Routing.BendReportManager.Mil98Report]:
        ...
    def Tag(self) -> Tag: ...



    class BendReportManagerYbcReport():
        Y: float
        B: float
        C: float
        Radius: float
        def ToString(self) -> str:
            ...
    

    class BendReportManagerXyzReport():
        Xc: float
        Yc: float
        Zc: float
        Radius: float
        def ToString(self) -> str:
            ...
    

    class BendReportManagerSegmentInformation():
        Stock: Routing.Stock
        Segment: Curve
        IsStraight: bool
        Length: float
        StartControlPoint: Routing.ControlPoint
        EndControlPoint: Routing.ControlPoint
        BendCorner: Routing.BendCorner
        BendRadius: float
        BendPosition: Point3d
        StartNormal: Vector3d
        EndNormal: Vector3d
        StartControlPointPosition: Point3d
        EndControlPointPosition: Point3d
        def ToString(self) -> str:
            ...
    

    class BendReportManagerMil98Report():
        C: float
        F: float
        E: float
        G: float
        Y: float
        def ToString(self) -> str:
            ...
    

    class BendReportManager_SegmentInformation():
        stock: Tag
        segment: Tag
        isStraight: bool
        length: float
        startControlPoint: Tag
        endControlPoint: Tag
        bendCorner: Tag
        bendRadius: float
        bendPosition: Point3d
        startNormal: Vector3d
        endNormal: Vector3d
        startControlPointPosition: Point3d
        endControlPointPosition: Point3d
    

class BendCornerCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.BendCorner]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateCorner(self, rcp: Routing.ControlPoint, bendMethod: Routing.CornerTypeBuilder.BendMethods, bendRatio: float, bendRadius: float) -> Routing.BendCorner:
        ...
    def CreateCornerFromAttribute(self, rcp: Routing.ControlPoint, bendMethod: Routing.CornerTypeBuilder.BendMethods, bendRatio: float, bendRadius: float, bendRatioToAttribute: float, bendAttributeName: str) -> Routing.BendCorner:
        ...
    def AssignCornerByBendTable(self, rcp: Routing.ControlPoint, bendTable: str) -> Routing.BendCorner:
        ...
    def AssignCornerByBendRatio(self, bendCrn: Routing.ControlPoint, bendRatio: float) -> Routing.BendCorner:
        ...
    def AssignCornerByBendRatioToAttribute(self, bendCrn: Routing.ControlPoint, bendRatioToAttribute: float, bendAttributeName: str) -> Routing.BendCorner:
        ...
    def AssignCornerByBendRadius(self, bendCrn: Routing.ControlPoint, bendRadius: float) -> Routing.BendCorner:
        ...
    def GetBendAssociatedToSegment(self, segment: Routing.ISegment) -> Routing.BendCorner:
        ...
    def GetBendCornersFromObjects(self, objects: typing.List[NXObject]) -> typing.List[Routing.BendCorner]:
        ...
    def Tag(self) -> Tag: ...



    class Type(enum.Enum):
        RadiusRatio = 0
        Table = 1
    

class BendCorner(Routing.Corner):
    def __init__(self) -> None: ...
    def GetSegment(self) -> Routing.ISegment:
        ...
    def FindSideSegments(self) -> typing.List[Curve]:
        ...
    BendAttributeName: str
    BendMethod: Routing.CornerTypeBuilder.BendMethods
    BendRadius: float
    BendRatio: float
    BendRatioToAttribute: float


class AttributeMembersBuilder(Builder):
    def __init__(self) -> None: ...
    AttributeName: str
    AttributeValue: str


class AttributeHolder(NXObject):
    def __init__(self) -> None: ...
    def SetAttributes(self) -> None:
        ...
    def CopyAttributesToObject(self, object: NXObject) -> None:
        """[Obsolete("Deprecated in NX1980.0.0.  Use NXOpen.Routing.AttributeHolder.CopyAttributesToObject2 instead.")"""
        ...
    def CopyAttributesToObject2(self, nxobject: NXObject) -> None:
        ...
    def SetFunctionType(self, functionType: str) -> None:
        ...


class AssignTerminalsItemBuilder(Builder):
    def __init__(self) -> None: ...
    TerminalDirection: Direction
    TerminalName: str
    TerminalOrigin: Point


class AssignTerminalsBuilder(Builder):
    def __init__(self) -> None: ...
    def GenerateSequence(self) -> int:
        ...
    def AddPortArrays(self) -> None:
        ...
    NamingPattern: Routing.NamingPatternBuilder
    TerminalList: TaggedObjectList


class AssignTangencyBuilder(Builder):
    def __init__(self) -> None: ...
    def AssignTangency(self, segments: typing.List[Curve], tangencySide: Routing.AssignTangencyBuilder.TangencySide) -> None:
        ...
    def AssignTangencyAtPort(self, tangencySide: Routing.AssignTangencyBuilder.TangencySide) -> None:
        ...
    def RemoveTangency(self, tangencySide: Routing.AssignTangencyBuilder.TangencySide) -> None:
        ...
    def CreateTangencyGroupBuilder(self) -> Routing.TangencyGroupBuilder:
        ...
    AssignTangencySide: Routing.AssignTangencyBuilder.TangencySide
    SelectedTangencyGroup: Routing.TangencyGroupBuilder


    class TangencySide(enum.Enum):
        Undefined = 0
        Source = 1
        Target = 2
    

class AssignPathBuilder(Builder):
    def __init__(self) -> None: ...
    def AddToScopedObjectSet(self, object: NXObject, runItemType: Routing.RunItem.Type) -> None:
        ...
    RouteObjectCollector: Routing.RouteObjectCollector


class AssignDiscontinuityBuilder(Builder):
    def __init__(self) -> None: ...
    def SegmentPairBuilder(self) -> Routing.SegmentPairBuilder:
        ...
    ComplexPoint: SelectNXObject
    SegPairList: TaggedObjectList
    SegmentPair: SelectNXObjectList
    SimplePoint: Routing.RouteObjectCollector
    Type: Routing.AssignDiscontinuityBuilder.Types


    class Types(enum.Enum):
        Simple = 0
        Complex = 1
    

class AssignCornerBuilder(Builder):
    def __init__(self) -> None: ...
    def SetStockList(self, stockObjects: typing.List[Routing.Stock]) -> None:
        ...
    def GetBendCornerAttributes(self) -> Routing.CharacteristicList:
        ...
    def SetBendCornerAttributes(self, selectedRowAttributesCharxList: Routing.CharacteristicList) -> None:
        ...
    def GetAttributeHolder(self) -> NXObject:
        ...
    RadiusFromBendTable: float
    ReverseValue: int
    RouteAssignCornerCornerBlock: Routing.CornerTypeBuilder
    RouteAssignCornerEndObject: SelectNXObject
    RouteAssignCornerRouteSelection: Routing.RouteObjectCollector
    RouteAssignCornerStartObject: SelectNXObject
    SelectCopeStock: SelectNXObjectList
    UBendSelection: Routing.RouteObjectCollector


class AssemblyDefinition(Routing.ItemDefinition):
    def __init__(self) -> None: ...
    def GetSingleDeviceChildren(self) -> typing.List[Routing.SingleDevice]:
        ...
    def ReplaceSingleDeviceChildren(self, replacementChildren: typing.List[Routing.SingleDevice]) -> None:
        ...
    def AddSingleDeviceChild(self, device: Routing.SingleDevice) -> None:
        ...
    def RemoveSingleDeviceChild(self, device: Routing.SingleDevice) -> None:
        ...
    def IsSingleDeviceChild(self, device: Routing.SingleDevice) -> bool:
        ...
    def GetReferencingDevice(self) -> Routing.SingleDevice:
        ...


class ArcSegmentCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.ArcSegment]:
        ...
    def __init__(self, owner: Routing.SegmentManager) -> None: ...
    def __init__(self) -> None: ...
    def Tag(self) -> Tag: ...



class ArcSegment(Arc):
    def __init__(self) -> None: ...
    def GetGuid(self) -> str:
        """[Obsolete("Deprecated in NX2007.0.0.  Use NXOpen.Routing.ISegment.Guid instead.")"""
        ...
    def GenerateNewSegmentGuid(self) -> None:
        """[Obsolete("Deprecated in NX2007.0.0.  Use NXOpen.Routing.ISegment.GenerateNewGuid instead.")"""
        ...
    def GetCorner(self) -> Routing.Corner:
        ...
    def GetEndRcps(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint) -> None:
        ...
    def SetEndRcps(self, startRcp: Routing.ControlPoint, endRcp: Routing.ControlPoint) -> None:
        ...
    def GetEndPoints(self, startPoint: Point3d, endPoint: Point3d) -> None:
        ...
    def SetEndPoints(self, startPoint: Point3d, endPoint: Point3d) -> None:
        ...
    def GetIsTerminalSegment(self) -> Routing.Terminal:
        ...
    def SetIsTerminalSegment(self, isTerminal: Routing.Terminal) -> None:
        ...
    def GetIsSegmentInterior(self) -> Routing.Interior:
        ...
    def SetSegmentInteriorPart(self, interiorPart: Assemblies.Component) -> None:
        ...
    def GetSegmentStock(self) -> typing.List[Routing.Stock]:
        ...
    def GetSegmentAllStocks(self) -> typing.List[Routing.Stock]:
        ...
    def GetCablewaysLayoutViews(self) -> typing.List[Routing.Electrical.CablewaysLayoutView]:
        ...
    def GetCableDevices(self) -> typing.List[Routing.Electrical.CableDevice]:
        ...
    def GetIsEccentricSegment(self) -> Routing.Eccentric:
        ...
    def ConvertLinearToEccentricLinear(self) -> Routing.ConvertLinearToEccentricLinear:
        ...
    def ConvertEccentricLinearToLinear(self) -> Routing.ConvertEccentricLinearToLinear:
        ...
    def GenerateNewGuid(self) -> None:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...
    FollowCurve: Curve
    Guid: str
    Length: float


class AnchorCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Routing.Anchor]:
        ...
    def __init__(self, owner: Routing.RouteManager) -> None: ...
    def __init__(self) -> None: ...
    def CreateAnchor(self, origin: Point3d) -> Routing.Anchor:
        ...
    def CreateAnchor(self, position: Point3d, point: Point) -> Routing.Anchor:
        ...
    def Tag(self) -> Tag: ...



class AnchorBuilder(Builder):
    def __init__(self) -> None: ...
    AnchorPoint: Point
    StringName: str


class Anchor(SmartObject):
    def __init__(self) -> None: ...
    def GetStock(self) -> typing.List[Routing.Stock]:
        ...
    def GetStockData(self) -> Routing.StockData:
        ...
    def GetCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristics(self, values: Routing.CharacteristicList) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristics2 instead.")"""
        ...
    def GetIntegerCharacteristic(self, name: str) -> int:
        ...
    def SetCharacteristic(self, name: str, value: int) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetRealCharacteristic(self, name: str) -> float:
        ...
    def SetCharacteristic(self, name: str, value: float) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def GetStringCharacteristic(self, name: str) -> str:
        ...
    def SetCharacteristic(self, name: str, value: str) -> None:
        """[Obsolete("Deprecated in NX11.0.0.  Use NXOpen.Routing.ICharacteristic.SetCharacteristic2 instead.")"""
        ...
    def DeleteCharacterstics(self, values: Routing.CharacteristicList) -> None:
        ...
    def GetDestinationCharacteristics(self) -> Routing.CharacteristicList:
        ...
    def SetCharacteristic2(self, title: str, value: int) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: float) -> None:
        ...
    def SetCharacteristic2(self, title: str, value: str) -> None:
        ...
    def SetCharacteristics2(self, values: Routing.CharacteristicList) -> None:
        ...
    Point: Point
    Position: Point3d


class AlignStockBuilder(Builder):
    def __init__(self) -> None: ...
    AlignmentMethod: Routing.AlignStockBuilder.StockAlignmentMethod
    ReferenceObject: Routing.RouteObjectCollector
    ReferenceVector: Direction
    StocksToAlign: Routing.RouteObjectCollector
    TargetVector: Direction


    class StockAlignmentMethod(enum.Enum):
        RoutingObject = 0
        VectorToVector = 1
    

class AdvanceToRsdBuilder(Builder):
    def __init__(self) -> None: ...
    def GetGeneratedNames(self) -> str:
        ...
    def GenerateAndValidateNames(self) -> bool:
        ...
    AdvanceSpaceReservation: bool
    ComponentNamingMethod: Routing.AdvanceToRsdBuilder.NamingMethod
    NamingPattern: Routing.NamingPatternBuilder
    PartToAdvanceSelection: SelectNXObject
    ReportResultToInfowindow: bool


    class NamingMethod(enum.Enum):
        Plugin = 0
        Incremental = 1
    

class AdoptionBuilder(Builder):
    def __init__(self) -> None: ...
    def IsValidPartToAdopt(self) -> int:
        ...
    CollaborativeDesign: CollaborativeDesign
    SelectedPartition: Assemblies.Partition


class AddFontBuilder(Builder):
    def __init__(self) -> None: ...
    def SetBuilderData(self, selLine: Line, lineCoords: float, fontName: str, fontScale: float, fontLayer: int) -> None:
        ...


