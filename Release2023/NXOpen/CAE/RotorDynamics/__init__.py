from ....NXOpen import *
from ...CAE import *
from ..RotorDynamics import *

import typing
import enum

class SuperelementRecovery(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def GetSuperelementRecovery(self, owner: Session) -> CAE.RotorDynamics.SuperelementRecovery:
        ...
    def GetSuperelementsInformation(self, resultSEUseFile: str, samZone: int, sePath: str, seNames: str, sePaths: str, filePresence: int) -> int:
        ...
    def GetSuperelementsInformation2(self, resultSEUseFile: str, samZone: int, sePath: str, seNames: str, sePaths: str, filePresence: int, seNxnIds: int) -> int:
        ...
    def GetReferences(self, resultSEUseFile: str, samZone: int, refList: str, ref2ListFirstColumn: str, ref2ListSecondColumn: str) -> None:
        ...
    def LaunchRecovery(self, resultSEUseFile: str, recoveryDeckFileName: str, seLabel: int, seName: str, sePath: str, zoneValue: float, executableChoice: bool, executableFolderName: str, configVarName: str, firstRow: str, ref1Selected: str, ref2RotationSelected: str, ref2ModeSelected: str) -> None:
        ...
    def LaunchRecovery2(self, resultSEUseFile: str, recoveryDeckFileName: str, seLabel: int, seName: str, sePath: str, zoneValue: float, executableChoice: bool, executableFolderName: str, configVarName: str, firstRow: str, ref1Selected: str, ref2RotationSelected: str, ref2ModeSelected: str, theRequestStress: bool, theRequestEnergy: bool, theAskQualification: bool) -> None:
        ...
    def GetSuperelementsUseFilePath(self, resultSEUseFile: str) -> str:
        ...
    def Tag(self) -> Tag: ...



class RecombineAndMerge(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def GetRecombineAndMerge(self, owner: Session) -> CAE.RotorDynamics.RecombineAndMerge:
        ...
    def Recombine(self, type: str, u18: str, zoneValue: float, executableFolderChoice: bool, executableFolder: str, configVar: str) -> str:
        ...
    def Merge(self, isMergeOnly: bool, u18: str, zoneValue: float, executableFolderChoice: bool, executableFolder: str, configVar: str) -> str:
        """[Obsolete("Deprecated in NX1957.0.0.  Use NXOpen.CAE.RotorDynamics.RecombineAndMerge.CompleteMerge to ensure right parameters transfer between cyclic symmetry recombination and merge.")"""
        ...
    def CompleteMerge(self, isMergeOnly: bool, u18: str, zoneValue: float, executableFolderChoice: bool, executableFolder: str, configVar: str, problemIn: str) -> str:
        ...
    def Recombine2(self, type: str, u18: str, zoneValue: float, executableFolderChoice: bool, executableFolder: str, configVar: str, theAskQualification: bool) -> str:
        ...
    def Merge2(self, isMergeOnly: bool, u18: str, zoneValue: float, executableFolderChoice: bool, executableFolder: str, configVar: str, theAskQualification: bool) -> str:
        ...
    def CompleteMerge2(self, isMergeOnly: bool, u18: str, zoneValue: float, executableFolderChoice: bool, executableFolder: str, configVar: str, problemIn: str, theAskQualification: bool) -> str:
        ...
    def Tag(self) -> Tag: ...



class NamespaceDoc(System.Object):
    def __init__(self) -> None: ...


class Merge(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def GetMerge(self, owner: Session) -> CAE.RotorDynamics.Merge:
        ...
    def CompleteMerge(self, u18Names: str, zoneValue: float, executableFolderChoice: bool, executableFolder: str, configVar: str, outputName: str) -> str:
        ...
    def CompleteMerge2(self, u18Names: str, zoneValue: float, executableFolderChoice: bool, theAskQualification: bool, executableFolder: str, configVar: str, outputName: str) -> str:
        ...
    def Tag(self) -> Tag: ...



class EnergyTables(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def GetEnergyTables(self, owner: Session) -> CAE.RotorDynamics.EnergyTables:
        ...
    def Apply(self, csvFile: str) -> None:
        ...
    def Tag(self) -> Tag: ...



class BearingCoefficientsImport(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def GetBearingCoefficientsImport(self, owner: Session) -> CAE.RotorDynamics.BearingCoefficientsImport:
        ...
    def Apply(self, csvFile: str, bearingType: int, unit: int, errorText: str, warningText: str) -> None:
        ...
    def Tag(self) -> Tag: ...



