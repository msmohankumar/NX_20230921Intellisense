from . import Author
from ....NXOpen import *
from ...CAE import *
from ..AeroStructures import *

import typing
import enum

class UserLoadExtraction(CAE.AeroStructures.LoadExtractionStrategy):
    def __init__(self) -> None: ...
    def GetTargetEntity(self) -> CAE.AeroStructures.UserLoadExtraction.TargetEntity:
        ...
    def SetTargetEntity(self, target: CAE.AeroStructures.UserLoadExtraction.TargetEntity) -> None:
        ...
    def GetPickMethod(self) -> CAE.AeroStructures.UserLoadExtraction.PickMethod:
        ...
    def SetPickMethod(self, pickMethod: CAE.AeroStructures.UserLoadExtraction.PickMethod) -> None:
        ...
    def GetExternalGroup(self) -> CAE.CaeGroup:
        ...
    def SetExternalGroup(self, group: CAE.CaeGroup) -> None:
        ...
    def GetSelectedEntities(self) -> typing.List[TaggedObject]:
        ...
    def SetSelectedEntities(self, entities: typing.List[TaggedObject]) -> None:
        ...
    def GetResultParameters(self) -> CAE.ResultParameters:
        ...
    def SetResultParameters(self, parameters: CAE.ResultParameters) -> None:
        ...
    def GetMatrixManip(self) -> CAE.AeroStructures.MatrixManip:
        ...
    def SetMatrixManip(self, manip: CAE.AeroStructures.MatrixManip) -> None:
        ...
    def GetCoordinateSystem(self) -> CoordinateSystem:
        ...
    def SetCoordinateSystem(self, csys: CoordinateSystem) -> None:
        ...
    def GetExtractionSource(self) -> CAE.AeroStructures.BaseExtractionSource:
        ...
    ExtractionSourceName: str


    class TargetEntity(enum.Enum):
        EntireModel = 0
        Nodes = 1
        Elements = 2
        Points = 3
        Edges = 4
        Faces = 5
        Bodies = 6
        None = 7
    

    class PickMethod(enum.Enum):
        Model = 0
        Group = 1
        ExtractionSource = 2
    

class TrimVariablesManager(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def GetTrimVariablesManager(self, owner: Session) -> CAE.AeroStructures.TrimVariablesManager:
        ...
    def EnsureVariablesConsistency(self, solution: TaggedObject) -> None:
        ...
    def SetTrimPropertyValue(self, subcase: TaggedObject, propertyName: str, expressionStr: str, unitType: TaggedObject) -> None:
        ...
    def AddVariable(self, solution: TaggedObject, variableType: int, variableName: str, variableUIName: str) -> None:
        ...
    def DeleteVariable(self, solution: TaggedObject, variableName: str) -> None:
        ...
    def SetFixedVariableConstraint(self, solution: TaggedObject, subcase: TaggedObject, variableName: str, expressionStr: str, unitType: TaggedObject) -> None:
        ...
    def SetLinkedVariableConstraint(self, solution: TaggedObject, subcase: TaggedObject, variableName: str, independentVariables: str, independentVariableCoefficients: float) -> TaggedObject:
        ...
    def Tag(self) -> Tag: ...



class TableParamValue(NXObject):
    def __init__(self) -> None: ...
    def SetIsValidated(self, isValidated: bool) -> None:
        ...
    def SetIntColumnValue(self, columnId: str, columnValues: int) -> None:
        ...
    def SetStringColumnValue(self, columnId: str, columnValues: str) -> None:
        ...
    def SetBoolColumnValue(self, columnId: str, columnValues: bool) -> None:
        ...
    def SetScalarColumnValue(self, columnId: str, unit: Unit, columnValues: float) -> None:
        ...
    def UpdateExpressionColumnValue(self, columnId: str, unit: Unit, columnValues: typing.List[Expression]) -> None:
        ...
    def GetExpression(self, columnId: str, rowId: int) -> Expression:
        ...
    def UpdateLaminateColumnValue(self, columnId: str, columnValues: typing.List[CAE.AeroStructures.LaminateQuery]) -> None:
        ...
    def GetLaminate(self, columnId: str, rowId: int, propTable: TaggedObject) -> CAE.AeroStructures.LaminateQuery:
        ...
    def ChangeColumnsLength(self, rowId: int) -> None:
        ...


class TableParameter(NXObject):
    def __init__(self) -> None: ...
    def GetColumnNames(self) -> str:
        ...
    def GetColumnUiNames(self, columnIds: str) -> str:
        ...
    def GetColumnType(self, columnName: str) -> CAE.AeroStructures.ParameterDescriptor.ParameterType:
        ...
    def GetIntegerValues(self, columnId: str) -> int:
        ...
    def GetScalarValues(self, columnId: str) -> float:
        ...
    def GetScalarValues(self, columnId: str, unitType: Unit) -> float:
        ...
    def GetMeasure(self, columnId: str) -> str:
        ...
    def GetUnitType(self, columnId: str) -> Unit:
        ...
    def GetStringValues(self, columnId: str) -> str:
        ...
    def GetBooleanValues(self, columnId: str) -> bool:
        ...
    def GetLaminateValues(self, columnId: str) -> typing.List[CAE.AeroStructures.Laminate]:
        ...
    Size: int
    SizeOffset: int
    SizeParameter: str


class SectionSource(CAE.AeroStructures.BaseExtractionSource):
    def __init__(self) -> None: ...


class PropTable(CAE.PropertyTable):
    def __init__(self) -> None: ...
    def GetMarginPropertyType(self, propertyName: str) -> CAE.AeroStructures.PropTable.MarginPropertyType:
        ...
    def SetLoadExtractionPropertyValue(self, propertyName: str, propertyValue: CAE.AeroStructures.LoadExtractionValue) -> None:
        ...
    def GetLoadExtractionPropertyValue(self, propertyName: str) -> CAE.AeroStructures.LoadExtractionValue:
        ...
    def SetTableParamPropertyValue(self, propertyName: str, propertyValue: CAE.AeroStructures.TableParamValue) -> None:
        ...
    def GetTableParamPropertyValue(self, propertyName: str) -> CAE.AeroStructures.TableParamValue:
        ...
    def SetLaminatePropertyValue(self, propertyName: str, propertyValue: CAE.AeroStructures.LaminateValue) -> None:
        ...
    def GetLaminatePropertyValue(self, propertyName: str) -> CAE.AeroStructures.LaminateValue:
        ...
    def SetDescriptionPropertyValue(self, propertyName: str, propertyValue: CAE.AeroStructures.DescriptionValue) -> None:
        ...
    def GetDescriptionPropertyValue(self, propertyName: str) -> CAE.AeroStructures.DescriptionValue:
        ...
    def SetFilePropertyValue(self, propertyName: str, propertyValue: str) -> None:
        ...


    class MarginPropertyType(enum.Enum):
        Unknown = 0
        String = 1
        Boolean = 2
        Integer = 3
        Double = 4
        FieldWrapper = 5
        ScalarFieldWrapper = 6
        CoordinateSystem = 7
        DoubleArray = 8
        IntegerArray = 9
        PhysicalMaterial = 10
        Matrix = 11
        ScalarTable = 12
        Text = -1
        FieldExpression = -2
        VectorFieldWrapper = -3
        Vector = -4
        Reference = -5
        Point = -6
        DateTime = -7
        NamedPropertyTableArray = -8
        SetManager = -9
        NamedPropertyTable = -10
        Axis = -11
        CaeSection = -12
        SectionOrientation = -13
        SectionOffset = -14
        ReferenceArray = -15
        StringArray = -16
        Loadextraction = -17
        Laminate = -18
        Description = -19
        Table = -20
    

class PhysicalPropertySource(CAE.AeroStructures.BaseExtractionSource):
    def __init__(self) -> None: ...


class ParameterDescriptor(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    Dimensionality: CAE.AeroStructures.ParameterDescriptor.DimensionalityType
    Id: str
    IsOptional: bool
    ParamType: CAE.AeroStructures.ParameterDescriptor.ParameterType
    UiName: str


    class ParameterType(enum.Enum):
        Boolean = 0
        Integer = 1
        Scalar = 2
        Text = 3
        Load = 4
        Table = 5
        Size = 6
        Laminate = 7
        File = 8
        Unknown = 9
    

    class DimensionalityType(enum.Enum):
        None = 0
        Failuremode = 1
        Loadcase = 2
        FmLc = 3
    

class NamespaceDoc(System.Object):
    def __init__(self) -> None: ...


class MultiMarginCalculationBuilder(CAE.AeroStructures.MarginCalculationBuilder):
    def __init__(self) -> None: ...
    def SetExtractionSites(self, extractionSiteType: CAE.AeroStructures.MultiMarginCalculationBuilder.ExtractionSiteType, extractionSites: typing.List[TaggedObject]) -> None:
        ...
    def SetExtractionSources(self, sourceName: str, sourceType: CAE.AeroStructures.BaseExtractionSource.TypeEnum, extractionSources: typing.List[TaggedObject]) -> None:
        ...


    class ExtractionSiteType(enum.Enum):
        PolygonFace = 0
        Group = 1
        Element = 2
        Node = 3
        Edge = 4
        Body = 5
        None = 6
        Multiple = 7
    

class MethodDescriptor(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def GetDiagramUrl(self) -> str:
        ...
    def GetDocUrl(self) -> str:
        ...
    def GetDiagramUrlExpanded(self) -> str:
        ...
    def GetDocUrlExpanded(self) -> str:
        ...
    def GetNumFailureModes(self) -> int:
        ...
    def HasFailureMode(self, id: str) -> bool:
        ...
    def GetFailureModeArray(self, fmArray: typing.List[CAE.AeroStructures.FailureMode]) -> None:
        ...
    def GetNumInputs(self) -> int:
        ...
    def HasInput(self, id: str) -> bool:
        ...
    def GetInput(self, id: str) -> CAE.AeroStructures.ParameterDescriptor:
        ...
    def GetInputArray(self, inputArray: typing.List[CAE.AeroStructures.ParameterDescriptor]) -> None:
        ...
    def GetNumOutputs(self) -> int:
        ...
    def HasOutput(self, id: str) -> bool:
        ...
    def GetOutput(self, id: str) -> CAE.AeroStructures.ParameterDescriptor:
        ...
    def GetOutputArray(self, outputArray: typing.List[CAE.AeroStructures.ParameterDescriptor]) -> None:
        ...
    Author: str
    Category: str
    Description: str
    Id: str
    UiName: str
    Version: int


class MatrixManip(NXObject):
    def __init__(self) -> None: ...
    def GetMapOperation(self) -> CAE.AeroStructures.MatrixManip.MapOperations:
        ...
    def SetMapOperation(self, mapOp: CAE.AeroStructures.MatrixManip.MapOperations) -> None:
        ...
    def GetFilterOperation(self) -> CAE.AeroStructures.MatrixManip.FilterOperations:
        ...
    def SetFilterOperation(self, filterOp: CAE.AeroStructures.MatrixManip.FilterOperations) -> None:
        ...
    def GetReduceOperation(self) -> CAE.AeroStructures.MatrixManip.ReduceOperations:
        ...
    def SetReduceOperation(self, reduceOp: CAE.AeroStructures.MatrixManip.ReduceOperations) -> None:
        ...
    def GetFactorConversion(self) -> float:
        ...
    def SetFactorConversion(self, factor: float) -> None:
        ...
    def GetFactor(self) -> float:
        ...
    def SetFactor(self, factor: float) -> None:
        ...
    def GetFilterLowerBound(self) -> float:
        ...
    def SetFilterLowerBound(self, lowerBound: float) -> None:
        ...
    def GetFilterUpperBound(self) -> float:
        ...
    def SetFilterUpperBound(self, upperBound: float) -> None:
        ...
    def GetFactorConversionExpression(self) -> Expression:
        ...
    def SetFactorConversionExpression(self, exp: Expression) -> None:
        ...
    def GetFactorExpression(self) -> Expression:
        ...
    def SetFactorExpression(self, exp: Expression) -> None:
        ...
    def GetFilterLowerBoundExpression(self) -> Expression:
        ...
    def SetFilterLowerBoundExpression(self, exp: Expression) -> None:
        ...
    def GetFilterUpperBoundExpression(self) -> Expression:
        ...
    def SetFilterUpperBoundExpression(self, exp: Expression) -> None:
        ...
    def GetStartMeasure(self) -> str:
        ...
    def SetStartMeasure(self, measure: str) -> None:
        ...
    def GetEndMeasure(self) -> str:
        ...
    def SetEndMeasure(self, measure: str) -> None:
        ...


    class ReduceOperations(enum.Enum):
        Max = 0
        Min = 1
        Average = 2
        Sum = 3
        None = 4
        SignedAbsoluteExtremum = 5
    

    class MapOperations(enum.Enum):
        Absolute = 0
        None = 1
    

    class FilterOperations(enum.Enum):
        Positive = 0
        Negative = 1
        Range = 2
        None = 3
    

class MaterialSource(CAE.AeroStructures.BaseExtractionSource):
    def __init__(self) -> None: ...


class MarginSolutionCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[CAE.AeroStructures.MarginSolution]:
        ...
    def __init__(self, owner: CAE.AeroStructManager) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.MarginSolution:
        ...
    def CreateMarginSolutionBuilder(self, metasolution: CAE.AeroStructures.MarginSolution) -> CAE.AeroStructures.MarginSolutionBuilder:
        ...
    def DeleteMarginSolution(self, metasolution: CAE.AeroStructures.MarginSolution) -> None:
        ...
    def CloneMarginSolution(self, source: CAE.AeroStructures.MarginSolution) -> CAE.AeroStructures.MarginSolution:
        ...
    def SetActiveMarginsolution(self, source: CAE.AeroStructures.MarginSolution) -> None:
        ...
    def GetActiveMarginsolution(self) -> CAE.AeroStructures.MarginSolution:
        ...
    def SetActiveMargincalculation(self, activeCalculation: CAE.AeroStructures.MarginCalculation) -> None:
        ...
    def GetActiveMargincalculation(self) -> CAE.AeroStructures.MarginCalculation:
        ...
    def Tag(self) -> Tag: ...



class MarginSolutionBuilder(Builder):
    def __init__(self) -> None: ...
    Description: str
    Name: str
    ReferenceSolution: CAE.SimSolution
    UnitSystem: str


class MarginSolution(CAE.AeroStructures.BaseSolution):
    def __init__(self) -> None: ...
    def CreateMarginResultTableDataProvider(self) -> CAE.AeroStructures.MarginResultTableDataProvider:
        ...
    def CreateMarginResultTableDataProvider(self, marginCalculations: typing.List[CAE.AeroStructures.MarginCalculation]) -> CAE.AeroStructures.MarginResultTableDataProvider:
        ...
    def CreateMarginResultTableDataProvider(self, maxRank: int, maxMS: float) -> CAE.AeroStructures.MarginResultTableDataProvider:
        ...
    def CreateMarginResultTableDataProvider(self, marginCalculations: typing.List[CAE.AeroStructures.MarginCalculation], maxRank: int, maxMS: float) -> CAE.AeroStructures.MarginResultTableDataProvider:
        ...
    def CreateMarginResultTableRowFilter(self) -> CAE.AeroStructures.MarginResultTableRowFilter:
        ...
    def CreateMarginResultTableRowFilter(self, isDisjunction: bool, isNegated: bool) -> CAE.AeroStructures.MarginResultTableRowFilter:
        ...
    def CreateMarginResultQuery(self, filter: CAE.AeroStructures.MarginResultTableRowFilter) -> CAE.AeroStructures.MarginResultQuery:
        ...
    def CreateMarginResultQuery(self, marginCalculations: typing.List[CAE.AeroStructures.MarginCalculation], filter: CAE.AeroStructures.MarginResultTableRowFilter) -> CAE.AeroStructures.MarginResultQuery:
        ...
    def CreateMarginResultQuery(self, maxRank: int, maxMS: float, filter: CAE.AeroStructures.MarginResultTableRowFilter) -> CAE.AeroStructures.MarginResultQuery:
        ...
    def CreateMarginResultQuery(self, marginCalculations: typing.List[CAE.AeroStructures.MarginCalculation], maxRank: int, maxMS: float, filter: CAE.AeroStructures.MarginResultTableRowFilter) -> CAE.AeroStructures.MarginResultQuery:
        ...
    def PostProcessing(self, marginCalculations: typing.List[CAE.AeroStructures.MarginCalculation]) -> None:
        ...
    def CreateCriticalMs(self, name: str, marginCalculations: typing.List[CAE.AeroStructures.MarginCalculation]) -> CAE.AeroStructures.ExpressionResult:
        ...
    MarginCalculationCollection: CAE.AeroStructures.MarginCalculationCollection
    ExpressionCollection: CAE.AeroStructures.ExpressionCollection


class MarginResultTableRowFilter(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def AddCondition(self, columnType: CAE.AeroStructures.MarginResultTableDataProvider.ColumnType, op: CAE.AeroStructures.MarginResultTableRowFilter.NumericComparisonOperator, value: int) -> None:
        ...
    def AddCondition(self, columnType: CAE.AeroStructures.MarginResultTableDataProvider.ColumnType, op: CAE.AeroStructures.MarginResultTableRowFilter.NumericComparisonOperator, value: float) -> None:
        ...
    def AddCondition(self, columnType: CAE.AeroStructures.MarginResultTableDataProvider.ColumnType, op: CAE.AeroStructures.MarginResultTableRowFilter.StringComparisonOperator, value: str) -> None:
        ...
    def AddCiCondition(self, columnType: CAE.AeroStructures.MarginResultTableDataProvider.ColumnType, op: CAE.AeroStructures.MarginResultTableRowFilter.StringComparisonOperator, value: str) -> None:
        ...
    def AddCondition(self, otherFilter: CAE.AeroStructures.MarginResultTableRowFilter) -> None:
        ...
    def AndWith(self, otherFilter: CAE.AeroStructures.MarginResultTableRowFilter) -> None:
        ...
    def OrWith(self, otherFilter: CAE.AeroStructures.MarginResultTableRowFilter) -> None:
        ...


    class StringComparisonOperator(enum.Enum):
        Equal = 0
        NotEqual = 1
        LessThan = 2
        LessOrEqual = 3
        GreaterThan = 4
        GreaterOrEqual = 5
        StartsWith = 6
        EndsWith = 7
        Contains = 8
    

    class NumericComparisonOperator(enum.Enum):
        Equal = 0
        NotEqual = 1
        LessThan = 2
        LessOrEqual = 3
        GreaterThan = 4
        GreaterOrEqual = 5
    

class MarginResultTableRow(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def GetInputIntegerValue(self, parameterName: str) -> int:
        ...
    def GetInputScalarValue(self, parameterName: str) -> float:
        ...
    def GetInputScalarUnit(self, parameterName: str) -> Unit:
        ...
    def GetInputScalarMeasure(self, parameterName: str) -> str:
        ...
    def GetInputLoad(self, parameterName: str) -> float:
        ...
    def GetInputStringValue(self, parameterName: str) -> str:
        ...
    def GetInputBooleanValue(self, parameterName: str) -> bool:
        ...
    def GetOutputIntegerValue(self, parameterName: str) -> int:
        ...
    def GetOutputScalarValue(self, parameterName: str) -> float:
        ...
    def GetOutputScalarUnit(self, parameterName: str) -> Unit:
        ...
    def GetOutputScalarMeasure(self, parameterName: str) -> str:
        ...
    def GetOutputStringValue(self, parameterName: str) -> str:
        ...
    def GetOutputBooleanValue(self, parameterName: str) -> bool:
        ...
    Calculation: CAE.AeroStructures.MarginCalculation
    CalculationName: str
    FailureModeName: str
    FemSolutionName: str
    GlobalRank: int
    LoadCaseName: str
    MarginOfSafety: float
    MethodName: str
    RankByCalculation: int
    RankByFailureMode: int
    RankByLoadCase: int
    ReserveFactor: float


class MarginResultTableDataProvider(NXObject):
    def __init__(self) -> None: ...
    def RegisterColumn(self, columnIdx: int, columnType: CAE.AeroStructures.MarginResultTableDataProvider.ColumnType) -> None:
        ...
    def RegisterAllColumns(self) -> None:
        ...
    def CreateQuery(self) -> CAE.AeroStructures.MarginResultQuery:
        ...


    class ColumnType(enum.Enum):
        Calculation = 0
        FailureMode = 1
        LoadCase = 2
        MarginOfSafety = 3
        GlobalRank = 4
        RankByCalculation = 5
        RankByFailureMode = 6
        RankByLoadCase = 7
        Method = 8
        FemSolution = 9
        SelectedLoadCaseCount = 10
        LoadCaseCount = 11
        LoadCaseSet = 12
        ReserveFactor = 13
        Sentinel = 14
    

class MarginResultQuery(NXObject):
    def __init__(self) -> None: ...
    def CreateIterator(self) -> CAE.AeroStructures.MarginResultIterator:
        ...
    def GetMaximumRowCount(self) -> int:
        ...
    def GetRowCount(self) -> int:
        ...


class MarginResultIterator(NXObject):
    def __init__(self) -> None: ...
    def Next(self) -> bool:
        ...
    def GetCurrentRow(self) -> CAE.AeroStructures.MarginResultTableRow:
        ...


class MarginCalculationCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[CAE.AeroStructures.MarginCalculation]:
        ...
    def __init__(self, owner: CAE.AeroStructures.MarginSolution) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.MarginCalculation:
        ...
    def CreateMarginCalculationBuilder(self, margincalculation: CAE.AeroStructures.MarginCalculation) -> CAE.AeroStructures.MarginCalculationBuilder:
        ...
    def CreateMarginCalculationBuilderForDuplication(self, margincalculation: CAE.AeroStructures.MarginCalculation) -> CAE.AeroStructures.MarginCalculationBuilder:
        ...
    def CreateMultiMarginCalculationBuilder(self, margincalculation: CAE.AeroStructures.MarginCalculation) -> CAE.AeroStructures.MultiMarginCalculationBuilder:
        ...
    def DeleteCalculation(self, margincalculation: CAE.AeroStructures.MarginCalculation) -> None:
        ...
    def CloneCalculation(self, name: str, sourcemargincalculation: CAE.AeroStructures.MarginCalculation) -> CAE.AeroStructures.MarginCalculation:
        ...
    def RenameCalculations(self, name: str, calculations: typing.List[CAE.AeroStructures.MarginCalculation]) -> None:
        ...
    def DeleteCalculations(self, calculations: typing.List[CAE.AeroStructures.MarginCalculation]) -> None:
        ...
    def CloneCalculations(self, calculations: typing.List[CAE.AeroStructures.MarginCalculation]) -> None:
        ...
    def CreateAnnotations(self, marginCalculations: typing.List[CAE.AeroStructures.MarginCalculation], annotData: CAE.AeroStructures.AeroStructuresAnnotDataS) -> None:
        ...
    def Tag(self) -> Tag: ...



class MarginCalculationBuilder(Builder):
    def __init__(self) -> None: ...
    def CreatePropertyTable(self) -> CAE.AeroStructures.PropTable:
        ...
    def DuplicateCalculation(self) -> None:
        ...
    def SetAnnotationData(self, annotData: CAE.AeroStructures.AeroStructuresAnnotDataS) -> None:
        ...
    def ClearAnnotationData(self) -> None:
        ...
    Annotation: Annotations.NoteBase
    Description: str
    ExtractionSourceSet: CAE.AeroStructures.ExtractionSourceSet
    LoadCaseSet: CAE.AeroStructures.LoadCaseSet
    LocationCoordinateSystem: CoordinateSystem
    LocationPoint: Point
    MethodKey: str
    Name: str
    PropertyTable: CAE.AeroStructures.PropTable
    Status: CAE.AeroStructures.BaseCalculation.CalculationStatus


class MarginCalculation(CAE.AeroStructures.BaseCalculation):
    def __init__(self) -> None: ...
    def GetResultMsValue(self, failureModeName: str, loadCaseName: str) -> float:
        ...
    def GetScalarFieldExpression(self, inputName: str) -> Expression:
        ...
    def ReplaceScalarFieldExpression(self, inputName: str, exp: Expression) -> None:
        ...


class MarginAnnotCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[Annotations.BaseNote]:
        ...
    def __init__(self, owner: CAE.CaePart) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.MarginAnnot:
        ...
    def CreateMarginAnnotBuilder(self, annotation: Annotations.SimpleDraftingAid) -> CAE.AeroStructures.MarginAnnotBuilder:
        ...
    def CreateMarginAnnot(self, labelData: Annotations.LabelData) -> CAE.AeroStructures.MarginAnnot:
        ...
    def ShowAnnotations(self, annotArray: typing.List[CAE.AeroStructures.MarginAnnot]) -> None:
        ...
    def HideAnnotations(self, annotArray: typing.List[CAE.AeroStructures.MarginAnnot]) -> None:
        ...
    def ReverseLeaders(self, annotArray: typing.List[CAE.AeroStructures.MarginAnnot]) -> None:
        ...
    def ScaleTextSize(self, annotArray: typing.List[CAE.AeroStructures.MarginAnnot], scale: float) -> None:
        ...
    def UpdateAnnotations(self, annotArray: typing.List[CAE.AeroStructures.MarginAnnot], annotData: CAE.AeroStructures.AeroStructuresAnnotDataS) -> None:
        ...
    def RelocateAnnotations(self, annotArray: typing.List[CAE.AeroStructures.MarginAnnot]) -> bool:
        ...
    def Tag(self) -> Tag: ...



class MarginAnnotBuilder(CAE.CaeNoteBuilder):
    def __init__(self) -> None: ...


class MarginAnnot(CAE.CaeLabel):
    def __init__(self) -> None: ...


class ManualLoadExtraction(CAE.AeroStructures.LoadExtractionStrategy):
    def __init__(self) -> None: ...
    def GetValues(self, unit: Unit, keys: str, values: float) -> None:
        ...
    def SetValues(self, unit: Unit, keys: str, values: float) -> None:
        ...


class LocalLaminate(CAE.AeroStructures.Laminate):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def SetReferencePlane(self, location: CAE.AeroStructures.Laminate.LamRefLoc) -> None:
        ...
    def SetLaminateAngle(self, angle: float, angleUnit: Unit) -> None:
        ...
    def SetInverted(self, inverted: bool) -> None:
        ...
    def SetReversed(self, reversed: bool) -> None:
        ...
    def SetReferenceTemperature(self, temperature: float, temperatureUnit: Unit) -> None:
        ...
    def SetBottomFiberDistance(self, distance: float, distanceUnit: Unit) -> None:
        ...
    def SetPlyMaterial(self, plyIndex: int, material: PhysicalMaterial) -> None:
        ...
    def SetPlyMaterialByName(self, plyIndex: int, materialName: str) -> None:
        ...
    def SetPlyAngle(self, plyIndex: int, angle: float, angleUnit: Unit) -> None:
        ...
    def SetPlyThickness(self, plyIndex: int, thickness: float, thicknessUnit: Unit) -> None:
        ...
    def AddPly(self, material: PhysicalMaterial, thickness: float, thicknessUnit: Unit, angle: float, angleUnit: Unit) -> int:
        ...
    def AddPlyByMaterialName(self, materialName: str, thickness: float, thicknessUnit: Unit, angle: float, angleUnit: Unit) -> int:
        ...


class LoadFilteringSolutionCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[CAE.AeroStructures.LoadFilteringSolution]:
        ...
    def __init__(self, owner: CAE.AeroStructManager) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.LoadFilteringSolution:
        ...
    def CreateLoadFilteringSolutionBuilder(self, loadFilteringSol: CAE.AeroStructures.LoadFilteringSolution) -> CAE.AeroStructures.LoadFilteringSolutionBuilder:
        ...
    def DeleteSolution(self, metasolution: CAE.AeroStructures.LoadFilteringSolution) -> None:
        ...
    def CloneSolution(self, source: CAE.AeroStructures.LoadFilteringSolution) -> CAE.AeroStructures.LoadFilteringSolution:
        ...
    def SetActiveSolution(self, source: CAE.AeroStructures.LoadFilteringSolution) -> None:
        ...
    def GetActiveSolution(self) -> CAE.AeroStructures.LoadFilteringSolution:
        ...
    def SetActiveLoadfilteringcalculation(self, activeCalculation: CAE.AeroStructures.LoadFilteringCalculation) -> None:
        ...
    def GetActiveLoadfilteringcalculation(self) -> CAE.AeroStructures.LoadFilteringCalculation:
        ...
    def Tag(self) -> Tag: ...



class LoadFilteringSolutionBuilder(Builder):
    def __init__(self) -> None: ...
    Description: str
    Name: str
    ReferenceSolution: CAE.SimSolution
    UnitSystem: str


class LoadFilteringSolution(CAE.AeroStructures.BaseSolution):
    def __init__(self) -> None: ...
    LoadFilteringCalculationCollection: CAE.AeroStructures.LoadFilteringCalculationCollection


class LoadFilteringCalculationCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[CAE.AeroStructures.LoadFilteringCalculation]:
        ...
    def __init__(self, owner: CAE.AeroStructures.LoadFilteringSolution) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.LoadFilteringCalculation:
        ...
    def CreateLoadFilteringCalculationBuilder(self, calculation: CAE.AeroStructures.LoadFilteringCalculation) -> CAE.AeroStructures.LoadFilteringCalculationBuilder:
        ...
    def CreateLoadFilteringCalculationBuilderForDuplication(self, calculation: CAE.AeroStructures.LoadFilteringCalculation) -> CAE.AeroStructures.LoadFilteringCalculationBuilder:
        ...
    def DeleteCalculation(self, calculation: CAE.AeroStructures.LoadFilteringCalculation) -> None:
        ...
    def CloneCalculation(self, name: str, sourceCalculation: CAE.AeroStructures.LoadFilteringCalculation) -> CAE.AeroStructures.LoadFilteringCalculation:
        ...
    def RenameCalculations(self, name: str, calculations: typing.List[CAE.AeroStructures.LoadFilteringCalculation]) -> None:
        ...
    def DeleteCalculations(self, calculations: typing.List[CAE.AeroStructures.LoadFilteringCalculation]) -> None:
        ...
    def CloneCalculations(self, calculations: typing.List[CAE.AeroStructures.LoadFilteringCalculation]) -> None:
        ...
    def CreateAnnotations(self, calculations: typing.List[CAE.AeroStructures.LoadFilteringCalculation], annotData: CAE.AeroStructures.AeroStructuresAnnotDataS) -> None:
        ...
    def Tag(self) -> Tag: ...



class LoadFilteringCalculationBuilder(Builder):
    def __init__(self) -> None: ...
    def DuplicateCalculation(self) -> None:
        ...
    def SetAnnotationData(self, annotData: CAE.AeroStructures.AeroStructuresAnnotDataS) -> None:
        ...
    def ClearAnnotationData(self) -> None:
        ...
    Annotation: Annotations.NoteBase
    Description: str
    ExtractionSourceSet: CAE.AeroStructures.ExtractionSourceSet
    LoadCaseSet: CAE.AeroStructures.LoadCaseSet
    LocationCoordinateSystem: CoordinateSystem
    LocationPoint: Point
    MethodKey: str
    Name: str
    PropertyTable: CAE.AeroStructures.PropTable
    Status: CAE.AeroStructures.BaseCalculation.CalculationStatus


class LoadFilteringCalculation(CAE.AeroStructures.BaseCalculation):
    def __init__(self) -> None: ...
    def GetResultSelectedLoadCaseNames(self, loadCaseNames: str) -> None:
        ...
    def GetScalarFieldExpression(self, inputName: str) -> Expression:
        ...
    def ReplaceScalarFieldExpression(self, inputName: str, exp: Expression) -> None:
        ...


class LoadExtractionValue(NXObject):
    def __init__(self) -> None: ...
    Strategy: CAE.AeroStructures.LoadExtractionStrategy
    StrategyType: CAE.AeroStructures.LoadExtractionValue.ActiveStrategy


    class ActiveStrategy(enum.Enum):
        None = 0
        User = 1
        Manual = 2
        FreeBody = 3
    

class LoadExtractionStrategy(NXObject):
    def __init__(self) -> None: ...


class LoadCaseSetLoadCaseCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[CAE.AeroStructures.LoadCase]:
        ...
    def __init__(self, owner: CAE.AeroStructures.LoadCaseSet) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.LoadCase:
        ...
    def Tag(self) -> Tag: ...



class LoadCaseSetCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[CAE.AeroStructures.LoadCaseSet]:
        ...
    def __init__(self, owner: CAE.AeroStructures.BaseSolution) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.LoadCaseSet:
        ...
    def CreateLoadCaseSetBuilder(self, loadcaeset: CAE.AeroStructures.LoadCaseSet) -> CAE.AeroStructures.LoadCaseSetBuilder:
        ...
    def DeleteLoadCaseSet(self, loadcaseset: CAE.AeroStructures.LoadCaseSet) -> None:
        ...
    def CreateLoadCaseSet(self, builder: CAE.AeroStructures.LoadCaseSetBuilder) -> None:
        ...
    def CloneLoadCaseSet(self, loadcaseset: CAE.AeroStructures.LoadCaseSet) -> None:
        ...
    def ImportLoadCaseSetFromFile(self, fileName: str, errorMsg: str, warningMsg: str) -> CAE.AeroStructures.LoadCaseSet:
        ...
    def Tag(self) -> Tag: ...



class LoadCaseSetBuilder(Builder):
    def __init__(self) -> None: ...
    def AddLoadCase(self, loadcase: CAE.AeroStructures.LoadCase) -> None:
        ...
    def RemoveLoadCase(self, loadcase: CAE.AeroStructures.LoadCase) -> None:
        ...
    Description: str
    Name: str


class LoadCaseSet(NXObject):
    def __init__(self) -> None: ...
    def Export(self, fullPathName: str) -> None:
        ...
    LoadCaseCollection: CAE.AeroStructures.LoadCaseSetLoadCaseCollection


class LoadCaseListBuilder(Builder):
    def __init__(self) -> None: ...
    def RegisterCleanup(self) -> None:
        ...


class LoadCaseCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[CAE.AeroStructures.LoadCase]:
        ...
    def __init__(self, owner: CAE.AeroStructures.BaseSolution) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.LoadCase:
        ...
    def CreateLoadCaseListBuilder(self) -> CAE.AeroStructures.LoadCaseListBuilder:
        ...
    def DeleteLoadCase(self, loadcase: CAE.AeroStructures.LoadCase) -> None:
        ...
    def Tag(self) -> Tag: ...



class LoadCase(NXObject):
    def __init__(self) -> None: ...
    BaseLoadCase: CAE.BaseLoadcase
    StrengthRequirement: str


    class LoadCaseType(enum.Enum):
        Unitary = 0
        Combined = 1
    

class LaminateValue(NXObject):
    def __init__(self) -> None: ...
    LaminateQuery: CAE.AeroStructures.LaminateQuery


class LaminateQueryManager(NXObject):
    def __init__(self) -> None: ...
    def CreateLaminateQuery(self, laminateBaseName: str, laminateQueryOwner: NXObject, isManagedQuery: bool) -> CAE.AeroStructures.LaminateQuery:
        ...
    def CreateLaminateQueryCopy(self, laminateBaseName: str, laminateQueryOwner: NXObject, baseLaminateObject: CAE.AeroStructures.LaminateQuery) -> CAE.AeroStructures.LaminateQuery:
        ...
    def AddLaminateQuery(self, query: CAE.AeroStructures.LaminateQuery) -> bool:
        ...
    def RemoveLaminateQuery(self, query: CAE.AeroStructures.LaminateQuery) -> None:
        ...
    def GetLaminateQuery(self, laminateBaseName: str) -> CAE.AeroStructures.LaminateQuery:
        ...
    def GetLaminateQueries(self, laminateQueryNames: str, laminateQueryTags: typing.List[NXObject]) -> None:
        ...


class LaminateQuery(NXObject):
    def __init__(self) -> None: ...
    def GetReferenceEntityTypeNames(self, referenceEntityTypeNames: str) -> None:
        ...
    def GetReferenceEntityTypesAndNames(self, referenceEntityIndexes: int, referenceEntityTypeNames: str) -> None:
        ...
    def GetReferenceEntityTypeName(self, referenceEntityType: CAE.AeroStructures.LaminateQuery.ReferenceEntityTypeEnum) -> str:
        ...
    def GetLaminatePhysicalProperties(self, physicalPropertyNames: str, physicalPropertyLaminates: typing.List[NXObject]) -> None:
        ...
    def GetLaminateQueries(self, laminateQueryNames: str, laminateQueryTags: typing.List[NXObject]) -> None:
        ...
    def SetValues(self, laminateBaseName: str, laminateName: str, referenceEntityType: CAE.AeroStructures.LaminateQuery.ReferenceEntityTypeEnum, referenceEntity: TaggedObject, extractionAngleInRadians: float, extractionDirection: Vector3d, extractionType: CAE.AeroStructures.LaminateQuery.AngleDefinitionTypeEnum, extractionAngleToleranceInRadians: float, invertNormals: bool, reverseOrder: bool) -> None:
        ...
    def SetValues(self, laminateBaseName: str, laminateName: str, sourceName: str, extractionAngleInRadians: float, extractionDirection: Vector3d, extractionType: CAE.AeroStructures.LaminateQuery.AngleDefinitionTypeEnum, extractionAngleToleranceInRadians: float, invertNormals: bool, reverseOrder: bool) -> None:
        ...
    def GetExtractionAngle(self) -> float:
        ...
    def SetExtractionAngle(self, laminateAngle: float) -> None:
        ...
    def GetExtractionDirection(self) -> Vector3d:
        ...
    def SetExtractionDirection(self, direction: Vector3d) -> None:
        ...
    def GetExtractionAngleTolerance(self, angleUnit: Unit) -> float:
        ...
    def GetExtractionSource(self) -> CAE.AeroStructures.BaseExtractionSource:
        ...
    AngleDefinitionType: CAE.AeroStructures.LaminateQuery.AngleDefinitionTypeEnum
    ExtractionInvertNormal: bool
    ExtractionReversePlies: bool
    ExtractionSourceName: str
    LaminateBaseName: str
    LaminateName: str
    ReferenceEntity: TaggedObject
    ReferenceEntityType: CAE.AeroStructures.LaminateQuery.ReferenceEntityTypeEnum


    class ReferenceEntityTypeEnum(enum.Enum):
        ExistingLaminate = 0
        LaminatePhysicalProperty = 1
        Element2D = 2
        PolygonFace = 3
        Mesh = 4
        Collector2D = 5
        Group = 6
        SelectionRecipe = 7
        Unknown = 8
        ExtractionSource = 9
    

    class AngleDefinitionTypeEnum(enum.Enum):
        MaterialAngle = 0
        Angle = 1
        Vector = 2
    

class LaminateHelper(Utilities.NXRemotableObject):
    def __init__(self, owner: Session) -> None: ...
    def GetLaminateHelper(self, owner: Session) -> CAE.AeroStructures.LaminateHelper:
        ...
    def NewLocalLaminate(self) -> CAE.AeroStructures.LocalLaminate:
        ...
    def Tag(self) -> Tag: ...



class Laminate(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def CreateLocalLaminateByCopy(self) -> CAE.AeroStructures.LocalLaminate:
        ...
    def GetReferencePlane(self) -> CAE.AeroStructures.Laminate.LamRefLoc:
        ...
    def GetBottomFiberDistance(self) -> float:
        ...
    def GetReferenceTemperature(self) -> float:
        ...
    def GetPlyId(self, plyIndex: int) -> int:
        ...
    def GetPlyThickness(self, plyIndex: int) -> float:
        ...
    def GetPlyAngle(self, plyIndex: int) -> float:
        ...
    def GetPlyMaterialName(self, plyIndex: int) -> str:
        ...
    def GetPlyMaterial(self, plyIndex: int) -> PhysicalMaterial:
        ...
    def IsUsingPlyMaterial(self, plyIndex: int) -> bool:
        ...
    def GetPlyIds(self, ids: int) -> None:
        ...
    def GetPlyThicknesses(self, values: float) -> None:
        ...
    def GetPlyAngles(self, values: float) -> None:
        ...
    def GetPlyMaterialNames(self, names: str) -> None:
        ...
    def GetPlyMaterials(self, materials: typing.List[PhysicalMaterial]) -> None:
        ...
    def IsUsingPlyMaterials(self, usingPlyMaterials: bool) -> None:
        ...
    def GetLaminateAngle(self) -> float:
        ...
    def IsInverted(self) -> bool:
        ...
    def IsReversed(self) -> bool:
        ...
    def GetStiffnessA(self) -> GeneralScalarTable:
        ...
    def GetStiffnessB(self) -> GeneralScalarTable:
        ...
    def GetStiffnessD(self) -> GeneralScalarTable:
        ...
    def GetABD(self) -> GeneralScalarTable:
        ...
    def GetTransverseShear(self) -> GeneralScalarTable:
        ...
    def PrintLaminateInfo(self, plies: bool, props: bool, mats: bool) -> None:
        ...
    def GetStressPerPly(self, usePlyCoordinates: bool, opTemp: float, nxx: float, nyy: float, nxy: float, mxx: float, myy: float, mxy: float, xxStress: GeneralScalarTable, yyStress: GeneralScalarTable, xyStress: GeneralScalarTable) -> None:
        ...
    def GetStrainPerPly(self, usePlyCoordinates: bool, opTemp: float, nxx: float, nyy: float, nxy: float, mxx: float, myy: float, mxy: float, xxStrain: GeneralScalarTable, yyStrain: GeneralScalarTable, xyStrain: GeneralScalarTable) -> None:
        ...
    def GetInterlaminarShearStress(self, usePlyCoordinates: bool, opTemp: float, nxx: float, nyy: float, nxy: float, mxx: float, myy: float, mxy: float, tsx: float, tsy: float, stressYz: GeneralScalarTable, stressZx: GeneralScalarTable) -> None:
        ...
    def GetMaterialNames(self, materialNames: str) -> None:
        ...
    def GetOrientations(self, orientations: float) -> None:
        ...
    def GetMaterialPlyCount(self, materialIndex: int, plies: int) -> None:
        ...
    def GetMaterialThickness(self, materialIndex: int, thicknesses: float) -> None:
        ...
    def GetYoungsModulus(self) -> GeneralScalarTable:
        ...
    def GetBendingYoungsModulus(self) -> GeneralScalarTable:
        ...
    def GetPoissonsRatio(self) -> GeneralScalarTable:
        ...
    def GetShearModulus(self) -> GeneralScalarTable:
        ...
    def GetBendingShearModulus(self) -> float:
        ...
    def GetThermalExpansionCoeff(self) -> GeneralScalarTable:
        ...
    def GetThermalConductivityCoeff(self) -> GeneralScalarTable:
        ...
    def GetSpecificHeat(self) -> float:
        ...
    def GetMid1(self) -> GeneralScalarTable:
        ...
    def GetMid2(self) -> GeneralScalarTable:
        ...
    def GetMid3(self) -> GeneralScalarTable:
        ...
    def GetMid4(self) -> GeneralScalarTable:
        ...
    def ToShorthandNotation(self) -> str:
        ...
    def GetUnitSystem(self) -> CAE.AeroStructures.Author.CalculationContext.UnitSystem:
        ...
    def SetUnitSystem(self, unitSystem: CAE.AeroStructures.Author.CalculationContext.UnitSystem) -> None:
        ...
    IsBalanced: bool
    IsSymmetric: bool
    MassDensity: float
    MassPerUnitArea: float
    NumMaterials: int
    NumPlies: int
    PhysPropName: str
    TotalThickness: float


    class LamRefLoc(enum.Enum):
        Top = 0
        Middle = 1
        Bottom = 2
        Specify = 3
    

class GeometricalExtractionSource(CAE.AeroStructures.BaseExtractionSource):
    def __init__(self) -> None: ...


class FreeBodyLoadExtraction(CAE.AeroStructures.LoadExtractionStrategy):
    def __init__(self) -> None: ...
    def GetFreeBody(self) -> CAE.NodalForceReport:
        ...
    def SetFreeBody(self, freeBody: CAE.NodalForceReport) -> None:
        ...
    def GetResult(self) -> CAE.AeroStructures.FreeBodyLoadExtraction.Result:
        ...
    def SetResult(self, result: CAE.AeroStructures.FreeBodyLoadExtraction.Result) -> None:
        ...
    def GetComponent(self) -> CAE.AeroStructures.FreeBodyLoadExtraction.Component:
        ...
    def SetComponent(self, component: CAE.AeroStructures.FreeBodyLoadExtraction.Component) -> None:
        ...
    def GetMatrixManip(self) -> CAE.AeroStructures.MatrixManip:
        ...
    def SetMatrixManip(self, manip: CAE.AeroStructures.MatrixManip) -> None:
        ...


    class Result(enum.Enum):
        None = 0
        Force = 1
        Moment = 2
    

    class Component(enum.Enum):
        None = 0
        X = 1
        Y = 2
        Z = 3
        PlanarMagnitudeXY = 4
        PlanarMagnitudeXZ = 5
        PlanarMagnitudeZY = 6
        Magnitude = 7
    

class FailureMode(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    Id: str
    UiName: str


class ExtractionSourceSet(NXObject):
    def __init__(self) -> None: ...
    def CreateGeometricalExtractionSource(self, type: CAE.AeroStructures.BaseExtractionSource.TypeEnum, sourceName: str, entitiesArray: typing.List[TaggedObject]) -> CAE.AeroStructures.GeometricalExtractionSource:
        ...
    def CreateGeometricalExtractionSourceFromEntity(self, sourceName: str, entity: TaggedObject) -> CAE.AeroStructures.GeometricalExtractionSource:
        ...
    def CreatePhysicalPropertySource(self, type: CAE.AeroStructures.BaseExtractionSource.TypeEnum, sourceName: str, entity: TaggedObject) -> CAE.AeroStructures.PhysicalPropertySource:
        ...
    def GetExtractionSources(self) -> typing.List[CAE.AeroStructures.BaseExtractionSource]:
        ...
    def SetExtractionSources(self, source: typing.List[CAE.AeroStructures.BaseExtractionSource]) -> None:
        ...
    def AddExtractionSource(self, source: CAE.AeroStructures.BaseExtractionSource) -> None:
        ...
    def GetNextAvailableDefaultSourceName(self, type: CAE.AeroStructures.BaseExtractionSource.TypeEnum) -> str:
        ...
    def CreateMaterialSource(self, sourceName: str, entity: TaggedObject) -> CAE.AeroStructures.MaterialSource:
        ...
    def CreateSectionSource(self, sourceName: str, entity: TaggedObject) -> CAE.AeroStructures.SectionSource:
        ...


class ExpressionResult(CAE.AeroStructures.Expression):
    def __init__(self) -> None: ...
    def Update(self) -> None:
        ...
    def SetCalculations(self, marginCalculations: typing.List[CAE.AeroStructures.MarginCalculation]) -> None:
        ...


    class Type(enum.Enum):
        CriticalMS = 0
    

class ExpressionCollection(TaggedObjectCollection):
    def EnumerateMoveNext(self, currentTag: Tag, state: bytes) -> int:
        ...
    def ToArray(self) -> typing.List[CAE.AeroStructures.Expression]:
        ...
    def __init__(self, owner: CAE.AeroStructures.MarginSolution) -> None: ...
    def __init__(self) -> None: ...
    def FindObject(self, name: str) -> CAE.AeroStructures.Expression:
        ...
    def RenameExpression(self, name: str, expression: CAE.AeroStructures.Expression) -> None:
        ...
    def RenameExpression(self, name: str, expressionsTags: typing.List[CAE.AeroStructures.Expression]) -> None:
        ...
    def DeleteExpression(self, expression: CAE.AeroStructures.Expression) -> None:
        ...
    def DeleteExpression(self, expressionsTags: typing.List[CAE.AeroStructures.Expression]) -> None:
        ...
    def Tag(self) -> Tag: ...



class Expression(NXObject):
    def __init__(self) -> None: ...


class DescriptionValue(NXObject):
    def __init__(self) -> None: ...
    AutomaticTextPropertyValue: bool


class CalculationLogLine(TransientObject):
    def __init__(self, ptr: int) -> None: ...
    def FreeResource(self) -> None:
        ...
    def ToStringLine(self) -> str:
        ...
    Failmode: str
    Loadcase: str
    Message: str
    MsgType: CAE.AeroStructures.CalculationLogLine.MessageType
    Source: str
    Timestamp: str


    class MessageType(enum.Enum):
        Info = 0
        Warning = 1
        Error = 2
        Unknown = 3
    

class BaseSolution(NXObject):
    def __init__(self) -> None: ...
    def Rename(self, name: str) -> None:
        ...
    def Solve(self, calculations: typing.List[CAE.AeroStructures.BaseCalculation]) -> None:
        ...
    def SolveAll(self) -> None:
        ...
    def CreateReport(self, templateFile: str, reportName: str, listError: bool) -> Report.Report:
        ...
    def GetReports(self, pReports: typing.List[Report.Report]) -> None:
        ...
    LoadCaseCollection: CAE.AeroStructures.LoadCaseCollection
    LoadCaseSetCollection: CAE.AeroStructures.LoadCaseSetCollection
    Description: str
    ReferenceSolution: CAE.SimSolution


class BaseExtractionSource(NXObject):
    def __init__(self) -> None: ...
    def GetEntities(self) -> typing.List[TaggedObject]:
        ...
    BaseDefaultName: str
    Name: str
    NumberOfEntities: int
    Type: CAE.AeroStructures.BaseExtractionSource.TypeEnum


    class TypeEnum(enum.Enum):
        Unknown = 0
        PolygonFace = 2
        PolygonEdge = 3
        PolygonBody = 4
        SelectionRecipe = 6
        Element1D = 8
        Element2D = 9
        Element3D = 10
        Node = 11
        Group = 12
        PhysicalProperty = 15
        Collector2D = 16
        Material = 18
        Section = 19
        Mesh1D = 20
        Mesh2D = 21
        LaminatePhysicalProperty = 22
    

class BaseCalculation(NXObject):
    def __init__(self) -> None: ...
    def GetLog(self, logsEntries: typing.List[CAE.AeroStructures.CalculationLogLine]) -> None:
        ...
    def UpdateScalarExpressions(self) -> None:
        ...
    def GetInputNames(self, inputNames: str) -> None:
        ...
    def GetOutputNames(self, outputNames: str) -> None:
        ...
    def GetParameterType(self, parameterName: str) -> CAE.AeroStructures.ParameterDescriptor.ParameterType:
        ...
    def GetInputComment(self, inputName: str) -> str:
        ...
    def GetInputIntegerValue(self, parameterName: str) -> int:
        ...
    def GetInputScalarValue(self, parameterName: str) -> float:
        ...
    def GetInputScalarUnit(self, parameterName: str) -> Unit:
        ...
    def GetInputLoadLocation(self, parameterName: str) -> CAE.Result.Location:
        ...
    def GetInputLoadNodes(self, parameterName: str, nodeArray: typing.List[CAE.FENode]) -> None:
        ...
    def GetInputLoadElements(self, parameterName: str, elementArray: typing.List[CAE.FEElement]) -> None:
        ...
    def GetInputLoadValues(self, parameterName: str, loadCaseName: str) -> float:
        ...
    def GetInputLoadValuesAll(self, parameterName: str) -> GeneralScalarTable:
        ...
    def GetInputLoadUnit(self, parameterName: str) -> Unit:
        ...
    def GetInputStringValue(self, parameterName: str) -> str:
        ...
    def GetInputBooleanValue(self, parameterName: str) -> bool:
        ...
    def GetInputTableValue(self, parameterName: str) -> CAE.AeroStructures.TableParameter:
        ...
    def GetInputLaminateValue(self, parameterName: str) -> CAE.AeroStructures.Laminate:
        ...
    def GetInputFileValue(self, parameterName: str) -> str:
        ...
    def GetLaminateQueryManager(self) -> CAE.AeroStructures.LaminateQueryManager:
        ...
    def GetInputSizeValue(self, parameterName: str) -> int:
        ...
    def GetHasResult(self) -> bool:
        ...
    def GetResultInputNames(self, inputNames: str) -> None:
        ...
    def GetResultInputComment(self, inputName: str) -> str:
        ...
    def GetResultParameterType(self, parameterName: str) -> CAE.AeroStructures.ParameterDescriptor.ParameterType:
        ...
    def GetResultInputIntegerValue(self, parameterName: str) -> int:
        ...
    def GetResultInputScalarValue(self, parameterName: str) -> float:
        ...
    def GetResultInputScalarUnit(self, parameterName: str) -> Unit:
        ...
    def GetResultInputLoadValues(self, parameterName: str, loadCaseName: str) -> float:
        ...
    def GetResultInputLoadUnit(self, parameterName: str) -> Unit:
        ...
    def GetResultInputStringValue(self, parameterName: str) -> str:
        ...
    def GetResultInputBooleanValue(self, parameterName: str) -> bool:
        ...
    def GetResultInputLaminateShorthandNotation(self, parameterName: str) -> str:
        ...
    def GetResultOutputNames(self, outputNames: str) -> None:
        ...
    def GetResultOutputUnit(self, outputName: str) -> Unit:
        ...
    def GetResultOutputIntegerValue(self, parameterName: str, failureModeName: str, loadCaseName: str) -> int:
        ...
    def GetResultOutputScalarValue(self, parameterName: str, failureModeName: str, loadCaseName: str) -> float:
        ...
    def GetResultOutputScalarUnit(self, parameterName: str) -> Unit:
        ...
    def GetResultOutputStringValue(self, parameterName: str, failureModeName: str, loadCaseName: str) -> str:
        ...
    def GetResultOutputBooleanValue(self, parameterName: str, failureModeName: str, loadCaseName: str) -> bool:
        ...
    def GetResultLoadCaseNames(self, loadCaseNames: str) -> None:
        ...
    def GetResultFailModeNames(self, failModeIds: str) -> None:
        ...
    def GetResultInputFileValue(self, parameterName: str) -> str:
        ...
    def GetResultOutputFileValue(self, parameterName: str) -> str:
        ...
    Annotation: Annotations.NoteBase
    Description: str
    ExtractionSourceSet: CAE.AeroStructures.ExtractionSourceSet
    LoadCaseSet: CAE.AeroStructures.LoadCaseSet
    MethodDescriptor: CAE.AeroStructures.MethodDescriptor
    PropertyTable: CAE.AeroStructures.PropTable
    Status: CAE.AeroStructures.BaseCalculation.CalculationStatus


    class CalculationStatus(enum.Enum):
        NotRun = 0
        Error = 1
        Success = 2
    

class AeroStructuresAnnotdirectionoption(enum.Enum):
    Normal = 0
    Xc = 1
    Yc = 2
    Zc = 3
    Unknown = 4


class AeroStructuresAnnotDataS():
    Direction: CAE.AeroStructures.AeroStructuresAnnotdirectionoption
    IsReversed: bool
    LeaderLength: float
    TextSize: float
    def ToString(self) -> str:
        ...


